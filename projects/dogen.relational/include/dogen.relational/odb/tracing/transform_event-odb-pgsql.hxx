// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef DOGEN_RELATIONAL_ODB_TRACING_TRANSFORM_EVENT_ODB_PGSQL_HXX
#define DOGEN_RELATIONAL_ODB_TRACING_TRANSFORM_EVENT_ODB_PGSQL_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2046500 // 2.5.0-b.15
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/optional/wrapper-traits.hxx>
#include <odb/boost/unordered/container-traits.hxx>
#include <odb/boost/date-time/pgsql/gregorian-traits.hxx>
#include <odb/boost/date-time/pgsql/posix-time-traits.hxx>
#include <odb/boost/multi-index/container-traits.hxx>
#include <odb/boost/uuid/pgsql/uuid-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20465UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "dogen.relational/types/tracing/transform_event.hpp"

#include "dogen.relational/odb/tracing/json-odb-pgsql.hxx"
#include "dogen.relational/odb/tracing/run_id-odb-pgsql.hxx"
#include "dogen.relational/odb/tracing/transform_event_key-odb-pgsql.hxx"
#include "dogen.relational/odb/tracing/transform_id-odb-pgsql.hxx"
#include "dogen.relational/odb/tracing/transform_instance_id-odb-pgsql.hxx"

#include "dogen.relational/odb/tracing/transform_event-odb.hxx"

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // transform_event
  //
  template <typename A>
  struct query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >
  {
    // timestamp
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    timestamp_type_;

    static const timestamp_type_ timestamp;

    // transform_event_key
    //
    struct transform_event_key_class_
    {
      transform_event_key_class_ ()
      {
      }

      // transform_instance_id
      //
      struct transform_instance_id_class_1_
      {
        transform_instance_id_class_1_ ()
        {
        }

        // value
        //
        typedef
        pgsql::query_column<
          pgsql::value_traits<
            ::std::string,
            pgsql::id_string >::query_type,
          pgsql::id_string >
        value_type_;

        static const value_type_ value;
      };

      static const transform_instance_id_class_1_ transform_instance_id;

      // event_type
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::dogen::relational::tracing::event_type,
          pgsql::id_integer >::query_type,
        pgsql::id_integer >
      event_type_type_;

      static const event_type_type_ event_type;
    };

    static const transform_event_key_class_ transform_event_key;

    // run_id
    //
    struct run_id_class_
    {
      run_id_class_ ()
      {
      }

      // value
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      value_type_;

      static const value_type_ value;
    };

    static const run_id_class_ run_id;

    // transform_type
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::dogen::relational::tracing::transform_type,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    transform_type_type_;

    static const transform_type_type_ transform_type;

    // transform_id
    //
    struct transform_id_class_
    {
      transform_id_class_ ()
      {
      }

      // value
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      value_type_;

      static const value_type_ value;
    };

    static const transform_id_class_ transform_id;

    // payload
    //
    struct payload_class_
    {
      payload_class_ ()
      {
      }

      // value
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      value_type_;

      static const value_type_ value;
    };

    static const payload_class_ payload;

    // model_id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    model_id_type_;

    static const model_id_type_ model_id;

    // parent_transform
    //
    struct parent_transform_class_
    {
      parent_transform_class_ ()
      {
      }

      // value
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      value_type_;

      static const value_type_ value;
    };

    static const parent_transform_class_ parent_transform;
  };

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::timestamp_type_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::
  timestamp (A::table_name, "\"TIMESTAMP\"", 0);

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_event_key_class_::transform_instance_id_class_1_::value_type_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_event_key_class_::transform_instance_id_class_1_::
  value (A::table_name, "\"TRANSFORM_INSTANCE_ID\"", 0);

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_event_key_class_::transform_instance_id_class_1_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_event_key_class_::transform_instance_id;

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_event_key_class_::event_type_type_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_event_key_class_::
  event_type (A::table_name, "\"EVENT_TYPE\"", 0);

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_event_key_class_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_event_key;

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::run_id_class_::value_type_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::run_id_class_::
  value (A::table_name, "\"RUN_ID\"", 0);

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::run_id_class_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::run_id;

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_type_type_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::
  transform_type (A::table_name, "\"TRANSFORM_TYPE\"", 0);

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_id_class_::value_type_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_id_class_::
  value (A::table_name, "\"TRANSFORM_ID\"", 0);

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_id_class_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::transform_id;

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::payload_class_::value_type_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::payload_class_::
  value (A::table_name, "\"PAYLOAD\"", "to_jsonb((?)::jsonb)");

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::payload_class_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::payload;

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::model_id_type_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::
  model_id (A::table_name, "\"MODEL_ID\"", 0);

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::parent_transform_class_::value_type_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::parent_transform_class_::
  value (A::table_name, "\"PARENT_TRANSFORM\"", 0);

  template <typename A>
  const typename query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::parent_transform_class_
  query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >::parent_transform;

  template <typename A>
  struct pointer_query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >:
    query_columns< ::dogen::relational::tracing::transform_event, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::dogen::relational::tracing::transform_event, id_pgsql >:
    public access::object_traits< ::dogen::relational::tracing::transform_event >
  {
    public:
    struct id_image_type
    {
      composite_value_traits< ::dogen::relational::tracing::transform_event_key, id_pgsql >::image_type id_value;

      std::size_t version;
    };

    struct image_type
    {
      // timestamp_
      //
      long long timestamp_value;
      bool timestamp_null;

      // transform_event_key_
      //
      composite_value_traits< ::dogen::relational::tracing::transform_event_key, id_pgsql >::image_type transform_event_key_value;

      // run_id_
      //
      composite_value_traits< ::dogen::relational::tracing::run_id, id_pgsql >::image_type run_id_value;

      // transform_type_
      //
      int transform_type_value;
      bool transform_type_null;

      // transform_id_
      //
      composite_value_traits< ::dogen::relational::tracing::transform_id, id_pgsql >::image_type transform_id_value;

      // payload_
      //
      composite_value_traits< ::dogen::relational::tracing::json, id_pgsql >::image_type payload_value;

      // model_id_
      //
      details::buffer model_id_value;
      std::size_t model_id_size;
      bool model_id_null;

      // parent_transform_
      //
      composite_value_traits< ::dogen::relational::tracing::transform_instance_id, id_pgsql >::image_type parent_transform_value;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 2UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // transform_event
  //
}

#include "dogen.relational/odb/tracing/transform_event-odb-pgsql.ixx"

#include <odb/post.hxx>

#endif // DOGEN_RELATIONAL_ODB_TRACING_TRANSFORM_EVENT_ODB_PGSQL_HXX
