// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "dogen.relational/odb/tracing/run_event_key-odb-sqlite.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>

namespace odb
{
  // run_event_key
  //

  bool access::composite_value_traits< ::dogen::relational::tracing::run_event_key, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // run_id_
    //
    if (composite_value_traits< ::dogen::relational::tracing::run_id, id_sqlite >::grow (
          i.run_id_value, t + 0UL))
      grew = true;

    // event_type_
    //
    t[1UL] = false;

    return grew;
  }

  void access::composite_value_traits< ::dogen::relational::tracing::run_event_key, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // run_id_
    //
    composite_value_traits< ::dogen::relational::tracing::run_id, id_sqlite >::bind (
      b + n, i.run_id_value, sk);
    n += 1UL;

    // event_type_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.event_type_value;
    b[n].is_null = &i.event_type_null;
    n++;
  }

  bool access::composite_value_traits< ::dogen::relational::tracing::run_event_key, id_sqlite >::
  init (image_type& i,
        const value_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // run_id_
    //
    {
      ::dogen::relational::tracing::run_id const& v =
        o.run_id ();

      if (composite_value_traits< ::dogen::relational::tracing::run_id, id_sqlite >::init (
            i.run_id_value,
            v,
            sk))
        grew = true;
    }

    // event_type_
    //
    {
      ::dogen::relational::tracing::event_type const& v =
        o.event_type ();

      bool is_null (false);
      sqlite::value_traits<
          ::dogen::relational::tracing::event_type,
          sqlite::id_integer >::set_image (
        i.event_type_value,
        is_null,
        v);
      i.event_type_null = is_null;
    }

    return grew;
  }

  void access::composite_value_traits< ::dogen::relational::tracing::run_event_key, id_sqlite >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // run_id_
    //
    {
      ::dogen::relational::tracing::run_id& v =
        o.run_id ();

      composite_value_traits< ::dogen::relational::tracing::run_id, id_sqlite >::init (
        v,
        i.run_id_value,
        db);
    }

    // event_type_
    //
    {
      ::dogen::relational::tracing::event_type v;

      sqlite::value_traits<
          ::dogen::relational::tracing::event_type,
          sqlite::id_integer >::set_value (
        v,
        i.event_type_value,
        i.event_type_null);

      o.event_type (v);
    }
  }
}

#include <odb/post.hxx>
