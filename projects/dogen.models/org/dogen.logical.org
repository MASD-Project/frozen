#+title: dogen.logical
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil
#+tags: { element(e) attribute(a) module(m) }
:PROPERTIES:
:masd.codec.dia.comment: true
:masd.codec.model_modules: dogen.logical
:masd.codec.reference: cpp.builtins
:masd.codec.reference: cpp.std
:masd.codec.reference: cpp.boost
:masd.codec.reference: dogen
:masd.codec.reference: dogen.variability
:masd.codec.reference: dogen.tracing
:masd.codec.reference: masd
:masd.codec.reference: masd.variability
:masd.codec.reference: dogen.profiles
:masd.codec.reference: dogen.physical
:masd.codec.reference: dogen.identification
:masd.codec.input_technical_space: cpp
:masd.variability.profile: dogen.profiles.base.default_profile
:END:

The logcal model defines the core entities that live in the logical
dimension of MASD's conceptual model.

@section logical_0 Overview

The logical model strives to provide a technical-space agnostic
element representation, designed for code generation. Codec models
are obtained via frontends and transformed into "bare" logical models,
at which point they can enter its pipeline. Within it, they are
processed until they form a cohesive whole. They are then in a suitable
state for code generation.

@section asset_1 Mission

The objectives of the logical model are:

@li to represent all high-level entities that exist across a number
of technical spaces used in software engineering. These entities
are not necessarily limited to programming entities, though, of course,
these form the core set of elements we're interested in. Additional
entities such as build sytems and high-level patterns such as GoF
and others are also captured.

@li to provide the tooling required to combine multiple models
together into a bigger model - called the @e merged model.

@li to ensure the consistency of the merged model via validation
rules (such as verifying that all types have a definitions,
etc.).

* entities                                                           :module:
  :PROPERTIES:
  :masd.codec.dia.comment: true
  :END:

Entities that define the logical model.

** attribute                                                        :element:
   :PROPERTIES:
   :masd.codec.stereotypes: Documentable, Configurable, Nameable, Stereotypable
   :END:

Represents an attribute in an object.

*** unparsed_type                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Original type name as it appeared in the source, without any parsing.

Name must be in one of the supported notations.

*** parsed_type                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_name_tree
    :END:

Tree of names that represent the type of the attribute, after suitable parsing.

*** is_immutable                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the attribute can only be read but not set.

*** is_fluent                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the attribute's setter will return the object iteself.

*** orm_properties                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<orm::attribute_properties>
    :END:
*** member_variable_name                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Representation of the attribute name as a member variable.

Note that at present we only support a single style for naming member variables,
across all languages. This will have to be revisited in the future.

*** getter_setter_name                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Name to use for getter and setter.

** Nameable                                                         :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to have a name.

*** name                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_name
    :END:

Fully qualified name.

** Documentable                                                     :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to provide documentation.

*** documentation                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Code comments.

These are expected to follow the grammar of the comment processing tools
of the technical space in question, e.g. Doxygen for C++, JavaDoc for Java,
etc.

** Provenance                                                       :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:

Details of the origin of this model element.

*** provenance                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::codec_provenance
    :END:

Details of the provenance of this model element.

** Containable                                                      :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:

The ability to be contained inside a module.

*** contained_by                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_id
    :END:

ID of the element in which we are contained, if any.

*** in_global_module                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the element is located in the global module.

** Stereotypable                                                    :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:
*** stereotypes                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: stereotypes
    :END:

All stereotypes associated with this element.

** MetaNameable                                                     :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to have a meta-name.

*** meta_name                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_meta_name
    :END:

Name of the element in the meta-model that this instance conforms to.

** TechnicalSpaceRelationship                                       :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:
*** intrinsic_technical_space                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::technical_space
    :END:

Describes the intrinsic nature of the modeling element with regards to technical
spaces.

If the element can be mapped to a technical space then its intrinsic nature is
agnostic. Otherwise, the element belongs to a concrete technical space.

** Configurable                                                     :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to have meta-data associated.

*** configuration                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<variability::entities::configuration>
    :END:

Configuration for this element.

** Labelable                                                        :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:

The ability to attach labels to an element.

*** labels                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::label>
    :END:

All labels associated with this element.

** Generatable                                                      :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:
*** generability_status                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: generability_status
    :END:

The status of this element with regards to generability.

** Element                                                          :element:
   :PROPERTIES:
   :masd.codec.parent: entities::Nameable, entities::Documentable, entities::Provenance, entities::Containable, entities::Stereotypable, entities::MetaNameable, entities::TechnicalSpaceRelationship, entities::Configurable, entities::Labelable, entities::Generatable
   :masd.codec.stereotypes: masd::object_template
   :END:

A unit of coding that can be code generated.

We define the Element object template purely to make our life easier
when creating the element class. It is not required for any other
purpose.

** Stateful                                                         :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to have a state.

*** all_attributes                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<attribute>
    :END:

All attributes associated with this type.

This is a union of the following sets:

@li the set of all attributes obtained via inheritance relationships;
@li the set of all attributes obtained via instantiating object templates,
    including their inheritance tree;
@li the set of all attributes directly associated with the type (local).

The first and third sets are cached in this object. The second isn't as we do
not have a need for it.

*** local_attributes                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<attribute>
    :END:

The set of all attributes directly associated with the type.

*** inherited_attributes                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_name, std::list<attribute>>
    :END:

The set of all attributes obtained via inheritance, by parent name.

Note that we are using name as a key by design (instead of id); it is required for
formatting.

*** is_immutable                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, do not generate setters for the element's attributes.

*** is_fluent                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, generate fluent setters.

** element                                                          :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::visitable, Element
   :END:

Represents a generic logical construct.

An element is anything of interest in a problem domain which needs to be
expressed in code generation. It covers both types (objects, enumerations, etc),
meta-types (object templates) and non-types (modules and backend specific entities).

*** decoration                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::technical_space, boost::optional<decoration::element_properties>>
    :END:

If set, decoration to be added to each generated file.

*** helper_properties                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<helper_properties>
    :END:
** model                                                            :element:
   :PROPERTIES:
   :masd.codec.stereotypes: Nameable, MetaNameable, Provenance
   :END:

Intermediate representation of a masd model.

*** references                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_name, identification::entities::model_type>
    :END:

All other intermediate models that this model depends on, mapped to their
origin.

*** leaves                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_name>
    :END:

All leaf types in this model.

Leaves are types concrete types which have a parent.

*** root_module                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<structural::module>
    :END:
*** input_technical_space                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::technical_space
    :END:

Technical space in which this model was written.

*** output_technical_spaces                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::technical_space>
    :END:

Technical spaces into which to extract the final model.

*** all_technical_spaces                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::technical_space>
    :END:

Set of all technical concrete spaces involved in generating this model.

Includes the primary technical space (e.g. the output technical space) as well as
all of the secondary technical spaces. Does not include any abstract technical
spaces.

*** orm_properties                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<orm::model_properties>
    :END:
*** structural_elements                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: structural::element_repository
    :END:

All structural elements in this model.

*** decoration_elements                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: decoration::element_repository
    :END:

All decoration elements in this model.

*** variability_elements                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: variability::element_repository
    :END:

All variability elements in this model.

*** mapping_elements                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: mapping::element_repository
    :END:

Model elements related to element mapping.

*** templating_elements                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: templating::element_repository
    :END:

Elements related to text templates.

*** serialization_elements                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: serialization::element_repository
    :END:

Elements related to serialization.

*** visual_studio_elements                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: visual_studio::element_repository
    :END:
*** orm_elements                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: orm::element_repository
    :END:
*** build_elements                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: build::element_repository
    :END:
*** physical_elements                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: physical::element_repository
    :END:
*** meta_names                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_meta_id, identification::entities::logical_meta_name>
    :END:

All meta-names by qualified name.

*** streaming_properties                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, streaming_properties>
    :END:
*** technical_space_version                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::technical_space_version
    :END:

Version of the technical space we are targeting.

*** aspect_properties                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, aspect_properties>
    :END:
*** assistant_properties                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, assistant_properties>
    :END:
** elements_traversal                                               :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable::header_only
   :END:
** TraversalVisitor                                                 :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:
** Visitable                                                        :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:

The ability to handle visitation.

*** base_visitor                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<identification::entities::logical_name>
    :END:

Base class of the visitor that visits the current element, if any.

*** derived_visitor                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<identification::entities::logical_name>
    :END:

Derived class of the visitor that visits the current element, if any.

*** is_visitation_root                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
*** is_visitation_leaf                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
** Associatable                                                     :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:

The element has the ability to associate itself with other elements.

*** transparent_associations                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_name>
    :END:

Elements that are involved in aggregation or composition relationships.

*** opaque_associations                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_name>
    :END:

Elements that are involved in aggregation or composition relationships via
indirection.

This is used to break cycles where required.

*** associative_container_keys                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_name>
    :END:

Elements that are keys in an associative container.

** Generalizable                                                    :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:

The element has the ability to be part of a generalization relationship.

*** is_parent                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

True if this element is the parent of one or more elements, false otherwise.

*** is_child                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the element has at least one parent.

*** is_leaf                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

True if the type has a parent but no children.

*** is_final                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the element cannot be inherited from.

*** is_final_requested                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<bool>
    :END:

If present and true/false, user has requested is_final to be true/false.

If not present, user did not make any statements with regards to finality.

*** is_abstract                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the type is an abstract type.

*** in_inheritance_relationship                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

True if the object is related to at least one other object as a parent or a child.

*** root_parents                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_name>
    :END:

Top-most parents at the root of the inheritance hierarchy, if any.

*** parents                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_name>
    :END:

Direct parent of this element, if any.

*** leaves                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_name>
    :END:

Elements that are at the bottom of the inheritance tree.

*** type_registrar                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<identification::entities::logical_name>
    :END:
** Relatable                                                        :element:
   :PROPERTIES:
   :masd.codec.parent: entities::Containable, entities::Visitable, entities::Associatable, entities::Generalizable
   :masd.codec.stereotypes: masd::object_template
   :END:

Element has the ability to have relationships with other elements.

** Parameterisable                                                  :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:
*** type_parameters                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: type_parameters
    :END:
** type_parameters                                                  :element:
*** variable_number_of_parameters                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
*** count                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: unsigned int
    :END:
*** always_in_heap                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
** static_stereotypes                                               :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::enumeration
   :END:

Lists all stereotypes defined in the masd UML profile.

*** fluent                                                        :attribute:
*** immutable                                                     :attribute:
*** visitable                                                     :attribute:
*** structural_object                                             :attribute:
*** structural_object_template                                    :attribute:
*** structural_exception                                          :attribute:
*** structural_primitive                                          :attribute:
*** structural_enumeration                                        :attribute:
*** structural_module                                             :attribute:
*** structural_builtin                                            :attribute:
*** structural_entry_point                                        :attribute:
*** structural_assistant                                          :attribute:
*** orm_object                                                    :attribute:
*** orm_value                                                     :attribute:
*** decoration_modeline_group                                     :attribute:
*** decoration_modeline                                           :attribute:
*** decoration_generation_marker                                  :attribute:
*** decoration_licence                                            :attribute:
*** variability_profile                                           :attribute:
*** variability_profile_template                                  :attribute:
*** variability_feature_bundle                                    :attribute:
*** variability_feature_template_bundle                           :attribute:
*** variability_initializer                                       :attribute:
*** mapping_fixed_mappable                                        :attribute:
*** mapping_extensible_mappable                                   :attribute:
*** templating_logic_less_template                                :attribute:
*** serialization_type_registrar                                  :attribute:
*** visual_studio_solution                                        :attribute:
*** visual_studio_project                                         :attribute:
*** visual_studio_msbuild_targets                                 :attribute:
*** orm_common_odb_options                                        :attribute:
*** build_cmakelists                                              :attribute:
*** physical_backend                                              :attribute:
*** physical_facet                                                :attribute:
*** physical_archetype                                            :attribute:
*** physical_archetype_kind                                       :attribute:
*** physical_part                                                 :attribute:
*** physical_helper                                               :attribute:
** input_model_set                                                  :element:

Represents a set of related logical models used as an input to the logical model chains.

*** target                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: model
    :END:
*** references                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<model>
    :END:
*** fixed_mappings                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<std::string, std::string>
    :END:

Maps a fixed mappable name, using the scope notation, to its destination.

** Container                                                        :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::object_template
   :END:

Has the ability to contain other elements.

*** contains                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_id>
    :END:

All elements contained by this element.

** decoration                                                        :module:
   :PROPERTIES:
   :masd.codec.dia.comment: true
   :END:

Houses all of the meta-modeling elements and
properties related to decorations.

*** licence                                                         :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

Represents legal licence for software projects.

**** short_form                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

#+begin_src fundamental
Short version of the licence, for inclusion in project files.

#+end_src
**** long_form                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

#+begin_src fundamental
Long form of the licence text, suitable for generation of LICENCE files.

#+end_src
*** modeline_group                                                  :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, Container
    :END:

Group of modelines, logically associated.

For example, one may choose to have a set of modelines for @e emacs , or for
@e vi, etc.

**** modelines                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<boost::shared_ptr<modeline>>
     :END:

Modelines that make up the group.

*** modeline                                                        :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

Groups all the fields representing editor variables for emacs, vi, etc.

A field is a key-value pair (KVP), where name is the first element and its value
the second.

Example: -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-

In this particular case, both prefix and postfix are @e -*-; @e mode is the first
field name and its value is @e c++; the KVP separator is @e : and the field
separator is @e ;.

**** editor                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: editor
     :END:

The modeline will use the syntax for this editor.

**** location                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: modeline_location
     :END:

Where to place the modeline.

**** fields                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<modeline_field>
     :END:

List of all the parameters in the preamble, in order of appearence.

**** technical_space                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::technical_space
     :END:

Technical space that this modeline targets.

*** editor                                                          :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::enumeration, dogen::convertible
    :END:

Supported editors for modelines.

**** emacs                                                        :attribute:

The emacs editor.

**** vi                                                           :attribute:

The generic vi editor.

**** vim                                                          :attribute:

The vi-like editor vim.

**** ex                                                           :attribute:

The old ex editor.

*** modeline_field                                                  :element:
**** name                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the field.

**** value                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Value of the field.

*** modeline_location                                               :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::enumeration, dogen::convertible
    :END:

Location in the file to place the modeline.

**** top                                                          :attribute:

Very first line in file.

**** bottom                                                       :attribute:

Very last line in file.

*** generation_marker                                               :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

Properties of the "generation marker" to add to generated files.

These are also known as "location strings".

**** add_date_time                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the location strings will include the date and time of generation.

This is not recomended for models that are generated often as it will trigger
rebuilds for no good reason.

**** add_dogen_version                                            :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, adds the version of dogen used to generate the code.

**** add_model_to_text_transform_details                          :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, adds information about the transform used to generate the file.

**** add_warning                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, warns users that the file was code-generated.

**** add_origin_sha1_hash                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, adds the SHA1 hash of the original model to the marker.

**** message                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Custom message to add to each generated file.

*** element_properties                                              :element:

Decoration for this element.

**** preamble                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Preamble for all artefacts created from this element.

The preamble is located at the top of an artefact and includes elements such as a
modeline, licence,  copyrights, etc.

**** postamble                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Postamble for all artefacts created from this element.

The postamble is located at the bottom of an artefact and includes elements such
as a modeline.

*** element_repository                                              :element:
**** modeline_groups                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<modeline_group>>
     :END:
**** modelines                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<modeline>>
     :END:
**** licences                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<licence>>
     :END:
**** generation_markers                                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<generation_marker>>
     :END:
** meta_element                                                     :element:
   :PROPERTIES:
   :masd.variability.binding_point: element
   :masd.variability.stereotype: logical::meta_element
   :masd.codec.stereotypes: masd::variability::profile
   :END:
*** masd.generalization.parent                                    :attribute:
    :PROPERTIES:
    :masd.codec.value: dogen::logical::entities::element
    :END:
** variability                                                       :module:
   :PROPERTIES:
   :masd.codec.dia.comment: true
   :END:

Houses all of the meta-modeling elements related to variability.

There are two "kinds" of entities in this namespace:

@li those that are used to model the data required to code-generate
dogen's implementation of variability. That is to say, none of these
elements are directly involved in the processing of variability model
data (i.e. the current user model we are processing), but instead they
generate code that injects variability data once compiled and
integrated into dogen. These types setup the geometry of variability
space: feature bundle and feature bundle templates and related
types.

@li those that inject variability data as part of the processing of
the current user model. These types are responsible for instantiating
configurations, within the prevailing geometry of variability
space. Example: profile and profile templates.

Now, it is a bit confusing how variability interacts with the
variability meta-model elements, and it may appear that we repat
ourselves quite a bit when declaring the variability feature
bundles. This is a consequence of the two types of uses for
variability types described above. Lets explore this in more detail.

In general, we tend to declare (register) features and create the
static configuration in the same place. This works for almost all
cases because we normally declare the features where we consume
them. Profiles are _different_: a profile is making use of a feature
declared for a feature (simplifying somewhat). That is, at run time, a
profile is the instantiation of a feature defined elsewhere. Remember
that features are nothing more than a type system designed to give a
"strongly typed" feel to the meta-data. Profiles are just an
instantiation of those strong types.

In theory, profile meta-data should already exist and match exactly
what was defined for features; in practice there is a mismatch, and
this is due to how we modeled features and feature bundles: to avoid
repetition, we placed some features at the top-level and others in the
features themselves. This approach does not match the shape required
for profiles, so we need to redefine the bundle. However, of course,
we do not want to register the features this time around (after all,
they already exist) so we need to disable feature registration. In the
future we hope to simplify this by making the shapes align - though
perhaps it will have the underisable side-effect of hiding all of this
complexity.

*** abstract_feature                                                :element:
    :PROPERTIES:
    :masd.codec.stereotypes: Documentable, Configurable, Nameable
    :END:

Contains all of the common attributes between features and feature templates.

**** original_key                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Key as it was originally provided by the user.

**** key                                                          :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Identifier of the feature, as will be seen by the end user.

**** identifiable_key                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Post-processed key, suitable for use as an identifier.

**** unparsed_type                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Type of the static configuration field, as read out from original model.

This is the type before mapping and parsing.

**** mapped_type                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Unparsed type, after mapping has taken place.

**** parsed_type                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::logical_name_tree
     :END:

Mapped type, after parsing has taken place.

**** default_value                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

String representing the default value set on the model.

**** value_type                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: variability::entities::value_type
     :END:

Type of the value pointed to by the feature.

By implication, this also determines the type of the default value.

**** binding_point                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<variability::entities::binding_point>
     :END:

Override binding point for this feature.

If the default binding point is supplied for a bundle, the features cannot
supply individual binding points. Conversely, if not supplied, they must supply
their individual binding points.

**** is_optional                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the feature generated by the feature template is optional.

**** requires_optionality                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the feature's static configuration will have an optional type.

This is only required if the feature template is optional and has no default value.

*** feature_template                                                :element:
    :PROPERTIES:
    :masd.codec.parent: entities::variability::abstract_feature
    :END:

Represents a feature template in variability space.

Feature templates are expanded into features within the variability model.

**** default_value_overrides                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<default_value_override>
     :END:
*** initializer                                                     :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

Responsible for initialising features and feature templates.

**** feature_template_bundles                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

Names of all the templates that this initialiser will register.

**** feature_bundles                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

Names of all the features that this initialiser will register.

*** element_repository                                              :element:
**** profile_templates                                            :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<profile_template>>
     :END:
**** profiles                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<profile>>
     :END:
**** feature_template_bundles                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<feature_template_bundle>>
     :END:
**** feature_bundles                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<feature_bundle>>
     :END:
**** initializer                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::shared_ptr<initializer>
     :END:
*** abstract_bundle                                                 :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, Associatable
    :END:

A feature template bundle represents an aggregation of feature templates in a
model.

The feature templates should be "semantically related", that is, belong to a related
topic. A feature template bundle is used by code generation to generate
infrastructural code to ease the creation and subsequent processing of features.

Generated code comprises of two aspects:

@li the registration of the feature template for the dynamic part of the processing;
@li the generation of a static configuration class to  represent the feature once
 read out from the dynamic configuration - if requested.

**** key_prefix                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Prefix to use when composing the key, if any.

**** generate_registration                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, code will be generated to perform the registration of the features.

**** generate_static_configuration                                :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the code generator will output a class to represent the static configuration.

**** requires_manual_default_constructor                          :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the code generated for this feature template bundle needs a manually
generated default constructor.

**** default_binding_point                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<variability::entities::binding_point>
     :END:

Default binding point for all feature templates in this bundle.

The binding point indicates where the feature will bind when instantiated in a
model. If the default binding point is supplied for a bundle, the templates cannot
supply individual binding points. Conversely, if not supplied, they must supply
their individual binding points.

*** feature_bundle                                                  :element:
    :PROPERTIES:
    :masd.codec.parent: entities::variability::abstract_bundle
    :END:

A feature bundle represents an aggregation of features in a model.

The features should be "semantically related", that is, belong to a related
topic. A feature bundle is used by code generation to generate infrastructural code
to ease the creation and subsequent processing of features.

Generated code comprises of two aspects:

@li the registration of the feature for the dynamic part of the processing;
@li the generation of a static configuration class to  represent the feature once
 read out from the dynamic configuration.

Both of these aspects are optional, but at least one must be chosen.

**** features                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<feature>
     :END:

Set of features associated with this feature bundle.

*** feature                                                         :element:
    :PROPERTIES:
    :masd.codec.parent: entities::variability::abstract_feature
    :END:

Represents a feature in variability space.

*** feature_template_bundle                                         :element:
    :PROPERTIES:
    :masd.codec.parent: entities::variability::abstract_bundle
    :END:

A feature template bundle represents an aggregation of feature templates in a
model.

The feature templates should be "semantically related", that is, belong to a related
topic. A feature template bundle is used by code generation to generate
infrastructural code to ease the creation and subsequent processing of features.

Generated code comprises of two aspects:

@li the registration of the feature template for the dynamic part of the processing;
@li the generation of a static configuration class to  represent the feature once
 read out from the dynamic configuration.

Both of these aspects are optional, but at least one must be chosen.

**** feature_templates                                            :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<feature_template>
     :END:

Set of feature templates associated with this feature template bundle.

**** instantiation_domain_name                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
*** abstract_profile                                                :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:
**** stereotype                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** parents                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

Parents of this profile template.

**** key_prefix                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Prefix to use when composing the key, if any.

*** profile_template                                                :element:
    :PROPERTIES:
    :masd.codec.parent: entities::variability::abstract_profile
    :END:
**** entries                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<profile_template_entry>
     :END:
*** profile                                                         :element:
    :PROPERTIES:
    :masd.codec.parent: entities::variability::abstract_profile
    :END:

Represents a profile from the variability subsystem.

**** entries                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<profile_entry>
     :END:

Configuration entries in this profile.

**** binding_point                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Binding point for the profile.

*** abstract_profile_entry                                          :element:
    :PROPERTIES:
    :masd.codec.stereotypes: Documentable, Configurable, Nameable
    :END:
**** original_key                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Key as it was originally provided by the user.

**** key                                                          :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** value                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::string>
     :END:
*** profile_entry                                                   :element:
    :PROPERTIES:
    :masd.codec.parent: entities::variability::abstract_profile_entry
    :END:
*** profile_template_entry                                          :element:
    :PROPERTIES:
    :masd.codec.parent: entities::variability::abstract_profile_entry
    :END:
**** instantiation_domain_name                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
*** default_value_override                                          :element:
**** key_ends_with                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** default_value                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
** orm                                                               :module:
   :PROPERTIES:
   :masd.codec.dia.comment: true
   :END:

Houses all of the properties related to ORM
support in Dogen.

*** model_properties                                                :element:
    :PROPERTIES:
    :masd.codec.stereotypes: Schemable, Caseable
    :END:
**** database_systems                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::vector<database_system>
     :END:
*** database_system                                                 :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::enumeration, dogen::hashable, dogen::convertible
    :END:
**** mysql                                                        :attribute:
**** postgresql                                                   :attribute:
**** oracle                                                       :attribute:
**** sql_server                                                   :attribute:
**** sqlite                                                       :attribute:
*** letter_case                                                     :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::enumeration, dogen::convertible
    :END:
**** upper_case                                                   :attribute:
**** lower_case                                                   :attribute:
*** object_properties                                               :element:
    :PROPERTIES:
    :masd.codec.stereotypes: OrmElement
    :END:
**** table_name                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the table to map this element to.

**** is_value                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, treat this object as a value type (e.g. simple type) rather than as an object.

**** has_primary_key                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

True if the object has an attribute marked as a primary key, false otherwise.

*** primitive_properties                                            :element:
    :PROPERTIES:
    :masd.codec.stereotypes: OrmElement, Overridable
    :END:
*** module_properties                                               :element:
    :PROPERTIES:
    :masd.codec.stereotypes: Schemable, Caseable
    :END:
*** attribute_properties                                            :element:
    :PROPERTIES:
    :masd.codec.stereotypes: Overridable, OdbPragmable
    :END:
**** column_name                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the column to use for this attribute. If populated, will override the attribute name.

**** is_primary_key                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this attribute is a primary key for the relation.

**** is_nullable                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<bool>
     :END:

If true, the attribute can be NULL.

**** is_composite                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the value of this attribute is a composite value.

*** Schemable                                                       :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::object_template
    :END:

Model element can belong to a relational database schema.

**** schema_name                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the database schema in which to place this element.

**** capitalised_schema_name                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Schema name with the correct capitalisation.

*** Caseable                                                        :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::object_template
    :END:

The model element supports configuration related to casing.

**** letter_case                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<letter_case>
     :END:

What case to use for the database identifiers.

*** Mappeable                                                       :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::object_template
    :END:
**** generate_mapping                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, object-relational mapping will be generated for this element.

*** TypeMappable                                                    :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::object_template
    :END:
**** type_mappings                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<type_mapping>
     :END:

List of mappings of relational database types.

*** OdbPragmable                                                    :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::object_template
    :END:
**** odb_pragmas                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::string>
     :END:

Pragmas for the ODB ORM backend.

*** OrmElement                                                      :element:
    :PROPERTIES:
    :masd.codec.parent: entities::orm::Schemable, entities::orm::Caseable, entities::orm::Mappeable, entities::orm::TypeMappable, entities::orm::OdbPragmable
    :masd.codec.stereotypes: masd::object_template
    :END:
**** odb_options                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: odb_options
     :END:
*** Overridable                                                     :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::object_template
    :END:
**** type_overrides                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<database_system, std::string>
     :END:

Override the default type for this attribute for a given database system.

*** type_mapping                                                    :element:
**** source_type                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Type which we intend to map from. Example: TEXT.

**** destination_type                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Type we intend to map to. Example: JSONB.

**** to_source_type                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Function that converts into the source type.

**** to_destination_type                                          :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Function that converts into the destination type.

**** database                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<database_system>
     :END:

Database to which the mapping applies. If none is supplied, it will apply to all.

*** odb_options                                                     :element:
**** epilogue                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** include_regexes                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::string>
     :END:
**** header_guard_prefix                                          :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
*** common_odb_options                                              :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:
**** sql_name_case                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** databases                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::string>
     :END:
*** element_repository                                              :element:
**** common_odb_options                                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<common_odb_options>>
     :END:
*** odb_targets                                                     :element:
**** main_target_name                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** common_odb_options                                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** targets                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<odb_target>
     :END:
*** odb_target                                                      :element:
**** name                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** comment                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** output_directory                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** types_file                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** move_parameters                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::pair<std::string, std::string>>
     :END:
**** object_odb_options                                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
** structural                                                        :module:
   :PROPERTIES:
   :masd.codec.dia.comment: true
   :END:

Houses all of the meta-modeling elements related
to structural modeling.

*** object_template                                                 :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, Stateful
    :END:

Represents a structural template for masd objects.

**** parents                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

List of object templates that this object template inherits from, if any.

**** is_child                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the object template has at least one parent.

*** object                                                          :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, Stateful, Relatable, Parameterisable, TechnicalSpaceProperties
    :END:

Representation of the class notion in the OOP paradigm.

The @e object is equivalent to a meta-class, but we decided against this
name because all elements should also have the prefix meta - after all, logical
is ameta-model. Since the word class cannot be used in c++ to name types, we
decided instead to use the word object.

**** is_associative_container                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

Object is an associative container.

**** object_templates                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

All object templates associated with this object.

**** provides_opaqueness                                          :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this type provides opaqueness to any type parameters it may have.

**** can_be_primitive_underlier                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this object can be the underlying element of a primitive.

**** orm_properties                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<dogen::logical::entities::orm::object_properties>
     :END:
*** builtin                                                         :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

Represents a value type that is built-in at the hardware level.

**** is_default_enumeration_type                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this built-in is the default type to be used on enumerations.

**** is_floating_point                                            :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this built-in represents a floating point number.

**** can_be_enumeration_underlier                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this element can be the underlying element of an enumeration.

**** can_be_primitive_underlier                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this built-in can be the underlying element of a primitive.

*** exception                                                       :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

Represents an exception which can be thrown.

*** visitor                                                         :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:
**** visits                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

Elements that are visitable by the visitor.

**** parent                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<identification::entities::logical_name>
     :END:
*** primitive                                                       :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, TechnicalSpaceProperties
    :END:

Defines an element created by the user to wrap another element, most likely a built-in.

**** is_nullable                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this element can be null (empty).

**** value_attribute                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: attribute
     :END:

Attribute that represents the value of the primitive.

**** use_type_aliasing                                            :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If set to true, and if the owning technical space supports it, use type aliasing.

**** is_immutable                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, do not generate modifiable operations.

**** orm_properties                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<dogen::logical::entities::orm::primitive_properties>
     :END:
*** module                                                          :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, Container
    :END:

Container for other logical elements.

Aggregates a group of logically related elements into a unit.

**** is_root                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this module is thee root module of the model.

**** is_global_module                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this module is the pseudo module that models the global namespace.

**** orm_properties                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<dogen::logical::entities::orm::module_properties>
     :END:
*** enumeration                                                     :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

Defines a bounded set of logically related values for a built-in type
or a string.

**** underlying_element                                           :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::logical_name
     :END:

Underlying element of each instance of the enumeration.

**** enumerators                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<enumerator>
     :END:

Enumerators for this enumeration.

**** use_implementation_defined_underlying_element                :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, we will use the implementation specific default enumeration type.

**** use_implementation_defined_enumerator_values                 :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, we will rely on compiler generated enumeration values.

**** add_invalid_enumerator                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, an enumerator for "invalid" will be added.

*** enumerator                                                      :element:
    :PROPERTIES:
    :masd.codec.stereotypes: Documentable, Nameable, Configurable, Stereotypable
    :END:

One of a set of valid values that an enumeration can assume.

The enumerator defines an element in the domain of the enumeration.

**** value                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Value for the enumerator.

It must be castable to instance of the type defined in the enumeration.

*** element_repository                                              :element:
**** modules                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<module>>
     :END:
**** object_templates                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<object_template>>
     :END:
**** builtins                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<builtin>>
     :END:
**** enumerations                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<enumeration>>
     :END:
**** primitives                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<primitive>>
     :END:
**** objects                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<object>>
     :END:
**** exceptions                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<exception>>
     :END:
**** visitors                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<visitor>>
     :END:
**** entry_points                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<entry_point>>
     :END:
**** assistants                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<assistant>>
     :END:
*** entry_point                                                     :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

Represents an entry point to a binary.

*** assistant                                                       :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

General type to provide helpers.

*** technical_space_properties                                      :element:
**** requires_manual_default_constructor                          :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:
**** requires_manual_move_constructor                             :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:
**** requires_stream_manipulators                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:
**** requires_static_reference_equals                             :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:
*** TechnicalSpaceProperties                                        :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::object_template
    :END:
**** technical_space_properties                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: technical_space_properties
     :END:
** mapping                                                           :module:
   :PROPERTIES:
   :masd.codec.dia.comment: true
   :END:

Meta-model elements related to mapping domains.

*** extensible_mappable                                             :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

A mappable meta-model element for the general purpose of mapping.

Mappables can be used to create a Platform Independent Model (PIM), which is then
mapped to concrete types to form a Platform Specific Model (PSM). Users can
extend the mappings as required.

**** destinations                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<destination>
     :END:

All the destinations that this source has been mapped to.

*** element_repository                                              :element:
**** extensible_mappables                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<extensible_mappable>>
     :END:
**** fixed_mappables                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<fixed_mappable>>
     :END:
*** destination                                                     :element:
**** name                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::logical_name
     :END:
**** technical_space                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::technical_space
     :END:
*** fixed_mappable                                                  :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

A mappable meta-model element for a special purpose.

At present, the only fixed mappables used by Dogen are related to the mapping of
variability types.

**** destination                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
** templating                                                        :module:
   :PROPERTIES:
   :masd.codec.dia.comment: true
   :END:

Meta-model elements related to templating .

*** logic_less_template                                             :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

Represents a logic-less template.

At present the system only supports wale templates.

**** content                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

#+begin_src mustache
Content of the logic-less template.

#+end_src
*** element_repository                                              :element:
**** logic_less_templates                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<logic_less_template>>
     :END:
** serialization                                                     :module:
   :PROPERTIES:
   :masd.codec.dia.comment: true
   :END:

Houses all of the meta-modeling elements related
to serialisation.

*** type_registrar                                                  :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

Responsible for registering types for serialisation purposes.

Certain libraries in certain technical spaces - such as Boost Serialisation, in C++ -
require types that are in an inheritance relationship to be made known to the
serialisation infrastructure in order for the deserialisation of base and derived
types to work. The type registrar is aware of all types with such requirements and
generates the registration code as needed.

**** leaves                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

List of all concrete classes which are part of an inheritance tree.

**** registrar_dependencies                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

Registrars on other models this registrar depends on.

*** element_repository                                              :element:
**** type_registrars                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<type_registrar>>
     :END:
** visual_studio                                                     :module:
   :PROPERTIES:
   :masd.codec.dia.comment: true
   :END:

Houses meta-model elements related to
build systems.

*** project                                                         :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, UniquelyIdentifiable
    :END:

Represents a Visual Studio project.

**** type_guid                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

GUID used by Visual Studio to identify projects of this type.

**** item_groups                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<item_group>
     :END:

Set of item groups in the project.

**** project_name                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Formatted name of the project.

*** element_repository                                              :element:
**** solutions                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<solution>>
     :END:

All solutions in this model.

**** projects                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<project>>
     :END:

All projects in this model.

**** msbuild_targets                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<msbuild_targets>>
     :END:
*** item_group                                                      :element:

Represents an MSBuild ItemGroup.

Documented as follows: Contains a set of user-defined Item elements. Every item
used in a MSBuild project must be specified as a child of an ItemGroup element.

**** items                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<item>
     :END:

Set of MSBuild Items that make up this ItemGroup.

*** item                                                            :element:

Represents an MSBuild Item, used in Visual Studio projects.

Documentation:  Contains a user-defined item and its metadata. Every item that is
used in a MSBuild project must be specified as a child of an ItemGroup element.

**** name                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the item, such as "Compile", "CompileCl", etc.

Maps to a well known MSBuild target.

**** include                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the file to include.

*** solution                                                        :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, UniquelyIdentifiable
    :END:
**** project_persistence_blocks                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<project_persistence_block>
     :END:

Set of project persistence blocks in this solution.

*** project_persistence_block                                       :element:
    :PROPERTIES:
    :masd.codec.stereotypes: UniquelyIdentifiable
    :END:
**** name                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the project.

**** relative_path                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::filesystem::path
     :END:

Relative path to the project file.

**** type_guid                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

GUID used by Visual Studio to identify projects of this type.

*** UniquelyIdentifiable                                            :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::object_template
    :END:
**** guid                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

GUID that uniquely identifies this element.

*** msbuild_targets                                                 :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:
**** odb_targets                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: dogen::logical::entities::orm::odb_targets
     :END:
** build                                                             :module:
   :PROPERTIES:
   :masd.codec.dia.comment: true
   :END:

Houses all of the meta-modeling elements related
to building, which don't have their own containing
namespace.

*** element_repository                                              :element:
**** cmakelists                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<cmakelists>>
     :END:
*** cmakelists                                                      :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element
    :END:

Represents build CMakeLists files.

**** include_directory_path                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** source_directory_name                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** header_file_extension                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** implementation_file_extension                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** odb_targets                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: dogen::logical::entities::orm::odb_targets
     :END:
**** tests_directory_name                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
** physical                                                          :module:
   :PROPERTIES:
   :masd.codec.dia.comment: true
   :END:

Logical representation of elements in the physical dimension.

*** element_repository                                              :element:
**** backends                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<backend>>
     :END:
**** facets                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<facet>>
     :END:
**** archetypes                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<archetype>>
     :END:
**** parts                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<part>>
     :END:
**** archetype_kinds                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<archetype_kind>>
     :END:
**** helpers                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<helper>>
     :END:
*** archetype                                                       :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, PhysicalElement, HasTechnicalSpace
    :END:

Represents an archetype within a facet.

**** facet_name                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the facet containing this element.

**** part_id                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

ID for the part this archetype belongs to.

**** logical_meta_element_id                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::logical_meta_id
     :END:

ID of the meta-element in the logical model this archetype binds to.

**** relations                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: relations
     :END:

Relation information for this archetype.

**** text_templating                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: text_templating
     :END:

Properties related to the text templating for this archetype.

**** postfix                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Default postfix to use for this archetype.

*** backend                                                         :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, PhysicalElement, Container, HasTechnicalSpace
    :END:

Represents a physical backend, targetting a major technical space such as C++ or C#.

**** facets                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

All facets within this backend.

**** parts                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

All parts within this backend.

**** archetype_kinds                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

Kinds of archetypes defined in this backend.

**** directory_name                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Default directory name to use for this backend.

*** facet                                                           :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, PhysicalElement, Container
    :END:

Represents a facet within a backend, such as type definitions.

**** archetypes                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

All archetypes in this facet.

**** helpers                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:
**** directory_name                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Default directory name to use for this facet.

**** postfix                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Default postfix to use for this facet.

*** part                                                            :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, PhysicalElement
    :END:

Part whithin a backend.

**** external_modules_path_contribution                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

What kind of contribution do the external modules make to the final path.

**** model_modules_path_contribution                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

What kind of contribution do the model modules make to the final path.

**** facet_path_contribution                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

What kind of contribution does the facet make to the final path.

**** internal_modules_path_contribution                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

What kind of contribution do the internal modules make to the final path.

**** requires_relative_path                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, a relative path should be generated for this part.

**** archetypes                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

All archetypes in this part.

**** directory_name                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Default directory name to use for this part.

*** archetype_kind                                                  :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, PhysicalElement
    :END:
**** file_extension                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Extension to use for the files of this kind.

*** PhysicalElement                                                 :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::object_template
    :END:
**** id                                                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Unique identifier in physical space for this element.

**** major_technical_space                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::technical_space
     :END:

Technical space to which this physical element belongs to.

**** meta_model_name                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the physical meta-model containing this element.

**** backend_name                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the backend containing this element.

*** variable_relation                                               :element:
    :PROPERTIES:
    :masd.codec.stereotypes: Urnable
    :END:
**** type                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Type of the variable relation.

*** constant_relation                                               :element:
    :PROPERTIES:
    :masd.codec.stereotypes: Urnable, Labelable
    :END:
**** logical_model_element_id                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
*** Urnable                                                         :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::object_template
    :END:
**** original_urn                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

URN pointing to an archetype or a label, as it was originally created by the user.

 It must have the form "archetype:" if pointing to an archetype, or  "label:" if
pointing to a label, and then is followed by "KEY:VALUE". The label must resolve
to a unique archetype.

*** hard_coded_relation                                             :element:
**** value                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
*** relations                                                       :element:
**** status                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Status of this archetype with regards to relations.

**** constant                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<constant_relation>
     :END:

All archetypes this archetype is related to,  over a fixed logical meta-model
element.

**** variable                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<variable_relation>
     :END:
**** hard_coded                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<hard_coded_relation>
     :END:
*** text_templating                                                 :element:
    :PROPERTIES:
    :masd.codec.stereotypes: Configurable
    :END:

Contains all the properties related to the generation of archetypes themselves.

**** stitch_template_content                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

#+begin_src fundamental
Content of the stitch template associated with this archetype, if any exists.

#+end_src
**** wale_template                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<identification::entities::logical_name>
     :END:

Parsed name of the wale template linked to this archetype, if any.

**** wale_template_content                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Content of the wale template associated with this archetype, if any exists.

**** rendered_stitch_template                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Contains the result of the stitch template after rendering.

**** relations                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: relations
     :END:

Relation information for this archetype.

*** HasTechnicalSpace                                               :element:
    :PROPERTIES:
    :masd.codec.stereotypes: masd::object_template
    :END:
**** technical_space                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Technical space to which this physical element belongs to.

*** helper                                                          :element:
    :PROPERTIES:
    :masd.codec.stereotypes: logical::meta_element, PhysicalElement
    :END:
**** part_id                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** facet_name                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** family                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** owning_formatters                                            :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::string>
     :END:
**** owning_facets                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::string>
     :END:
**** helper_name                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:
**** text_templating                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: text_templating
     :END:
**** relations                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: relations
     :END:

Relation information for this helper.

** output_model_set                                                 :element:
   :PROPERTIES:
   :masd.codec.stereotypes: Nameable
   :END:

Represents a set of related logical models produced as ouput of the logical model chains.

*** models                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<model>
    :END:

All models in this model set.

** generability_status                                              :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::enumeration
   :END:

The status of this element with regards to generability.

*** non_generatable_source                                        :attribute:

The element was sourced from a non-target model.

*** generation_not_expected                                       :attribute:

The element is of a type that is expected to have support for generation.

*** non_generatable_state                                         :attribute:

The element is normally generatable, but is in a state that precludes generation.

*** generation_disabled                                           :attribute:

The user requested generation to be disabled.

*** generation_ignored                                            :attribute:

User requested that any changes to this element are to be ignored.

*** generatable                                                   :attribute:

The element is generatable.

** stereotypes                                                      :element:

Stereotype information associated with this element.

*** static_stereotypes                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<static_stereotypes>
    :END:

Stereotypes that are part of the dogen UML profile, and so are well-known to the
model.

*** dynamic_stereotypes                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::stereotype>
    :END:

Stereotypes that are not part of the masd UML profile. These are user defined.

** streaming_properties                                             :element:
*** requires_quoting                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
*** string_conversion_method                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:
*** remove_unprintable_characters                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
** helper_properties                                                :element:
*** current                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: helper_descriptor
    :END:
*** direct_descendants                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<helper_descriptor>
    :END:
*** in_inheritance_relationship                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
** helper_descriptor                                                :element:
*** family                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:
*** namespaces                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:
*** name_identifiable                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:
*** name_qualified                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:
*** name_tree_qualified                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:
*** name_tree_identifiable                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:
*** streaming_properties                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<streaming_properties>
    :END:
*** is_simple_type                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
*** requires_hashing_helper                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
*** is_circular_dependency                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
*** is_pointer                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
** aspect_properties                                                :element:
*** requires_static_reference_equals                              :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
** assistant_properties                                             :element:
*** requires_assistance                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the type needs help of an assistant.

*** method_postfix                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Postfix to use to call the appropriate assistant method, if required.

* traits                                                            :element:
  :PROPERTIES:
  :masd.codec.stereotypes: dogen::handcrafted::typeable
  :END:
* transforms                                                         :module:
  :PROPERTIES:
  :masd.codec.dia.comment: true
  :END:

Houses all of the transformations supported by logical.

** context                                                          :element:
   :PROPERTIES:
   :masd.cpp.types.class_forward_declarations.enabled: true
   :masd.codec.stereotypes: dogen::typeable, dogen::pretty_printable
   :END:

Context for all logical transformations.

Contains all of the external data required for the transformations
to execute. It's not ideal to have a huge "global" class, with lots
of unrelated state; however, over time, we found that a number of
arguments were being supplied across the call graph, resulting in a
lot of repetitive code. The context gathers together all of these.

*** compatibility_mode                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:
*** feature_model                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<variability::entities::feature_model>
    :END:
*** physical_meta_model                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<physical::entities::meta_model>
    :END:

Meta-model for the physical dimension.

*** mapping_repository                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<helpers::mapping_set_repository>
    :END:
*** tracer                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<tracing::tracer>
    :END:
*** activity_timestamp                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Human readable timestamp of when the activity took place.

** pre_assembly_chain                                               :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** model_production_chain                                           :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** assembly_chain                                                   :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** post_assembly_chain                                              :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** merge_transform                                                  :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** modules_transform                                                :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** origin_transform                                                 :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** technical_space_transform                                        :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** type_params_transform                                            :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** parsing_transform                                                :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** primitives_transform                                             :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** generalization_transform                                         :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** stereotypes_transform                                            :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** object_templates_transform                                       :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** global_module_transform                                          :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** orm_transform                                                    :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** resolver_transform                                               :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** attributes_transform                                             :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** associations_transform                                           :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** transformation_error                                             :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred whilst applying a transformation.

** enumerations_transform                                           :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** extensible_mapping_transform                                     :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** meta_naming_transform                                            :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** modelines_transform                                              :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** containment_transform                                            :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** variability_features_transform                                   :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** mapping_elements_transform                                       :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** type_registrar_transform                                         :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** visual_studio_transform                                          :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** visual_studio_project_type_transform                             :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** odb_options_transform                                            :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** variability_profiles_chain                                       :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** dynamic_stereotypes_transform                                    :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** variability_profiles_transform                                   :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** physical_entities_transform                                      :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** template_rendering_transform                                     :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** decoration_transform                                             :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** all_technical_spaces_transform                                   :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** labelling_transform                                              :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** generability_transform                                           :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** streaming_properties_transform                                   :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** technical_space_properties_transform                             :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** helper_properties_transform                                      :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** aspect_properties_transform                                      :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** assistant_properties_transform                                   :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** documentation_transform                                          :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
* helpers                                                            :module:
** decomposition_result                                             :element:
*** names                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::pair<identification::entities::logical_id, identification::entities::logical_name>>
    :END:
*** meta_names                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::pair<identification::entities::logical_id, identification::entities::logical_meta_name>>
    :END:
*** name_trees                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::pair<identification::entities::logical_id, identification::entities::logical_name_tree>>
    :END:
** decomposer                                                       :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** post_assembly_validator                                          :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** validation_error                                                 :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred during validation.

** pre_assembly_validator                                           :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** indices                                                          :element:
*** objects_always_in_heap                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_id>
    :END:
*** elements_referable_by_attributes                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_id>
    :END:
*** primitive_underliers                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_id>
    :END:
*** enumeration_underliers                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_id>
    :END:
*** abstract_elements                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_id>
    :END:
** indexing_error                                                   :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::exception
   :END:

A fatal error has occurred while indexing.

** indexer                                                          :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** resolver                                                         :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** resolution_error                                                 :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred while trying to resolve a type.

** mapping_error                                                    :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::exception
   :END:

An error has occurred while mapping element names.

** mapper                                                           :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** mapping_context                                                  :element:
*** translations                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, identification::entities::logical_name>
    :END:
*** erasures                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_id>
    :END:
*** codecs                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, identification::entities::logical_name>
    :END:
** mapping_set                                                      :element:

Consistent unit of mapping that can be used to translate a model from one technical
space to another.

*** name                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:
*** by_agnostic_id                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::technical_space, std::unordered_map<identification::entities::logical_id, identification::entities::logical_name>>
    :END:
*** erasures_by_technical_space                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::technical_space, std::unordered_set<identification::entities::logical_id>>
    :END:
** mapping_set_repository                                           :element:

Stores all available mapping sets.

*** default_mapping_set                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: mapping_set
    :END:
*** by_name                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<std::string, mapping_set>
    :END:
** mappings_validator                                               :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** mapping                                                          :element:

Stores the mapping of a key (the element id) to its values, organised by technical
space.

*** agnostic_id                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_id
    :END:

Technical space agnostic ID of the element we're mapping from.

*** by_technical_space                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::technical_space, mapping_value>
    :END:

Values of the mapping, by technical space.

** mapping_value                                                    :element:

Value of a mapping.

*** mapping_action                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: mapping_actions
    :END:
*** default_name                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<identification::entities::logical_name>
    :END:
** mapping_actions                                                  :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::enumeration
   :END:
*** translate                                                     :attribute:
*** erase                                                         :attribute:
** visual_studio_project_type_mapper                                :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** profile_adapter                                                  :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** configuration_model_set_adapter                                  :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** adaptation_exception                                             :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::exception
   :END:
** decoration_repository                                            :element:
*** modelines_by_modeline_group_by_technical_space                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, std::unordered_map<identification::entities::technical_space, boost::shared_ptr<logical::entities::decoration::modeline>>>
    :END:
*** licences_by_name                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<logical::entities::decoration::licence>>
    :END:
*** generation_markers_by_name                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<logical::entities::decoration::generation_marker>>
    :END:
** decoration_repository_factory                                    :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** decoration_configuration                                         :element:
*** enabled                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<bool>
    :END:
*** copyright_notices                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:
*** licence_name                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_id
    :END:
*** modeline_group_name                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_id
    :END:
*** marker_name                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_id
    :END:
** decoration_configuration_factory                                 :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** decoration_factory                                               :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** stereotypes_helper                                               :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** building_error                                                   :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::exception
   :END:

An error has occurred in a factory.

* features                                                           :module:
  :PROPERTIES:
  :masd.codec.dia.comment: true
  :END:

Defines all features used by the logical model.

** type_parameters                                                  :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: element
   :masd.variability.key_prefix: masd.type_parameters
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Parameters to configure generic types.

*** variable_number_of_parameters                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:
*** count                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::number
    :masd.codec.value: "0"
    :END:
*** always_in_heap                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:
** initializer                                                      :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::variability::initializer
   :END:
** enumeration                                                      :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: element
   :masd.variability.key_prefix: masd.enumeration
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Parameters related to enumerations.

*** use_implementation_defined_underlying_element                 :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, it uses the default implementation defined underlying element for the
technical space targeted.

*** underlying_element                                            :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the underlying element to use for the enumeration.

*** use_implementation_defined_enumerator_values                  :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, uses the enumeration values supplied by the underlying technical space.

*** add_invalid_enumerator                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

If true, adds an enumerator to represent an invalid choice.

** enumerator                                                       :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: property
   :masd.variability.key_prefix: masd.enumerator
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Parameters related to enumerators.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Value to use for this enumerator. Must be unique for an enumeration.

** generalization                                                   :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: element
   :masd.variability.key_prefix: masd.generalization
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the generalization relationship.

*** is_final                                                      :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::boolean
    :END:

Whether to mark a type as final or not.

*** parent                                                        :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the parent of the current element.

** origin                                                           :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: global
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the origin of the model.

*** masd.codec.is_proxy_model                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, sets the origin of the model to "proxy model".

** output_technical_space                                           :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: global
   :masd.variability.key_prefix: masd.physical
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the output technical space.

*** output_technical_space                                        :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Set of output technical spaces that this model targets.

** primitive                                                        :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: element
   :masd.variability.key_prefix: masd.primitive
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to primitive elements.

*** underlying_element                                            :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the underlying element to use for the primitive.

*** is_nullable                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, the primitive can be null.

*** use_type_aliasing                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, use type aliasing to implement the primitive if the technical space supports
it.

** orm                                                              :element:
   :PROPERTIES:
   :masd.variability.key_prefix: masd.orm
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to ORM support.

*** database_system                                               :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Database system to target for ORM support.

*** table_name                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the database table for this element.

*** schema_name                                                   :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the database schema for this modeling element.

*** is_primary_key                                                :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::boolean
    :END:

If true, this property will be used for the primary key.

*** column_name                                                   :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Overrides the name of the column name for the database table.

*** is_nullable                                                   :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::boolean
    :END:

If true, the column can be null.

*** is_composite                                                  :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::boolean
    :END:

If true, the primary key is a composite key.

*** letter_case                                                   :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Determines the casing to use for identifiers.

*** type_override                                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Overrides to use for the relational type, for a given database system.

Note: we've set the binding point to "any" as a hack to allow for primitive support.
Should really be "property".

*** type_mapping                                                  :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Type maps to create for the relational type, possibly for a given database system.

Note: we've set the binding point to "any" as a hack to allow for primitive support.
Should really be "property".

*** odb_pragma                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Raw ODB pragmas that are applied as-is by the system.

Use these when you need some functionality which is not natively supported by
ORM in Dogen.

** decoration_modeline                                              :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: any
   :masd.variability.key_prefix: masd.decoration.modeline
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Modeline properties.

*** editor                                                        :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Editor to use in this modeline.

*** location                                                      :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Where to place the modeline.

*** technical_space                                               :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Technical space targeted by the modeline.

** variability_templates                                            :element:
   :PROPERTIES:
   :masd.variability.key_prefix: masd.variability
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the processing of variability for feature and profile templates.

*** binding_point                                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Where does this feature bind into.

*** stereotype                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Stereotype for this profile. Must be globally unique.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Value for a facet or profile template.

Value as meta-data should be used only for collections, for single values prefer
the default value field if available.

*** is_optional                                                   :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, the feature template provides an optional feature.

*** default_value_override                                        :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::key_value_pair
    :END:

Default values to override the "default" default value.

These match on keys ending with the specified string.

** mapping                                                          :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: any
   :masd.variability.key_prefix: masd.mapping
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Meta-data related to element mapping.

*** target                                                        :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Type that is the source of the mapping.

*** destination                                                   :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Type that is the destination of the mapping.

** variability_bundle                                               :element:
   :PROPERTIES:
   :masd.variability.key_prefix: masd.variability
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the processing of variability for feature bundles.

*** generate_registration                                         :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

If true, generates code to register the features.

@pre Features must not already exist.

*** generate_static_configuration                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

If true, generates a c++ class to contain the configuration at compile time.

*** default_binding_point                                         :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Where does this bundle bind to.

*** instantiation_domain_name                                     :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Template instantiation domain name to use when instantiating template.

*** key_prefix                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Prefix to apply to construct the qualified name, if any.

** variability_entry                                                :element:
   :PROPERTIES:
   :masd.variability.generate_registration: false
   :masd.variability.key_prefix: masd.variability
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the processing of variability for profiles and profile templates.

*** binding_point                                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Where does this profile or profile template bind to.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Value for a facet or profile template.

Value as meta-data should be used only for collections, for single values prefer
the default value field if available.

*** instantiation_domain_name                                     :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Template instantiation domain name to use when instantiating template.

** variability_profile                                              :element:
   :PROPERTIES:
   :masd.variability.generate_registration: false
   :masd.variability.key_prefix: masd.variability
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the processing of variability for profile entries.

*** stereotype                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Stereotype for this profile. Must be globally unique.

*** key_prefix                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Prefix to apply to construct the qualified name, if any.

*** binding_point                                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Where does this profile or profile template bind to.

** physical                                                         :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: element
   :masd.variability.key_prefix: masd.physical
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features required for physical elements.

*** backend_name                                                  :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Simple name of the backend.

FIXME: temporary until we rename the namespaces.

*** part_id                                                       :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Fully qualified physical name of the part this artefact belongs to.

FIXME: optional for now.

*** logical_meta_element_id                                       :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Fully qualified name of the logical model element.

FIXME: optional for now.

*** major_technical_space                                         :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Major technical space to which this element belongs to.

*** technical_space                                               :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Technical space to which this element belongs to.

*** wale_template_reference                                       :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the wale template that the archetype uses.

*** directory_name                                                :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the directory to use for this physical element.

*** postfix                                                       :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Postfix to use for this physical element.

** wale                                                             :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: any
   :masd.variability.key_prefix: masd.wale
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Wale related features.

*** text_template                                                 :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the wale text template to instantiate, if any.

*** kvp                                                           :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::key_value_pair
    :END:

Array of wale KVPs to use in template instantiation.

** decoration                                                       :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: any
   :masd.variability.key_prefix: masd.decoration
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:
*** enabled                                                       :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::boolean
    :END:

If true, decorations are enabled on this modeling element.

*** copyright_notice                                              :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Copyright notices for this modeling element.

*** licence_name                                                  :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the licence to use for this modeling element.

*** modeline_group_name                                           :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the modeline group for this modeling element.

*** marker_name                                                   :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the decoration marker to use for this modeling element.

** labelling                                                        :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to labels.

*** masd.label                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::key_value_pair
    :END:

Labels to attach to modeling elements. Key must be unique.

** physical_relations                                               :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: any
   :masd.variability.key_prefix: masd.physical
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to relations at the physical level.

*** relation_status                                               :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Relation status for the archetype.

*** variable_relation                                             :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::comma_separated_collection
    :END:

Define a variable relation between the current archetype and another archetype.

*** constant_relation                                             :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::comma_separated_collection
    :END:

Define a fixed relation between the current archetype and another archetype.

** streaming                                                        :element:
   :PROPERTIES:
   :masd.variability.key_prefix: masd.cpp.streaming
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:
*** string_conversion_method                                      :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::text
    :masd.codec.value: ""
    :END:

Which conversion method to use to convert strings.

*** requires_quoting                                              :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, streaming this type must be preceeded by quoting.

*** remove_unprintable_characters                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, streaming this type requires removing unprintable characters.

** technical_space_version                                          :element:
   :PROPERTIES:
   :masd.variability.key_prefix: masd.cpp
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:
*** standard                                                      :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.codec.type: masd::variability::text
    :masd.codec.value: "c++-14"
    :END:

Which version of C++ to use.

** technical_space_properties                                       :element:
   :PROPERTIES:
   :masd.variability.key_prefix: masd
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:
*** cpp.aspect.requires_manual_default_constructor                :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, the modeling element requires a manual defaul constructor.

*** cpp.aspect.requires_manual_move_constructor                   :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, the modeling element requires a manual move constructor.

*** cpp.aspect.requires_stream_manipulators                       :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, the modeling element requires stream manipulators.

** helpers                                                          :element:
   :PROPERTIES:
   :masd.variability.key_prefix: masd
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:
*** helper.family                                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::text
    :masd.codec.value: "Default"
    :END:

Which family of helpers to use for this modeling element.

** physical_helpers                                                 :element:
   :PROPERTIES:
   :masd.variability.default_binding_point: element
   :masd.variability.key_prefix: masd.physical.helpers
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the helpers in physical domain.



*** family                                                        :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:
*** owning_formatters                                             :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:
*** owning_facets                                                 :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:
*** wale_template_reference                                       :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:
** aspect                                                           :element:
   :PROPERTIES:
   :masd.variability.key_prefix: masd.csharp.aspect
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:
*** requires_static_reference_equals                              :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:
** assistant                                                        :element:
   :PROPERTIES:
   :masd.variability.key_prefix: masd.csharp.assistant
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:
*** requires_assistance                                           :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:
*** method_postfix                                                :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::text
    :END:
* registrar                                                         :element:
  :PROPERTIES:
  :masd.codec.stereotypes: masd::serialization::type_registrar
  :END:
* main                                                              :element:
  :PROPERTIES:
  :masd.codec.stereotypes: masd::entry_point, dogen::untypable
  :END:
* CMakeLists                                                        :element:
  :PROPERTIES:
  :masd.codec.stereotypes: masd::build::cmakelists, dogen::handcrafted::cmake
  :END:
* formatters                                                         :module:
  :PROPERTIES:
  :masd.codec.dia.comment: true
  :END:

Contains formatting classes for the logical model.

** decoration_formatter                                             :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** generation_marker_formatter                                      :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** modeline_formatter                                               :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
** formatting_error                                                 :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::exception
   :END:

An error has occurred while formatting.

