#+title: dogen.dia
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil
#+tags: { element(e) attribute(a) module(m) }
:PROPERTIES:
:masd.codec.dia.comment: true
:masd.codec.model_modules: dogen.dia
:masd.codec.input_technical_space: cpp
:masd.codec.reference: cpp.builtins
:masd.codec.reference: cpp.std
:masd.codec.reference: cpp.boost
:masd.codec.reference: masd
:masd.codec.reference: masd.variability
:masd.codec.reference: dogen.profiles
:masd.codec.reference: dogen.tracing
:masd.variability.profile: dogen.profiles.base.default_profile
:END:

Represents the domain of the Dia diagram editor.

* main                                                              :element:
  :PROPERTIES:
  :masd.codec.stereotypes: masd::entry_point, dogen::untypable
  :END:
* CMakeLists                                                        :element:
  :PROPERTIES:
  :masd.codec.stereotypes: masd::build::cmakelists, dogen::handcrafted::cmake
  :END:
* entities                                                           :module:
  :PROPERTIES:
  :masd.codec.dia.comment: true
  :END:

Contains all the entities required by Dogen from the
domain of the Dia diagram editor.

** diagram                                                          :element:

Represents a diagram in Dia.

*** diagram_data                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: diagram_data
    :END:

Basic diagram definitions.

*** layers                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::vector<layer>
    :END:

Visual layers on the diagram.

** layer                                                            :element:

Represents a layer in a Dia diagram.

*** name                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Name of the layer.

*** visible                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

Whether the layer is visible on screen or not.

*** active                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

Whether the layer is active or not.

*** objects                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::vector<object>
    :END:

Dia objects contained in layer.

** object                                                           :element:

Represents a Dia object.

*** id                                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Unique identifier for the object in this diagram.

*** type                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Type of the object.

*** version                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: int
    :END:

Version of the object.

*** connections                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: std::vector<connection>
    :END:

Connection details for this object.

*** child_node                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<child_node>
    :END:
*** attributes                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::vector<attribute>
    :END:

All attributes associated with the object.

** connection                                                       :element:

Connection between entities in a Dia diagram.

*** handle                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Internal handle for the connection.

*** to                                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Object we're connected to.

*** connection_slot                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Number of the connection slot we're connected to.

This is known in Dia as a connection but to avoid confusion between the class and the slot concepts,
we renamed it.

** diagram_data                                                     :element:

Represents a all the data associated with a diagram.

*** attributes                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::vector<attribute>
    :END:

All attributes associated with the diagram data.

** child_node                                                       :element:

Represents a child_node in a diagram.

Child nodes are used in Dia to represent the relationship between a package and the entities it contains.
For example, if class O1 is inside package O0 then class O1 will have a child node element with a parent
pointing to O0.

*** parent                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Parent for this object.

** attribute                                                        :element:

Attribute in a Dia diagram.

*** name                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Name of the attribute.

*** values                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::vector<boost::variant<color,real,integer,font,boolean,point,string,enumeration,rectangle,composite>>
    :END:

Values for the attribute.

** font                                                             :element:

Represents a font in a diagram.

*** family                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:
*** style                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:
*** name                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:
** composite                                                        :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::untestable
   :END:

Attribute value which is made up of other attributes.

*** type                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Type of the composite node

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::vector<boost::shared_ptr<attribute>>
    :END:

Underlying Dia attributes.

*** inner_composite                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<composite>
    :END:

Some composites contain an inner composite field.

** color                                                            :element:

Represents a color in a diagram.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Text representation of an RGB value in hex.

** real                                                             :element:

Represents a real value.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Text representation of a real value.

** integer                                                          :element:

Represents an integer value.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Text representation of an integer value.

** boolean                                                          :element:

Represents a boolean value.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Text representation of a boolean value.

** point                                                            :element:

Represents a point in a diagram.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Text representation of a point with X/Y coordinates.

** enumeration                                                      :element:

Represents a enumeration in a diagram.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Text representation of a enumeration.

** string                                                           :element:

Represents a string value.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Represents a string value.

** rectangle                                                        :element:

Represents a rectangle in a diagram.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Text representation of a rectangle with a pair of X/Y coordinates.

* transforms                                                         :module:
** transformation_error                                             :element:
   :PROPERTIES:
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred whilst applying a transformation.

** string_to_diagram_transform                                      :element:
   :PROPERTIES:
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:
