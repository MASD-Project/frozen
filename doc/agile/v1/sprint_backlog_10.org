#+title: Sprint Backlog 10
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) }

* Mission Statement

- Finish addressing build issues; key thing is to get the tests
  working again across the board.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2018-10-27 Sat 19:48]
| <75>                                                                        |         |       |       |       |
| Headline                                                                    | Time    |       |       |     % |
|-----------------------------------------------------------------------------+---------+-------+-------+-------|
| *Total time*                                                                | *98:22* |       |       |   0.0 |
|-----------------------------------------------------------------------------+---------+-------+-------+-------|
| Stories                                                                     | 98:22   |       |       |   0.0 |
| Active                                                                      |         | 98:22 |       |   0.0 |
| Edit release notes for previous sprint                                      |         |       |  1:10 |   0.0 |
| Sprint and product backlog grooming                                         |         |       |  5:37 |   0.0 |
| Create a document with release steps                                        |         |       |  0:11 |   0.0 |
| Add support for kcov                                                        |         |       |  3:09 |   0.0 |
| Build on tags for Windows                                                   |         |       |  0:09 |   0.0 |
| Add vcpkg support to osx builds                                             |         |       |  5:17 |   0.0 |
| Remove all references to conan                                              |         |       |  0:13 |   0.0 |
| Travis badge is not red when build is failing                               |         |       |  0:14 |   0.0 |
| Ignore all failing tests                                                    |         |       |  1:11 |   0.0 |
| CTest warnings seem to be clipped                                           |         |       |  0:15 |   0.0 |
| AppVeyor is not building on GitHub commits                                  |         |       |  0:04 |   0.0 |
| OSX build is producing a large number of warnings                           |         |       |  0:37 |   0.0 |
| Upgrade to c++ 17                                                           |         |       |  0:25 |   0.0 |
| Check that C++ 17 is enabled on MSVC                                        |         |       |  0:22 |   0.0 |
| Windows MSI is very large                                                   |         |       |  0:26 |   0.0 |
| Update c++ reference implementation build                                   |         |       |  1:43 |   0.0 |
| Linking errors on windows for debug builds                                  |         |       |  0:17 |   0.0 |
| Create bitbbucket backups for reference implementation                      |         |       |  0:18 |   0.0 |
| Update vcpkg with boost.di and visibility settings                          |         |       |  1:26 |   0.0 |
| Fix warnings on OSX                                                         |         |       |  0:34 |   0.0 |
| Rename input models directory to just models                                |         |       |  0:16 |   0.0 |
| Get JSON models to generate again                                           |         |       |  0:57 |   0.0 |
| Update emacs programming setup                                              |         |       |  0:41 |   0.0 |
| Fix warnings on windows                                                     |         |       |  4:15 |   0.0 |
| Setup a secondary machine for development                                   |         |       |  1:04 |   0.0 |
| Remove facets that are not being used                                       |         |       |  8:31 |   0.0 |
| Design a top-level Dogen API                                                |         |       | 14:46 |   0.0 |
| Add support for nested namespaces                                           |         |       |  6:24 |   0.0 |
| Update dogen namespaces to match the new specification                      |         |       | 12:28 |   0.0 |
| Add support for LGTM                                                        |         |       |  0:18 |   0.0 |
| Use cmake version properly                                                  |         |       |  1:01 |   0.0 |
| Read up on framework and API design                                         |         |       |  6:10 |   0.0 |
| Create a single binary for all of dogen                                     |         |       |  5:59 |   0.0 |
| Implement the new dogen product API                                         |         |       |  3:05 |   0.0 |
| Update cmake files to reflect product/project naming                        |         |       |  2:57 |   0.0 |
| Clean up the mess of refactors in dogen core                                |         |       |  5:52 |   0.0 |
#+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
#+end:

*** COMPLETED Edit release notes for previous sprint                  :story:
    CLOSED: [2018-10-15 Mon 11:22]
    :LOGBOOK:
    CLOCK: [2018-10-16 Tue 10:26]--[2018-10-16 Tue 10:31] =>  0:05
    CLOCK: [2018-10-15 Mon 11:35]--[2018-10-15 Mon 11:54] =>  0:19
    CLOCK: [2018-10-15 Mon 10:36]--[2018-10-15 Mon 11:22] =>  0:46
    :END:

Add github release notes for previous sprint.

Title: Dogen v1.0.09, "Kubata"

#+begin_src markdown
![Kubata](http://www.africavernaculararchitecture.com/wp-content/uploads/2015/03/Angola-Flickr-Rob-and-Sophie55061521f2fff.jpg) _Traditional Angolan village house. [(C) Rob and Sophie](http://www.africavernaculararchitecture.com/angola/)_.

# Overview

As described on [the previous sprint](https://github.com/MASD-Project/dogen/releases/tag/v1.0.08), the key objective at present is to get all the infrastructure up-to-date after a hiatus of a year or so of development. This is a requirement so that we can move to C++ 17 and start to make use of all the nice new libraries available. As such, this sprint was entirely taken with infrastructure clean up. Whilst these changes are not user visible, they still provide important benefits to project development so we'll briefly summarise them here.

## MASD Project Transition

We have started to sync up the work on the PhD with the work on Dogen. This sprint, the main focus was on creating an organisation solely for _Model Assisted Software Development_ (more details on that in the future), and moving all of the infrastructure to match - [Bintray](https://bintray.com/masd-project/main/dogen), [Travis](https://travis-ci.org/MASD-Project/dogen/builds), [Gitter](https://gitter.im/MASD-Project/Lobby) and the like.

## Move to vcpkg

Historically, we've always had a problem in keeping dogen's dependencies up-to-date across the three supported platforms. The problem stems from a lack of a cross-platform package manager in C++. Whilst we tried [Conan](https://conan.io/) in the past, we never managed to get it working properly for our setup. With this sprint we started the move towards using [vcpkg](https://vcpkg.readthedocs.io/en/latest/).

Whilst it still has some deficiencies, it addresses our use case particularly well and will allow us to pick up new dependencies fairly easily going forward. This is crucial as we expand the number of facets available, which hopefully will happen over the next couple of months. In this sprint we have completed the transition to vcpkg for Linux and Windows; the next sprint will be OSX's turn. With the introduction of vcpkg we took the opportunity to upgrade to [boost 1.68](https://www.boost.org/users/history/version_1_68_0.html) on Linux and Windows.

## Add CDash support

Since we moved away from our own infrastructure we lost the ability to know which tests are passing and how long test execution is taking. With this sprint we resurrected CDash/CTest support, with a new dashboard, available [here](https://my.cdash.org/index.php?project=MASD+Project+-+Dogen). There are still a few tweaks required - a lot of tests are still failing due to setup issues - but its clearly a win as we can now see a clearer picture across the testing landscape.

## Move reference models out of Dogen's repository

For a long time we've been struggling to build Dogen within the hour given to us by Travis. An easy win was to move the reference models ([C++](https://github.com/MASD-Project/cpp_ref_impl) and [C#](https://github.com/MASD-Project/csharp_ref_impl)) away from the main repository. This is also a very logical thing to do as we want these to be examples of stand-alone Dogen products, so that we can point them out to users as an example of how to use the product. Work still remains to be done on the reference implementations (CTest/CDash integration, clean up tests) but the bulk has been done this sprint.

For more details of the work carried out this sprint, see [the sprint log](https://github.com/MASD-Project/dogen/blob/master/doc/agile/v1/sprint_backlog_09.org).

# User visible changes

Two tiny featurelets were added this sprint:

- **Development Binaries**: We now generate binaries for development releases. These are overwritten with every commit on BinTray.
- **Improvements on ```--version```**: The command now outputs build information to link it back to the build agent and build number. Note that these details are used only for information purposes. We will add GPG signatures in the future to validate the binaries.

```
$ dogen.knitter  --version
Dogen Knitter v1.0.09
Copyright (C) 2015-2017 Domain Driven Consulting Plc.
Copyright (C) 2012-2015 Marco Craveiro.
License: GPLv3 - GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
Build: Provider = 'travis' Number = '2082' Commit = '53a1a169bd6f15c4388add9da933be2a353c4cbf' Timestamp = '2018/10/14 21:54:46'
IMPORTANT: build details are NOT for security purposes.
```

# Next Sprint

Infrastructural work will hopefully conclude on the next sprint, but the next big task is getting all the tests to run and pass.

# Binaries

You can download binaries from [Bintray](https://bintray.com/masd-project/main/dogen) for OSX, Linux and Windows (all 64-bit):

- [dogen_1.0.09_amd64-applications.deb](https://dl.bintray.com/masd-project/main/1.0.09/dogen_1.0.09_amd64-applications.deb)
- [dogen-1.0.09-Darwin-x86_64.dmg](https://dl.bintray.com/masd-project/main/1.0.09/dogen-1.0.09-Darwin-x86_64.dmg)
- [dogen-1.0.09-Windows-AMD64.msi](https://dl.bintray.com/masd-project/main/dogen-1.0.09-Windows-AMD64.msi)

For all other architectures and/or operative systems, you will need to build Dogen from source. Source downloads are available below.
#+end_src

- [[https://twitter.com/MarcoCraveiro/status/1051785972206247936][Tweet]]
- [[https://www.linkedin.com/feed/update/urn:li:activity:6457553749215899648/][LinkedIn]]
- [[https://gitter.im/MASD-Project/Lobby][Gitter]]

*** COMPLETED Sprint and product backlog grooming                     :story:
    CLOSED: [2018-10-29 Mon 08:53]
    :LOGBOOK:
    CLOCK: [2018-10-27 Sat 10:30]--[2018-10-27 Sat 11:22] =>  0:52
    CLOCK: [2018-10-26 Fri 15:55]--[2018-10-26 Fri 16:19] =>  0:24
    CLOCK: [2018-10-26 Fri 10:17]--[2018-10-26 Fri 11:46] =>  1:29
    CLOCK: [2018-10-25 Thu 15:15]--[2018-10-25 Thu 15:54] =>  0:39
    CLOCK: [2018-10-25 Thu 12:50]--[2018-10-25 Thu 13:25] =>  0:35
    CLOCK: [2018-10-25 Thu 11:48]--[2018-10-25 Thu 12:03] =>  0:15
    CLOCK: [2018-10-24 Wed 08:03]--[2018-10-24 Wed 08:24] =>  0:21
    CLOCK: [2018-10-19 Fri 11:46]--[2018-10-19 Fri 11:49] =>  0:03
    CLOCK: [2018-10-18 Thu 20:23]--[2018-10-18 Thu 20:36] =>  0:13
    CLOCK: [2018-10-17 Wed 09:31]--[2018-10-17 Wed 09:44] =>  0:13
    CLOCK: [2018-10-17 Wed 06:47]--[2018-10-17 Wed 06:54] =>  0:07
    CLOCK: [2018-10-16 Tue 19:50]--[2018-10-16 Tue 20:06] =>  0:16
    CLOCK: [2018-10-15 Mon 10:25]--[2018-10-15 Mon 10:35] =>  0:10
    :END:

Updates to sprint and product backlog.

*** COMPLETED Create a document with release steps                    :story:
    CLOSED: [2018-10-15 Mon 11:34]
    :LOGBOOK:
    CLOCK: [2018-10-15 Mon 11:23]--[2018-10-15 Mon 11:34] =>  0:11
    :END:

We seem to now have a number of steps when releasing. Create a project
document for this.

*** COMPLETED Add support for kcov                                    :story:
    CLOSED: [2018-10-16 Tue 09:58]
    :LOGBOOK:
    CLOCK: [2018-10-16 Tue 09:39]--[2018-10-16 Tue 09:41] =>  0:02
    CLOCK: [2018-10-15 Mon 22:50]--[2018-10-15 Mon 23:20] =>  0:30
    CLOCK: [2018-10-15 Mon 19:01]--[2018-10-15 Mon 19:39] =>  0:38
    CLOCK: [2018-10-15 Mon 17:58]--[2018-10-15 Mon 18:34] =>  0:36
    CLOCK: [2018-10-15 Mon 17:51]--[2018-10-15 Mon 17:57] =>  0:06
    CLOCK: [2018-10-15 Mon 17:30]--[2018-10-15 Mon 17:50] =>  0:20
    CLOCK: [2018-10-15 Mon 16:05]--[2018-10-15 Mon 16:29] =>  0:24
    CLOCK: [2018-10-15 Mon 15:31]--[2018-10-15 Mon 16:04] =>  0:33
    :END:

Try to see how hard it is to integrate kcov with the current build.

Notes:

- annoyingly, kcov has some binary dependencies rather than being a
  stand alone binary:

: apt-get install libcurl4-openssl-dev zlib1g-dev libdw-dev libiberty-dev

  as we could not figure out how to install just the SO's in travis,
  we ended up installing the dev packages. These are a lot more than
  what is actually required, but it'll do for now.
- we seem to upload to coveralls, but nothing shows up on the
  site. Try to manually generate coverage first.

Links:

- https://github.com/SimonKagstrom/kcov/blob/master/doc/codecov.md

*** COMPLETED Add support for code coverage                           :story:
    CLOSED: [2018-10-17 Wed 09:43]

*Rationale*: implemented using kcov.

We started the work on code coverage but never finished it. At present
it seems we don't even have a story detailing the current state of
coverage in the backlog. From memory the problem was that the upload
was too large and the coverage was including lots of files that should
be ignored. We never got the upload to work. In the mean time, it
seems that kcov is a better approach instead of using lcov, gcov, etc.

Links:

- https://github.com/SimonKagstrom/kcov

*Previous understanding*

Finish setting up coveralls

Remaining issues:

- we are generating far too much output. We need to keep it quieter or
  we will break travis.
- we are not filtering out non-project files from initial
  processing. There must be a gcov option to ignore files.

: Process: /home/marco/Development/DomainDrivenConsulting/dogen/build/output/gcc-5/Debug/projects/quilt/spec/CMakeFiles/quilt.spec.dir/main.cpp.gcda
: ------------------------------------------------------------------------------
: File '../../../../projects/quilt/spec/main.cpp'
: Lines executed:62.50% of 8
: Creating '^#^#^#^#projects#quilt#spec#main.cpp.gcov'
:
: File '/usr/local/personal/include/boost/smart_ptr/detail/sp_counted_impl.hpp'
: Lines executed:60.00% of 20
: Creating '#usr#local#personal#include#boost#smart_ptr#detail#sp_counted_impl.hpp.gcov'

See also:

- [[https://github.com/JoakimSoderberg/coveralls-cmake-example/blob/master/CMakeLists.txt][example use of coveralls-cmake]]
- [[https://github.com/SpinWaveGenie/SpinWaveGenie/blob/master/libSpinWaveGenie/CMakeLists.txt][SpinWaveGenie's support for Coveralls]]
- maybe we should just use a different coverage provider. [[https://codecov.io/gh/DomainDrivenConsulting/dogen][CodeCov]]
  seems to be used by the kool kids. Example: [[https://github.com/ChaiScript/ChaiScript/blob/develop/CMakeLists.txt][ChaiScript]]. Example repo
  [[https://github.com/codecov/example-cpp11][here]] and for CMake specifically, [[https://github.com/codecov/example-cpp11-cmake][here]].
- we should generate coverage from the clang debug build only since
  that is the fastest build we have. We should use the clang coverage
  tool. See [[https://clang.llvm.org/docs/SourceBasedCodeCoverage.html][this document]].

Previous story [[https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/agile/sprint_backlog_84.org#add-initial-support-for-coveralls][here]].

Notes:
- problems with python dependencies: [[https://github.com/micropython/micropython/issues/3246][cpp-coveralls 0.4.0 came and
  broke Travis build]]

*** COMPLETED Build on tags for Windows                               :story:
    CLOSED: [2018-10-16 Tue 10:30]
    :LOGBOOK:
    CLOCK: [2018-10-16 Tue 11:01]--[2018-10-16 Tue 11:10] =>  0:09
    :END:

At present we are not building and deploying for tags on Windows. This
is a major pain because it means we must remember to always push the
tag separately. We need to setup appveyor correctly.

It appears filtering on branches (master only) disables building on
tags. We've now removed this.

Links:

- [[http://help.appveyor.com/discussions/problems/6209-build-is-not-triggered-for-tag][Build is not triggered for tag]]
- [[https://help.appveyor.com/discussions/questions/2626-pushing-tag-does-not-trigger-build][Pushing tag does not trigger build]]

*** COMPLETED Add vcpkg support to osx builds                         :story:
    CLOSED: [2018-10-16 Tue 11:00]
    :LOGBOOK:
    CLOCK: [2018-10-16 Tue 11:31]--[2018-10-16 Tue 11:41] =>  0:10
    CLOCK: [2018-10-16 Tue 10:55]--[2018-10-16 Tue 11:00] =>  0:05
    CLOCK: [2018-10-16 Tue 09:42]--[2018-10-16 Tue 09:58] =>  0:16
    CLOCK: [2018-10-16 Tue 09:28]--[2018-10-16 Tue 09:38] =>  0:10
    CLOCK: [2018-10-15 Mon 22:50]--[2018-10-15 Mon 23:20] =>  0:30
    CLOCK: [2018-10-15 Mon 17:58]--[2018-10-15 Mon 18:05] =>  0:07
    CLOCK: [2018-10-15 Mon 16:30]--[2018-10-15 Mon 17:29] =>  0:59
    CLOCK: [2018-10-15 Mon 12:47]--[2018-10-15 Mon 15:31] =>  2:44
    CLOCK: [2018-10-15 Mon 11:54]--[2018-10-15 Mon 12:10] =>  0:16
    :END:

Following on from our investigation, we need to add vcpkg to the
travis osx builds (clang). While we're there, update all the tools to
latest in preparation to switching to C++ 17.

Notes:

- it seems its not possible to move to XCode 10 without upgrading the
  OS. This includes the Command Line tools only package as well.
- an alternative is to install the LLVM + clang package supplied by
  the LLVM project. The disadvantage is that we probably also need to
  use this in travis because using two different versions of clang is
  probably not the best idea. We could try and see what happens first,
  but ultimately we'll end up having to install it on travis. The
  binary is 300 MB, which is not ideal but should be ok.
- vcpkg misbehaves a bit when used from clang7. [[https://github.com/Microsoft/vcpkg/issues/4476][Reported]] to
  mothership.

Links:

- [[https://github.com/Microsoft/vcpkg/issues/4437][Error linking Boost on x86-osx]]
- [[https://github.com/Microsoft/vcpkg/issues/4476][Building vcpkg on OSX using LLVM's clang]]

*** COMPLETED Remove all references to conan                          :story:
    CLOSED: [2018-10-16 Tue 11:54]
    :LOGBOOK:
    CLOCK: [2018-10-16 Tue 11:42]--[2018-10-16 Tue 11:55] =>  0:13
    :END:

We still have a number of places where we are doing things for conan
(checking for its presence in CMake, stories etc). Delete all of
those.

*** COMPLETED Travis badge is not red when build is failing           :story:
    CLOSED: [2018-10-16 Tue 12:08]
    :LOGBOOK:
    CLOCK: [2018-10-16 Tue 11:56]--[2018-10-16 Tue 12:10] =>  0:14
    :END:

For some reason the badge is gray with the words error. This makes it
less obvious that the build is borked. Fix it so its red.

Seems this is because we are using shields.io rather than the travis
badge.

Actually maybe this is due to the fact that there is currently an
ongoing build. Lets ignore it for now.

*** COMPLETED Ignore all failing tests                                :story:
    CLOSED: [2018-10-16 Tue 12:29]
    :LOGBOOK:
    CLOCK: [2018-10-17 Wed 06:15]--[2018-10-17 Wed 06:36] =>  0:21
    CLOCK: [2018-10-16 Tue 12:11]--[2018-10-16 Tue 12:28] =>  0:17
    CLOCK: [2018-10-16 Tue 11:16]--[2018-10-16 Tue 11:30] =>  0:24
    CLOCK: [2018-10-16 Tue 10:36]--[2018-10-16 Tue 10:55] =>  0:19
    :END:

At present we have a number of tests that are commented out but appear
as failing under cdash. This is very confusing. We need to mark them
with the ignore macro. We should not waste time fixing the tests as
they need to be re-written using the diff framework.

*** COMPLETED CTest warnings seem to be clipped                       :story:
    CLOSED: [2018-10-16 Tue 14:23]
    :LOGBOOK:
    CLOCK: [2018-10-16 Tue 13:26]--[2018-10-16 Tue 13:41] =>  0:15
    :END:

We seem to have 50 warnings on both OSX and linux builds, which is a
bit of a coincidence. CTest is probably clipping the warnings.

It is the default. Configured by
=CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS=.

Zero is not a good number - it removed all the warnings. Set it to a
large but yet sensible number.

Links:

- [[https://cmake.org/cmake/help/v3.4/variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS.html][CTest variable CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS]]
- [[https://blog.kitware.com/ctest-performance-tip-use-ctestcustom-cmake-not-ctest/][CTest performance tip: Use CTestCustom.cmake, not .ctest]]

*** COMPLETED AppVeyor is not building on GitHub commits              :story:
    CLOSED: [2018-10-16 Tue 17:34]
    :LOGBOOK:
    CLOCK: [2018-10-16 Tue 11:11]--[2018-10-16 Tue 11:15] =>  0:04
    :END:

It seems we've lost windows builds some how. GitHub is sending the
notification but AppVeyor is refusing to build.

Links:

- [[https://help.appveyor.com/discussions/problems/17480-builds-not-triggering-from-github-commit][Builds not triggering from GitHub commit]]
*** COMPLETED OSX build is producing a large number of warnings       :story:
    CLOSED: [2018-10-22 Mon 16:34]
    :LOGBOOK:
    CLOCK: [2018-10-16 Tue 14:56]--[2018-10-16 Tue 15:33] =>  0:37
    :END:

More on debug than release. Some of the warnings are related to
visibility.

Notes:

- setting visibility to hidden does not seem to make any difference.
- we don't seem to have any good answers for this, so we'll leave it
  as is for now.
- this was finally resolved by rebuilding boost with the same
  visibility settings.

Links:

- [[https://stackoverflow.com/questions/8685045/xcode-with-boost-linkerid-warning-about-visibility-settings][xcode with boost : linker(Id) Warning about visibility settings]]
- [[https://stackoverflow.com/questions/3276474/symbol-hiding-in-static-libraries-built-with-xcode/18949281#18949281][Symbol hiding in static libraries built with Xcode]]
- [[https://stackoverflow.com/questions/36567072/why-do-i-get-ld-warning-direct-access-in-main-to-global-weak-symbol-in-this][Why do I get “ld: warning: direct access in _main to global weak
  symbol” in this simple code?]]
- [[https://gcc.gnu.org/wiki/Visibility][GCC Visibility]]
- [[https://github.com/Microsoft/vcpkg/issues/4497][Boost linker warnings on OSX]]

*** COMPLETED Upgrade to c++ 17                                       :story:
    CLOSED: [2018-10-16 Tue 20:06]
    :LOGBOOK:
    CLOCK: [2018-10-16 Tue 15:34]--[2018-10-16 Tue 15:48] =>  0:14
    CLOCK: [2018-10-16 Tue 13:44]--[2018-10-16 Tue 13:54] =>  0:10
    CLOCK: [2018-10-16 Tue 13:42]--[2018-10-16 Tue 13:43] =>  0:01
    :END:

There are quite a few dependencies for this to happen:

- on windows we need to somehow include =/std:c++latest=
- we need to move to latest boost as it seems Boost 1.62 breaks on
  c++-17. We should wait until Beast is included in Boost before we do
  this.
- we need to install latest CMake, which is not available on nuget; so
  we need to fetch the zip/msi from https://cmake.org/files/v3.10/ and
  unpack it. Only latest supports VS 2017. Then set the CMake
  generator:

:    $generator="Visual Studio 15 2017 Win64";

- set the appveyor image:

: image:
:  - Visual Studio 2017

- set the CMake version:

:     set(CMAKE_CXX_STANDARD 14)

We have now fulfilled all of these requirements, so try to move to
C++17.

*** COMPLETED Check that C++ 17 is enabled on MSVC                    :story:
    CLOSED: [2018-10-18 Thu 16:20]
    :LOGBOOK:
    CLOCK: [2018-10-18 Thu 16:21]--[2018-10-18 Thu 16:29] =>  0:08
    CLOCK: [2018-10-18 Thu 16:11]--[2018-10-18 Thu 16:20] =>  0:09
    CLOCK: [2018-10-18 Thu 14:46]--[2018-10-18 Thu 14:51] =>  0:05
    :END:

When looking at the log files, there are no mentions of C++ 17. Ensure
we are setting this for MSVC.

We are now compiling with C++ 17, but builds are now longer than 1h
and so are getting killed. We will leave it like that and hopefully
find ways of reducing the build time - we are also close to the limit
on Linux as well.

*** COMPLETED Windows MSI is very large                               :story:
    CLOSED: [2018-10-16 Tue 20:06]
    :LOGBOOK:
    CLOCK: [2018-10-16 Tue 09:59]--[2018-10-16 Tue 10:25] =>  0:26
    :END:

Package went from 5 MB to 80 MB over the last 3 days. The cause for
this appears to be that we started including tests on the standard
package.

It seems we can no longer build off of a github commit on
appveyor. [[https://help.appveyor.com/discussions/problems/17480-builds-not-triggering-from-github-commit][Ticket raised]] with support.

The problem is we removed =WITH_MINIMAL_PACKAGING= with the move to
use CTest. We need to add it to the CTest script.

When AppVeyor is back up, check to make sure the packages have
returned to normal size.

*** COMPLETED Update c++ reference implementation build               :story:
    CLOSED: [2018-10-16 Tue 22:14]
    :LOGBOOK:
    CLOCK: [2018-10-16 Tue 20:07]--[2018-10-16 Tue 21:50] =>  1:43
    :END:

Once we got the dogen build to work, we need to update the reference
model to match it:

- C++ 17
- kcov code coverage
- CDash project and uploads
- Latest vcpkg packages
- README emblems, comments on vcpkg
- removal of ctest update
- removal of conan references if any
- removal of third party

*** COMPLETED Linking errors on windows for debug builds              :story:
    CLOSED: [2018-10-17 Wed 06:40]
    :LOGBOOK:
    CLOCK: [2018-10-17 Wed 06:37]--[2018-10-17 Wed 06:46] =>  0:09
    CLOCK: [2018-10-16 Tue 22:18]--[2018-10-16 Tue 22:26] =>  0:08
    :END:

It seems we are consistently having problems linking the debug builds
on windows:

: [00:43:42]   LINK : the 32-bit linker (C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.15.26726\bin\HostX86\x64\link.exe) failed to do memory mapped file I/O on `..\..\..\stage\bin\dogen.modeling.lib' and is going to restart linking with a 64-bit linker for better throughput

It seems the error is with 32-bit linker.

Links:

- [[https://developercommunity.visualstudio.com/content/problem/160714/memory-error-for-linker-in-vs-155-x64.html][Memory error for linker in VS 15.5 x64]]

*** COMPLETED Create bitbbucket backups for reference implementation  :story:
    CLOSED: [2018-10-17 Wed 10:03]
    :LOGBOOK:
    CLOCK: [2018-10-17 Wed 09:45]--[2018-10-17 Wed 10:03] =>  0:18
    :END:

We should have all repos backed up.

Created a mirror for all projects: https://bitbucket.org/MASD-Project.

*** COMPLETED Update vcpkg with boost.di and visibility settings      :story:
    CLOSED: [2018-10-18 Thu 16:10]
    :LOGBOOK:
    CLOCK: [2018-10-18 Thu 14:46]--[2018-10-18 Thu 16:10] =>  1:24
    CLOCK: [2018-10-18 Thu 14:43]--[2018-10-18 Thu 14:45] =>  0:02
    :END:

Work for the next vcpkg update:

- pull in [[https://github.com/boost-experimental/di][boost.di]].
- add flags as per visibility warnings story.
- update docs with all the workarounds.

*** COMPLETED Fix warnings on OSX                                     :story:
    CLOSED: [2018-10-18 Thu 17:06]
    :LOGBOOK:
    CLOCK: [2018-10-18 Thu 16:51]--[2018-10-18 Thu 17:06] =>  0:15
    CLOCK: [2018-10-18 Thu 09:16]--[2018-10-18 Thu 09:35] =>  0:19
    :END:

We are seeing a lot of warnings on OSX which makes it difficult to
spot real problems. We need to get rid of the spurious ones.

Notes:

[[https://github.com/Microsoft/vcpkg/issues/4497][- Ticket raised]] with vcpkg.
- updated vcpkg's boost with visibility hidden.

*** COMPLETED Rename input models directory to just models            :story:
    CLOSED: [2018-10-18 Thu 17:17]
    :LOGBOOK:
    CLOCK: [2018-10-18 Thu 17:18]--[2018-10-18 Thu 17:28] =>  0:10
    CLOCK: [2018-10-18 Thu 17:11]--[2018-10-18 Thu 17:17] =>  0:06
    :END:

Now we no longer have test models we can follow standard dogen
conventions.

*** COMPLETED Get JSON models to generate again                       :story:
    CLOSED: [2018-10-18 Thu 20:22]
    :LOGBOOK:
    CLOCK: [2018-10-18 Thu 20:10]--[2018-10-18 Thu 20:20] =>  0:10
    CLOCK: [2018-10-18 Thu 18:35]--[2018-10-18 Thu 19:22] =>  0:47
    :END:

Problems:

- we are adding the extension to the dia filename because of how CMake
  works. We should probably remove the output parameter or at least
  allow defaulting it to a replacement of the extension.
- we are removing the dependencies due to duplicates in JSON keys.
- we are looking for .dia diagrams instead of .json for references.

*** COMPLETED Update emacs programming setup                          :story:
    CLOSED: [2018-10-19 Fri 14:12]
    :LOGBOOK:
    CLOCK: [2018-10-19 Fri 13:31]--[2018-10-19 Fri 14:12] =>  0:41
    :END:

- it seems all of the cool kids have moved from [[https://github.com/Andersbakken/rtags][rtags]] to [[https://github.com/cquery-project/cquery][cquery]] and
  LSP mode. Give it a go and see if it works better than rtags.
- it also seems logview is no longer working properly; logs do not get
  recognised properly.

*** COMPLETED Fix warnings on windows                                 :story:
    CLOSED: [2018-10-20 Sat 15:44]
    :LOGBOOK:
    CLOCK: [2018-10-20 Sat 14:01]--[2018-10-20 Sat 14:05] =>  0:04
    CLOCK: [2018-10-20 Sat 13:10]--[2018-10-20 Sat 13:28] =>  0:18
    CLOCK: [2018-10-20 Sat 07:35]--[2018-10-20 Sat 07:44] =>  0:09
    CLOCK: [2018-10-19 Fri 22:01]--[2018-10-19 Fri 22:05] =>  0:04
    CLOCK: [2018-10-19 Fri 20:19]--[2018-10-19 Fri 20:30] =>  0:11
    CLOCK: [2018-10-19 Fri 17:00]--[2018-10-19 Fri 17:04] =>  0:04
    CLOCK: [2018-10-19 Fri 14:13]--[2018-10-19 Fri 14:36] =>  0:23
    CLOCK: [2018-10-19 Fri 12:27]--[2018-10-19 Fri 12:50] =>  0:23
    CLOCK: [2018-10-19 Fri 12:19]--[2018-10-19 Fri 12:26] =>  0:07
    CLOCK: [2018-10-19 Fri 11:50]--[2018-10-19 Fri 12:18] =>  0:28
    CLOCK: [2018-10-19 Fri 11:29]--[2018-10-19 Fri 11:45] =>  0:16
    CLOCK: [2018-10-19 Fri 08:10]--[2018-10-19 Fri 09:27] =>  1:17
    CLOCK: [2018-10-18 Thu 18:12]--[2018-10-18 Thu 18:26] =>  0:14
    CLOCK: [2018-10-17 Wed 13:47]--[2018-10-17 Wed 14:04] =>  0:17
    :END:

We have a large number of warnings on windows, try to see if we can
fix them.

: dogen.formatting\types\indent_filter.hpp(164): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
: dogen.probing\src\types\metrics_builder.cpp(86): warning C4244: 'argument': conversion from '_Rep' to 'const unsigned long', possible loss of data
: dogen.generation.cpp\src\types\formatters\msbuild_targets_formatter.cpp(123): warning C4267: 'argument': conversion from 'size_t' to 'const unsigned int', possible loss of data
: dogen.generation.cpp\src\types\formatters\test_data\class_implementation_formatter.cpp(212): warning C4267: 'initializing': conversion from 'size_t' to 'unsigned int'
: dogen.generation.csharp\src\types\formatters\types\class_formatter.cpp(188): warning C4267: 'argument': conversion from 'size_t' to 'const unsigned int', possible loss of data

 warning LNK4098: defaultlib 'libcmtd.lib'

Notes:

- we need to add the same level of warnings on GCC so that we can see
  them locally without having to do a windows build, and so that we do
  not introduce regressions.
- it seems we now have the right incantation but the problem is we are
  not picking up the =CMAKE_BUILD_TYPE=. This works on all platforms
  but not on windows for some reason. CTest also thinks its a debug
  build, but its not clear CMake does.

Links:

- [[https://stackoverflow.com/questions/36834799/whats-the-best-strategy-to-get-rid-of-warning-c4267-possible-loss-of-data][What's the best strategy to get rid of “warning C4267 possible loss
  of data”?]]
- [[https://stackoverflow.com/questions/2771538/why-doesnt-gcc-produce-a-warning-when-assigning-a-signed-literal-to-an-unsigned][Why doesn't GCC produce a warning when assigning a signed literal to
  an unsigned type?]]
- [[https://cboard.cprogramming.com/cplusplus-programming/97754-warning-lnk4098-defaultlib-libcmtd-conflicts-use-other-libs.html][warning LNK4098: defaultlib "LIBCMTD" conflicts with use of other
  libs]]
- [[https://msdn.microsoft.com/en-gb/library/abx4dbyh.aspx][CRT Library Features]]
- [[https://cmake.org/pipermail/cmake/2009-October/032526.html][Problem ignoring libcmt.lib on Windows]]
- [[https://stackoverflow.com/questions/18786690/cmake-for-def-and-nodefaultlib][CMAKE for /DEF and /NODEFAULTLIB]]
- [[https://stackoverflow.com/questions/11512795/ignoring-unknown-option-nodefaultliblibcmtd][“Ignoring unknown option /NODEFAULTLIB:LIBCMTD”]]
- [[http://cmake.3232098.n2.nabble.com/CMAKE-EXE-LINKER-FLAGS-for-shared-libraries-td7087564.html][CMAKE_EXE_LINKER_FLAGS for shared libraries?]]
- [[https://cmake.org/pipermail/cmake/2012-March/049621.html][how to determine debug or release mode?]]
- [[https://stackoverflow.com/questions/24460486/cmake-build-type-not-being-used-in-cmakelists-txt][CMAKE_BUILD_TYPE not being used in CMakeLists.txt]]

*** COMPLETED Setup a secondary machine for development               :story:
    CLOSED: [2018-10-22 Mon 11:34]
    :LOGBOOK:
    CLOCK: [2018-10-22 Mon 10:01]--[2018-10-22 Mon 11:05] =>  1:04
    :END:

The main machine is no longer coping with the load of C++ development
plus cquery and google chrome. We need to setup a machine just to run
the desktop processes and another to run the development environment.

*** COMPLETED Remove facets that are not being used                   :story:
    CLOSED: [2018-10-22 Mon 16:04]
    :LOGBOOK:
    CLOCK: [2018-10-22 Mon 15:39]--[2018-10-22 Mon 16:04] =>  0:25
    CLOCK: [2018-10-22 Mon 15:04]--[2018-10-22 Mon 15:38] =>  0:34
    CLOCK: [2018-10-22 Mon 14:35]--[2018-10-22 Mon 15:03] =>  0:28
    CLOCK: [2018-10-22 Mon 12:44]--[2018-10-22 Mon 13:01] =>  0:17
    CLOCK: [2018-10-22 Mon 12:38]--[2018-10-22 Mon 12:43] =>  0:05
    CLOCK: [2018-10-22 Mon 12:23]--[2018-10-22 Mon 12:37] =>  0:14
    CLOCK: [2018-10-22 Mon 11:35]--[2018-10-22 Mon 11:56] =>  0:21
    CLOCK: [2018-10-22 Mon 11:03]--[2018-10-22 Mon 11:34] =>  0:31
    CLOCK: [2018-10-22 Mon 09:41]--[2018-10-22 Mon 10:01] =>  0:20
    CLOCK: [2018-10-22 Mon 09:21]--[2018-10-22 Mon 09:40] =>  0:19
    CLOCK: [2018-10-22 Mon 08:12]--[2018-10-22 Mon 08:31] =>  0:19
    CLOCK: [2018-10-21 Sun 12:39]--[2018-10-21 Sun 12:45] =>  0:06
    CLOCK: [2018-10-20 Sat 20:56]--[2018-10-20 Sat 21:10] =>  0:14
    CLOCK: [2018-10-19 Fri 22:23]--[2018-10-19 Fri 22:40] =>  0:17
    CLOCK: [2018-10-19 Fri 22:06]--[2018-10-19 Fri 22:22] =>  0:16
    CLOCK: [2018-10-19 Fri 20:31]--[2018-10-19 Fri 22:01] =>  1:30
    CLOCK: [2018-10-19 Fri 18:20]--[2018-10-19 Fri 18:46] =>  0:26
    CLOCK: [2018-10-19 Fri 17:05]--[2018-10-19 Fri 18:15] =>  1:10
    CLOCK: [2018-10-19 Fri 16:40]--[2018-10-19 Fri 16:59] =>  0:19
    CLOCK: [2018-10-18 Thu 16:30]--[2018-10-18 Thu 16:50] =>  0:36
    :END:

Even after offloading all of the test models, we are still breaching
Travis and AppVeyor limits. We need to figure out if we have any
unused types and remove them.

The quickest thing to do is to disable: test data and hashing for all
types in the main models except for =name=.

Since even after removing serialisation from the generation models
(cpp and csharp) we are still quite close to the edge, we need drastic
measures: we need to stop generating test data and serialisation for
all models. Test data was required for testing so we need to comment
out all tests of the generated code. Serialisation was also used for
some tests, though they have probably bit-rotted. We probably should
use serialisation only for round-trip tests and not as a way of
testing components as we did in the past. We should remove all tests
that rely on serialisation, even including dia - it should be replaced
by the XML tool anyway, so no point in paying the cost now. Or perhaps
we can leave dia for last and do all other models.

Problems:

- external.json:

: ../../../../projects/dogen.external.json/src/serialization/registrar_ser.cpp:29:10: fatal error: 'dogen.options/serialization/registrar_ser.hpp' file not found
: #include "dogen.options/serialization/registrar_ser.hpp"

Links:

- [[https://blog.dachary.org/2014/02/09/figuring-out-why-ccache-misses/][figuring out why ccache misses]]

*** COMPLETED Design a top-level Dogen API                            :story:
    CLOSED: [2018-10-22 Mon 17:12]
    :LOGBOOK:
    CLOCK: [2018-10-23 Tue 09:51]--[2018-10-23 Tue 10:44] =>  0:53
    CLOCK: [2018-10-22 Mon 16:05]--[2018-10-22 Mon 17:12] =>  1:07
    CLOCK: [2018-10-22 Mon 09:03]--[2018-10-22 Mon 09:21] =>  0:18
    CLOCK: [2018-10-20 Sat 07:48]--[2018-10-20 Sat 07:55] =>  0:07
    CLOCK: [2018-10-20 Sat 07:02]--[2018-10-20 Sat 07:43] =>  0:46
    CLOCK: [2018-10-19 Fri 10:12]--[2018-10-19 Fri 11:00] =>  0:48
    CLOCK: [2018-10-18 Thu 14:32]--[2018-10-18 Thu 14:42] =>  0:10
    CLOCK: [2018-10-18 Thu 09:57]--[2018-10-18 Thu 13:14] =>  3:17
    CLOCK: [2018-10-18 Thu 09:10]--[2018-10-18 Thu 09:15] =>  0:05
    CLOCK: [2018-10-17 Wed 16:26]--[2018-10-17 Wed 18:01] =>  1:35
    CLOCK: [2018-10-17 Wed 14:39]--[2018-10-17 Wed 15:10] =>  0:31
    CLOCK: [2018-10-16 Tue 15:49]--[2018-10-16 Tue 17:43] =>  1:54
    CLOCK: [2018-10-16 Tue 13:55]--[2018-10-16 Tue 14:55] =>  1:27
    CLOCK: [2018-10-11 Thu 16:06]--[2018-10-11 Thu 18:26] =>  2:20
    :END:

Jot down ideas on the separation between the API and the
implementation in dogen products.

Notes:

- we now have the notion of "distribution channels": UI/UX (wt, qt, gtk
  mobile, etc), DX (swagger, boost asio, library itself).
- the product API should not have any dependencies in terms of storage
  mechanisms; it should have some kind of "model source" interface
  that can then be implemented in terms of the filesystem, GH repo,
  postgres database etc.
- even though it does not make a lot of sense to have a model source
  as part of the remoting API, for consistency reasons we should still
  support it. That is, a code generation end point will merely call
  some internal functions to source the models rather than call
  another endpoint, and users probably don't really need something
  that just reads a model and returns the injector version.
- the distribution channels are a function of the product API.
- according to the [[https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/][Framework Design Guidelines]], we should design the
  API from scenarios. We should create a specification document that
  can be added to the manual for this.

Architecture vision:

- there are two distinct notions of "generation": 1) code generation as
  users understand it, that is product and component generation, end
  to end; and 2) generation as a part of the pipeline. Since most
  developers are familiar with "codegen", we can use that to signify
  the top-level generation. This means the API should use this term,
  and the high-level orchestrator should have the same name.
- the development model is used by three stages in the pipeline:
  expansion, reduction and generation. We should make the model stand
  alone, containing all of the core modeling elements, and any helpers
  that work only on those types. Then we create models for each
  element in the pipeline; each of these models has an entry point
  which is named after the model (perhaps =expander=, etc). These are
  interfaces by means of DI.
- however one slight snag with this approach is tha the model itself -
  e.g. =expansion::meta_model::model= - is needed as we move from one
  stage to the next; reduction needs to first convert the expansion
  model, generation needs to first convert the reduction model and so
  forth.
- for generation we can use the "template approach", whereby the
  generation element becomes a template.
- following on from FDG, we will from now on name all models:
  ORGANISATION.PRODUCT.COMPONENT, where ORGANISATION is the top-level
  umbrella organisation (e.g. MASD), PRODUCT is the individual product
  (e.g. dogen) and the component is the library or executable.

*** COMPLETED Add support for nested namespaces                       :story:
    CLOSED: [2018-10-24 Wed 09:13]
    :LOGBOOK:
    CLOCK: [2018-10-23 Tue 17:02]--[2018-10-23 Tue 17:38] =>  0:36
    CLOCK: [2018-10-23 Tue 16:53]--[2018-10-23 Tue 17:01] =>  0:08
    CLOCK: [2018-10-23 Tue 16:48]--[2018-10-23 Tue 16:52] =>  0:04
    CLOCK: [2018-10-23 Tue 16:43]--[2018-10-23 Tue 16:47] =>  0:04
    CLOCK: [2018-10-23 Tue 16:29]--[2018-10-23 Tue 16:42] =>  0:13
    CLOCK: [2018-10-23 Tue 15:50]--[2018-10-23 Tue 16:05] =>  0:15
    CLOCK: [2018-10-23 Tue 15:29]--[2018-10-23 Tue 15:49] =>  0:20
    CLOCK: [2018-10-23 Tue 14:50]--[2018-10-23 Tue 15:28] =>  0:38
    CLOCK: [2018-10-23 Tue 14:13]--[2018-10-23 Tue 14:49] =>  0:36
    CLOCK: [2018-10-23 Tue 14:01]--[2018-10-23 Tue 14:12] =>  0:11
    CLOCK: [2018-10-23 Tue 13:24]--[2018-10-23 Tue 13:31] =>  0:07
    CLOCK: [2018-10-23 Tue 13:01]--[2018-10-23 Tue 13:05] =>  0:04
    CLOCK: [2018-10-23 Tue 12:46]--[2018-10-23 Tue 13:00] =>  0:14
    CLOCK: [2018-10-23 Tue 11:45]--[2018-10-23 Tue 12:10] =>  0:25
    CLOCK: [2018-10-23 Tue 11:34]--[2018-10-23 Tue 11:44] =>  0:10
    CLOCK: [2018-10-23 Tue 10:45]--[2018-10-23 Tue 11:33] =>  0:48
    CLOCK: [2018-10-22 Mon 19:43]--[2018-10-22 Mon 19:57] =>  0:14
    CLOCK: [2018-10-22 Mon 19:39]--[2018-10-22 Mon 19:42] =>  0:03
    CLOCK: [2018-10-22 Mon 18:27]--[2018-10-22 Mon 18:45] =>  0:18
    CLOCK: [2018-10-22 Mon 18:23]--[2018-10-22 Mon 18:26] =>  0:03
    CLOCK: [2018-10-22 Mon 17:35]--[2018-10-22 Mon 18:22] =>  0:47
    CLOCK: [2018-10-22 Mon 17:28]--[2018-10-22 Mon 17:34] =>  0:06
    :END:

Enable c++17. - windows requires cpp latest. Then fix inner namespaces
(e.g. =a::b::c=).

We still need to support the old syntax for pre c++-17.

We need to add a new standard to =generator.cpp= and when its set to
c++-17 we should automatically use nested namespaces.

Problems:

- Need to fix boost serialisation:

: namespace boost {
: namespace serialization {

Links:

- [[https://stackoverflow.com/questions/11358425/is-there-a-better-way-to-express-nested-namespaces-in-c-within-the-header][Is there a better way to express nested namespaces in C++ within the header]]
- [[https://en.cppreference.com/w/cpp/language/namespace][C++ Namespaces]]
- [[http://www.nuonsoft.com/blog/2017/08/01/c17-nested-namespaces/][C++17: Nested Namespaces]]

*** COMPLETED Update dogen namespaces to match the new specification  :story:
    CLOSED: [2018-10-25 Thu 09:26]
    :LOGBOOK:
    CLOCK: [2018-10-25 Thu 11:35]--[2018-10-25 Thu 11:47] =>  0:12
    CLOCK: [2018-10-25 Thu 10:21]--[2018-10-25 Thu 11:34] =>  1:13
    CLOCK: [2018-10-25 Thu 08:19]--[2018-10-25 Thu 09:25] =>  1:06
    CLOCK: [2018-10-25 Thu 08:07]--[2018-10-25 Thu 08:18] =>  0:11
    CLOCK: [2018-10-24 Wed 19:12]--[2018-10-24 Wed 19:41] =>  0:29
    CLOCK: [2018-10-24 Wed 18:09]--[2018-10-24 Wed 18:58] =>  0:49
    CLOCK: [2018-10-24 Wed 17:11]--[2018-10-24 Wed 18:08] =>  0:57
    CLOCK: [2018-10-24 Wed 17:04]--[2018-10-24 Wed 17:10] =>  0:06
    CLOCK: [2018-10-24 Wed 15:42]--[2018-10-24 Wed 17:03] =>  1:21
    CLOCK: [2018-10-24 Wed 13:16]--[2018-10-24 Wed 15:41] =>  2:25
    CLOCK: [2018-10-24 Wed 12:48]--[2018-10-24 Wed 13:15] =>  0:27
    CLOCK: [2018-10-24 Wed 09:32]--[2018-10-24 Wed 12:02] =>  2:30
    CLOCK: [2018-10-24 Wed 09:04]--[2018-10-24 Wed 09:31] =>  0:27
    CLOCK: [2018-10-22 Mon 17:13]--[2018-10-22 Mon 17:28] =>  0:15
    :END:

Following on [[https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-namespaces][from FDG]], we will from now on name all models:

: ORGANISATION.PRODUCT.COMPONENT

Where ORGANISATION is the top-level umbrella organisation (e.g. MASD),
PRODUCT is the individual product (e.g. dogen) and the component is
the library or executable.

There have been many discussions on this topic, and there are many
pluses and minuses, but one important point is that we need a
consistent approach, and this is as supported by FDG.

We will update the model modules rather than external modules so that
the directory names follow the same naming convention.

We need to update one model at a time.

*** COMPLETED Add support for LGTM                                    :story:
    CLOSED: [2018-10-25 Thu 15:56]
    :LOGBOOK:
    CLOCK: [2018-10-25 Thu 15:54]--[2018-10-25 Thu 16:12] =>  0:18
    :END:

*Rationale*: seems like we had done it already.

As seen in project Heatherstone.

Links:

- https://github.com/utilForever/Hearthstonepp
- https://lgtm.com/
- https://lgtm.com/projects/g/utilForever/Hearthstonepp/alerts/?mode=list

*** COMPLETED Use cmake version properly                              :story:
    CLOSED: [2018-10-26 Fri 17:21]
    :LOGBOOK:
    CLOCK: [2018-10-26 Fri 16:20]--[2018-10-26 Fri 17:21] =>  1:01
    :END:

We seemed to have hacked the versioning system in CMake. Implement it
according to best practices.

*** COMPLETED Read up on framework and API design                     :story:
    CLOSED: [2018-10-29 Mon 08:51]
     :LOGBOOK:
     CLOCK: [2018-10-26 Fri 08:09]--[2018-10-26 Fri 08:49] =>  0:40
     CLOCK: [2018-10-25 Thu 09:25]--[2018-10-25 Thu 10:21] =>  0:56
     CLOCK: [2018-10-24 Wed 08:24]--[2018-10-24 Wed 09:03] =>  0:39
     CLOCK: [2018-10-23 Tue 13:07]--[2018-10-23 Tue 13:23] =>  0:16
     CLOCK: [2018-10-23 Tue 08:48]--[2018-10-23 Tue 09:50] =>  1:02
     CLOCK: [2018-10-22 Mon 08:30]--[2018-10-22 Mon 09:02] =>  0:32
     CLOCK: [2018-10-19 Fri 09:54]--[2018-10-19 Fri 10:11] =>  0:17
     CLOCK: [2018-10-19 Fri 09:28]--[2018-10-19 Fri 09:53] =>  0:25
     CLOCK: [2018-10-18 Thu 09:36]--[2018-10-18 Thu 09:56] =>  0:20
     CLOCK: [2018-10-17 Wed 14:05]--[2018-10-17 Wed 14:19] =>  0:14
     CLOCK: [2018-10-17 Wed 10:03]--[2018-10-17 Wed 10:52] =>  0:49
     :END:

Now that we are creating a top-level API for Dogen we should really
read up on books about good API design.

Namespacing guideline:

- company | project
- product | technology
- feature
- subnamespace

So in our case, =masd::dogen= and =masd::cpp_ref_impl=. We are
violating the guideline on no abbreviations with ref_impl but
=cpp_reference_implementation= seems a tad long.

It seems we have several types of classes:

- interfaces
- abstract base classes
- values
- objects where data dominates and behaviours are small or trivial
- objects where behaviour dominates and data is small or trivial
- static classes

These should be identifiable at the meta-model level, with appropriate
names.

*** POSTPONED Create a single binary for all of dogen                 :story:
    CLOSED: [2018-10-29 Mon 08:51]
    :LOGBOOK:
    CLOCK: [2018-10-26 Fri 08:50]--[2018-10-26 Fri 10:15] =>  1:25
    CLOCK: [2018-10-25 Thu 20:10]--[2018-10-25 Thu 21:08] =>  0:58
    CLOCK: [2018-10-25 Thu 17:19]--[2018-10-25 Thu 17:53] =>  0:34
    CLOCK: [2018-10-25 Thu 16:51]--[2018-10-25 Thu 17:18] =>  0:27
    CLOCK: [2018-10-25 Thu 16:13]--[2018-10-25 Thu 16:50] =>  0:37
    CLOCK: [2018-10-19 Fri 14:41]--[2018-10-19 Fri 16:39] =>  1:58
    :END:

As per analysis, we need to create a single dogen binary, like so:

: dogen.cli COMMAND COMMAND_SPECIFIC_OPTIONS

Where =COMMAND= is:

- =transform=: functionality that is currently in tailor.
- =generate=: functionality that is currently in knitter.
- =expand=: functionality that is currently in stitcher plus expansion
  of wale templates.
- =make=: functionality in darter: create project, structure etc.

In order to support sub-commands we need to do a lot of hackery with
program options:

- [[https://gist.github.com/randomphrase/10801888][cmdoptions.cpp]]: Demonstration of how to do subcommand option
  processing with boost program_options
- [[https://stackoverflow.com/questions/15541498/how-to-implement-subcommands-using-boost-program-options][How to implement subcommands using Boost.Program_options?]]

*Merged Stories*

We started off by creating lots of little executables: knitter,
darter, tailor, stitcher. Each of these has its own project,
command-line options etc. However, now that we are concentrating all
of the domain knowledge in yarn, it seems less useful to have so many
executables that are simply calling yarn transforms. Instead, it may
make more sense to use an approach similar to git and have a
"sub-command":

: dogen knit
: dogen tailor

And so forth. Of course, we could also take this opportunity and clean
up these names to making them more meaningful to end users. Perhaps:

: dogen codegen
: dogen transform

Each of these sub-commands or modes would have their own set of
associated options. We need to figure out how this is done using boost
program options. We also need to spend a bit of time working out the
sub-commands to make sure they make sense across the board.

In terms of names, we can't really call the project "dogen". We should
call it something allusive to the command line, such as cli. However,
the final binary should be called dogen or perhaps, =dogen.cli=. This
fits in with other binaries such as =dogen.web=, =dogen.http=,
=dogen.gui= etc.

*** COMPLETED Design and generate the new dogen product API           :story:
    CLOSED: [2018-10-29 Mon 08:52]
    :LOGBOOK:
    CLOCK: [2018-10-26 Fri 15:46]--[2018-10-26 Fri 15:54] =>  0:08
    CLOCK: [2018-10-26 Fri 14:21]--[2018-10-26 Fri 15:45] =>  1:24
    CLOCK: [2018-10-26 Fri 14:09]--[2018-10-26 Fri 14:20] =>  0:11
    CLOCK: [2018-10-26 Fri 12:35]--[2018-10-26 Fri 13:25] =>  0:50
    CLOCK: [2018-10-25 Thu 13:26]--[2018-10-25 Thu 13:58] =>  0:32
    :END:

Now we've designed a clean top-level API for the product, we need to
code-generate it and implement it in terms of the existing code.

Notes:

- given the new ideas around creating a lib for all binaries - so we do
  not have to have huge amounts of hackery when testing some aspects
  of an executable - we require a new convention for naming the cmake
  targets. There are some constraints:
  - we cannot have dots in the target name because some build systems
    do not support them (=make=, it seems). Strangely enough we do
    seem to have targets with dots at present:

: set(name "annotations")
: set(tests_name "${name}.tests")
: add_executable(${tests_name} ${files})

    Maybe this works because we do not reference this target? OK this
    was tested and no problems were spotted. We need to send this
    change to the build farm and see if anything breaks across the
    platforms.

  - we need to distinguish between the library and the executable for
    executables. For example, we have =masd.dogen.cli=; whilst cmake
    correctly names the binaries =libmasd.dogen.cli= and
    =masd.dogen.cli=, the targets themselves have the same name
    (=masd.dogen.cli=).
  - at present we are using the simple name for a model as the cmake
    target name; this means that we cannot have two models with the
    same simple name but different external/model modules. To be fair,
    this seems like a really unlikely scenario. By sheer luck , we do
    not have any problems for the product API model because the
    product name is the model name (e.g. =masd.dogen= becomes
    =dogen=).
- one possible solution is to say that on the exceptional case of
  binaries, we need to use the postfix =_lib= and =_exe= for the
  targets, e.g. =cli_lib= and =cli_exe=. For all other cases we can
  maintain the existing rule.

*** COMPLETED Update cmake files to reflect product/project naming    :story:
    CLOSED: [2018-10-29 Mon 08:52]
    :LOGBOOK:
    CLOCK: [2018-10-26 Fri 22:11]--[2018-10-26 Fri 22:20] =>  0:09
    CLOCK: [2018-10-26 Fri 21:45]--[2018-10-26 Fri 22:10] =>  0:25
    CLOCK: [2018-10-26 Fri 19:21]--[2018-10-26 Fri 20:26] =>  1:05
    CLOCK: [2018-10-26 Fri 17:22]--[2018-10-26 Fri 18:40] =>  1:18
    :END:

We need to move all cmake files to the new world where the target
names follow the product/project name convention, and address the
hacks around tests.

*** POSTPONED Clean up the mess of refactors in dogen core            :story:
    CLOSED: [2018-10-29 Mon 08:52]
    :LOGBOOK:
    CLOCK: [2018-10-27 Sat 15:02]--[2018-10-27 Sat 19:48] =>  4:46
    CLOCK: [2018-10-27 Sat 11:23]--[2018-10-27 Sat 12:29] =>  1:06
    :END:

We finally found a good model for the data in dogen, and its based on
data driven design. Basically, we need to let go of OOP constructs
that aggregate data that is logically related from a human perspective
and start to think of data usage patterns. From this perspective,
there is no such thing as a modeling element - just a scattering of
properties that are used by different transforms all the way into text
transformation. Even text transforms don't really operate on
elements - they operate on specific element properties. If we segment
the text transforms this way, we end up with a large number of small
text transforms, each with very specific tasks, generating chunks of a
file. Finally, at the end, we need to concatenate these chunks to form
the end product. With this approach we solve the impedance mismatch
between the modeling model and the generational model - all we now
have are additional containers with properties. This also means that
its much easier to have different models further down the pipeline
because they are just adding more properties. We can even use
inheritance for this, e.g. generational model inherits from modeling
model and adds properties x, y, z; generational cpp model inherits
from generational model and so forth. As an example, instead of
generating the decoration properties for every artefact, we now split
all elements into two groups: those that have "standard" decoration
properties and those that have overriden decoration properties. We
then generate these two groups. For those sharing the common
decoration properties, we insert those in their vector X times. This
is still not the most efficient (we really only need one copy) but its
orders of magnitude (at least one) faster than the current
approach. Similarly with namespaces: we only need to do the namespaces
once for all types in a facet.

However, we are very far from this at present. The first task is to
try to abort the OOP refactors that we made in the past.

** Deprecated
*** CANCELLED Sort out iconv on windows                               :story:
    CLOSED: [2018-10-16 Tue 11:49]

*Rationale*: no longer needed now we're using vcpkg.

Latest conan packages seem to have changed how iconv is packaged. Output:

: Get-ChildItem C:/Users/appveyor/.conan/data/libiconv/1.15/bincrafters/stable/package/f6bcf0d95fafcf303dfebe42c8562386d4cdbf69 -Recurse
:
    Directory: C:\Users\appveyor\.conan\data\libiconv\1.15\bincrafters\stable\package\f6bcf0d95fafcf303dfebe42c8562386d4cdbf69
: Mode                LastWriteTime         Length Name
: ----                -------------         ------ ----
: d-----        1/25/2018   1:30 PM                bin
: d-----        1/25/2018   1:30 PM                include
: d-----        1/25/2018   1:30 PM                lib
: d-----        1/25/2018   1:30 PM                licenses
: d-----        1/25/2018   1:30 PM                share
: -a----        1/25/2018   1:30 PM            466 conaninfo.txt
: -a----        1/25/2018   1:30 PM           1308 conanmanifest.txt
:     Directory: C:\Users\appveyor\.conan\data\libiconv\1.15\bincrafters\stable\package\f6bcf0d95fafcf303dfebe42c8562386d4cdbf69\bin
: Mode                LastWriteTime         Length Name
: ----                -------------         ------ ----
: -a----        1/25/2018   1:30 PM        1047040 iconv.exe
:     Directory: C:\Users\appveyor\.conan\data\libiconv\1.15\bincrafters\stable\package\f6bcf0d95fafcf303dfebe42c8562386d4cdbf69\include
: Mode                LastWriteTime         Length Name
: ----                -------------         ------ ----
: -a----        1/25/2018   1:30 PM           9270 iconv.h
: -a----        1/25/2018   1:30 PM           1512 libcharset.h
: -a----        1/25/2018   1:30 PM           1319 localcharset.h
:     Directory: C:\Users\appveyor\.conan\data\libiconv\1.15\bincrafters\stable\package\f6bcf0d95fafcf303dfebe42c8562386d4cdbf69\lib
: Mode                LastWriteTime         Length Name
: ----                -------------         ------ ----
: -a----        1/25/2018   1:30 PM            196 charset.alias
: -a----        1/25/2018   1:30 PM           8030 charset.lib
: -a----        1/25/2018   1:30 PM        1111174 iconv.lib
: -a----        1/25/2018   1:30 PM           1106 libcharset.la
: -a----        1/25/2018   1:30 PM           1100 libiconv.la
:     Directory: C:\Users\appveyor\.conan\data\libiconv\1.15\bincrafters\stable\package\f6bcf0d95fafcf303dfebe42c8562386d4cdbf69\licenses
: Mode                LastWriteTime         Length Name
: ----                -------------         ------ ----
: -a----        1/25/2018   1:30 PM          25291 COPYING.LIB
:     Directory: C:\Users\appveyor\.conan\data\libiconv\1.15\bincrafters\stable\package\f6bcf0d95fafcf303dfebe42c8562386d4cdbf69\share
: Mode                LastWriteTime         Length Name
: ----                -------------         ------ ----
: d-----        1/25/2018   1:30 PM                doc
: d-----        1/25/2018   1:30 PM                man
:     Directory: C:\Users\appveyor\.conan\data\libiconv\1.15\bincrafters\stable\package\f6bcf0d95fafcf303dfebe42c8562386d4cdbf69\share\doc
: Mode                LastWriteTime         Length Name
: ----                -------------         ------ ----
: -a----        1/25/2018   1:30 PM           6438 iconv.1.html
: -a----        1/25/2018   1:30 PM           6335 iconv.3.html
: -a----        1/25/2018   1:30 PM           4399 iconvctl.3.html
: -a----        1/25/2018   1:30 PM           2054 iconv_close.3.html
: -a----        1/25/2018   1:30 PM           8489 iconv_open.3.html
: -a----        1/25/2018   1:30 PM           3406 iconv_open_into.3.html
:     Directory: C:\Users\appveyor\.conan\data\libiconv\1.15\bincrafters\stable\package\f6bcf0d95fafcf303dfebe42c8562386d4cdbf69\share\man
: Mode                LastWriteTime         Length Name
: ----                -------------         ------ ----
: d-----        1/25/2018   1:30 PM                man1
: d-----        1/25/2018   1:30 PM                man3
:     Directory: C:\Users\appveyor\.conan\data\libiconv\1.15\bincrafters\stable\package\f6bcf0d95fafcf303dfebe42c8562386d4cdbf69\share\man\man1
: Mode                LastWriteTime         Length Name
: ----                -------------         ------ ----
: -a----        1/25/2018   1:30 PM           4231 iconv.1
:     Directory: C:\Users\appveyor\.conan\data\libiconv\1.15\bincrafters\stable\package\f6bcf0d95fafcf303dfebe42c8562386d4cdbf69\share\man\man3
: Mode                LastWriteTime         Length Name
: ----                -------------         ------ ----
: -a----        1/25/2018   1:30 PM           4239 iconv.3
: -a----        1/25/2018   1:30 PM           2385 iconvctl.3
: -a----        1/25/2018   1:30 PM           1044 iconv_close.3
: -a----        1/25/2018   1:30 PM           4671 iconv_open.3
: -a----        1/25/2018   1:30 PM           1822 iconv_open_into.3

We have commented it out from CPack for now.
*** CANCELLED Rename options to transformation request                :story:
    CLOSED: [2018-10-19 Fri 14:54]

*Rationale*: this will be cleaned up as part of the work on the
product API.

These are not really "options"; it is a request made into yarn to
code-generate a model. We haven't yet got a proper name but it has to
somehow involve the word "request". The best way is to visualise this
as part of some API where may such requests can be made (and handled
concurrently).

This also means we need to split out the request from the context. We
should have an initialisation phase where we construct the context and
then we should be able to reuse the pipeline for many requests. This
also means that the right place to put the transform metrics is in the
request - not the context - given that these are request specific.

The best way to go about it may be to have two contexts:

- transformation context: const; loaded at start-up.
- request context: request specific context, including probing and the
  request itself.

Then:

- clients are responsible for setting up the transformation
  context. This ensures we do it only once.
- clients are also responsible for setting up the request context, but
  they then do it for each request.

Note also that a request should support multiple target models.
*** CANCELLED Add a CMake module for git                              :story:
    CLOSED: [2018-10-26 Fri 16:18]

*Rationale*: we now set the commit from the outside world so that
there are no dependencies with git.

We are finding git manually at the moment, which means we are probably
not doing it right. It appears there is a CMake script for it:

- [[%20http://gnuradio.org/redmine/projects/gnuradio/repository/revisions/accb9f2fe8fd8f6a1e114adac5b15304b0e0012d/entry/cmake/Modules/FindGit.cmake][FindGIT.cmake]]
