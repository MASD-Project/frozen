#+title: Sprint Backlog 36
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Stories

This file contains all stories that were closed during sprint 36.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2014-05-27 Tue 13:04]

| Headline                                                             | Time    |       |      |
|----------------------------------------------------------------------+---------+-------+------|
| *Total time*                                                         | *11:14* |       |      |
|----------------------------------------------------------------------+---------+-------+------|
| Development Stories Implemented                                      |         | 11:14 |      |
| COMPLETED Sprint and product backlog grooming                        |         |       | 0:48 |
| COMPLETED Add tests around model tagging                             |         |       | 0:46 |
| COMPLETED Add tagging for types                                      |         |       | 2:48 |
| COMPLETED Add tagging to SML workflow                                |         |       | 0:20 |
| COMPLETED Start implementing OM workflow                             |         |       | 5:24 |
| COMPLETED Capture requirements for new meta-data approach            |         |       | 0:47 |
| CANCELLED Add tests for tagging of abstract objects                  |         |       | 0:14 |
| CANCELLED Remove speculative facet layers for hash and serialization |         |       | 0:07 |
#+end:

*** COMPLETED Sprint and product backlog grooming                      :task:
    CLOSED: [2013-10-21 Mon 07:53]
    CLOCK: [2013-10-21 Mon 07:49]--[2013-10-21 Mon 07:53] =>  0:04
    CLOCK: [2013-10-16 Wed 12:37]--[2013-10-16 Wed 12:49] =>  0:12
    CLOCK: [2013-10-16 Wed 12:25]--[2013-10-16 Wed 12:37] =>  0:12
    CLOCK: [2013-10-07 Mon 18:08]--[2013-10-07 Mon 18:25] =>  0:17
    CLOCK: [2013-10-07 Mon 18:05]--[2013-10-07 Mon 18:08] =>  0:03

*** COMPLETED Add tests around model tagging                          :story:
    CLOSED: [2013-10-08 Tue 22:10]
    CLOCK: [2013-10-08 Tue 21:42]--[2013-10-08 Tue 22:05] =>  0:23

**** COMPLETED adding all facets                                       :task:
     CLOSED: [2013-10-07 Mon 18:46]
    CLOCK: [2013-10-07 Mon 18:26]--[2013-10-07 Mon 18:44] =>  0:18

**** COMPLETED adding a few facets                                     :task:
     CLOSED: [2013-10-08 Tue 21:42]
     CLOCK: [2013-10-07 Mon 18:46]--[2013-10-07 Mon 18:51] =>  0:05

*** COMPLETED Add tagging for types                                   :story:
    CLOSED: [2013-10-10 Thu 20:50]
    CLOCK: [2013-10-10 Thu 19:36]--[2013-10-10 Thu 20:26] =>  0:50
    CLOCK: [2013-10-08 Tue 22:10]--[2013-10-08 Tue 22:25] =>  0:15

**** COMPLETED Make all model items traversal more generic             :task:
     CLOSED: [2013-10-08 Tue 23:31]
     CLOCK: [2013-10-08 Tue 22:37]--[2013-10-08 Tue 23:31] =>  0:54

**** COMPLETED Add basic model item tagging infrastructure             :task:
     CLOSED: [2013-10-08 Tue 23:31]

**** COMPLETED Tag modules                                             :task:
     CLOSED: [2013-10-08 Tue 23:32]

**** COMPLETED Tag types                                               :task:
     CLOSED: [2013-10-10 Thu 20:50]
     CLOCK: [2013-10-10 Thu 20:27]--[2013-10-10 Thu 20:50] =>  0:23
     CLOCK: [2013-10-10 Thu 10:54]--[2013-10-10 Thu 10:56] =>  0:02
     CLOCK: [2013-10-09 Wed 17:06]--[2013-10-09 Wed 17:25] =>  0:19
     CLOCK: [2013-10-09 Wed 17:00]--[2013-10-09 Wed 17:05] =>  0:05
**** COMPLETED Tag primitives and enumerations                         :task:
     CLOSED: [2013-10-10 Thu 20:50]
**** COMPLETED Tag abstract objects                                    :task:
     CLOSED: [2013-10-10 Thu 20:50]
*** COMPLETED Add tagging to SML workflow                             :story:
    CLOSED: [2013-10-11 Fri 00:17]
    CLOCK: [2013-10-10 Thu 23:57]--[2013-10-11 Fri 00:17] =>  0:20

*** COMPLETED Start implementing OM workflow                          :story:
    CLOSED: [2013-10-21 Mon 07:51]
    CLOCK: [2013-10-15 Tue 17:58]--[2013-10-15 Tue 19:08] =>  1:10
    CLOCK: [2013-10-11 Fri 00:31]--[2013-10-11 Fri 00:37] =>  0:06
    CLOCK: [2013-10-11 Fri 00:17]--[2013-10-11 Fri 00:31] =>  0:14

**** COMPLETED Implement licence hydrator and plug it into workflow    :task:
     CLOSED: [2013-10-15 Tue 20:44]
     CLOCK: [2013-10-15 Tue 20:18]--[2013-10-15 Tue 20:44] =>  0:26
     CLOCK: [2013-10-15 Tue 19:43]--[2013-10-15 Tue 20:18] =>  0:35
     CLOCK: [2013-10-15 Tue 19:30]--[2013-10-15 Tue 19:43] =>  0:13
     CLOCK: [2013-10-15 Tue 19:15]--[2013-10-15 Tue 19:30] =>  0:15
     CLOCK: [2013-10-15 Tue 19:14]--[2013-10-15 Tue 19:15] =>  0:01

**** COMPLETED Implement code generation marker factory                :task:
     CLOSED: [2013-10-16 Wed 00:58]
     CLOCK: [2013-10-16 Wed 00:35]--[2013-10-16 Wed 00:58] =>  0:23
     CLOCK: [2013-10-15 Tue 20:55]--[2013-10-15 Tue 21:10] =>  0:15
     CLOCK: [2013-10-15 Tue 20:44]--[2013-10-15 Tue 20:55] =>  0:11

**** CANCELLED Add types header formatter to workflow                  :task:
     CLOSED: [2013-10-21 Mon 07:51]
     CLOCK: [2013-10-16 Wed 14:14]--[2013-10-16 Wed 14:29] =>  0:15
     CLOCK: [2013-10-16 Wed 13:30]--[2013-10-16 Wed 14:08] =>  0:38
     CLOCK: [2013-10-16 Wed 13:20]--[2013-10-16 Wed 13:30] =>  0:10
     CLOCK: [2013-10-16 Wed 12:56]--[2013-10-16 Wed 13:01] =>  0:05
     CLOCK: [2013-10-16 Wed 12:16]--[2013-10-16 Wed 12:22] =>  0:06
     CLOCK: [2013-10-16 Wed 12:06]--[2013-10-16 Wed 12:16] =>  0:10
     CLOCK: [2013-10-16 Wed 01:01]--[2013-10-16 Wed 01:12] =>  0:11
*** COMPLETED Capture requirements for new meta-data approach         :spike:
    CLOSED: [2013-10-21 Mon 07:52]
    CLOCK: [2013-10-10 Thu 14:23]--[2013-10-10 Thu 14:40] =>  0:17
    CLOCK: [2013-10-10 Thu 10:56]--[2013-10-10 Thu 11:01] =>  0:05
    CLOCK: [2013-10-10 Thu 10:46]--[2013-10-10 Thu 10:55] =>  0:09
    CLOCK: [2013-10-09 Wed 12:19]--[2013-10-09 Wed 12:26] =>  0:07
    CLOCK: [2013-10-09 Wed 12:10]--[2013-10-09 Wed 12:19] =>  0:09

We started off by creating tags as key-value-pairs because this
reflected the nature of the inputs coming in from SML. It was also
handy for a JSON format. However, the infrastructure that is growing
around tags (e.g. adaptor, router) seems to imply that a flat
structure is not quite the right way of modeling this; adaptor and
router are just a way of solving the impedance mismatch. Perhaps a
better approach is to create an object model around meta-data.

The main issues with the current approach are:

- very verbose: the whole nonsense around tagger, adaptor and router
  makes it really cumbersome to write code that gets and sets. Having
  said that, in order for defaulting to work we would need a way of
  checking if something was already set before setting it. We would
  need something akin to =std::optional= or =boost::optional= for
  this.
- the aspects in a section are hard-coded. At present we have the main
  header file, the implementation file, the forward declarations and
  the includer; in the future we could have more (boost parameter,
  boost concept, etc). Its annoying to have to add new blocks to tags
  every time we need to add an aspect. This would be solved if we had
  a container for aspects with some aspect enumeration. The
  enumeration would have to have a language prefix
  (e.g. =cpp_aspects=).
- on the same vein, the facets themselves are hard-coded. Like the
  aspects, we expect these to expand overtime and we want to make it
  as easy as possible to do so. At present we need to add more facet
  blocks into tags and then do a whole load of population in
  tagger. This would be solved if we have a container for facets with
  some enumeration associated. The enumerators would have to have a
  language prefix (e.g. =cpp_types=, =cpp_hash_standard=, etc.)

Of course the key issue with an object model is that the data would
still be inputted as key-value-pairs in the dia diagram or the JSON
file. This means we still would need to solve this impedance mismatch,
probably via tags (e.g. the graph of the object model is encoded in
the key names as it is at present).

The other thing that may be useful is to think of the meta-data as a
tree, with the following levels:

- *language-agnostic*: or root; applies to everything in this
  model. e.g. =comment=, =identity_attribute=, etc.
- *language-specific*: applies to a specific language like C++. All
  the stuff in tags under =cpp=.
- *facet-specific*: applies to just a facet in a language,
  e.g. =types= in =cpp=.
- *aspect-specific*: all the file names, etc for the given aspect.

With this we can now handle all facets in the same way (even
regardless of language), as well as all aspects in the same way. We
could have methods that take the facet/aspect node and do stuff
without needing to know which facet/aspect they're processing (of
course the nodes of the tree would still have an enumeration so
identification is still possible).

We could use boost property tree as a way of managing the tree. It
supports paths - e.g. the tags - out of the box. It would also support
the complex/simple tags; complex tags would be like a container in
JSON, where the ordering is guaranteed by the order of nodes in a
given level. Finally it also supports boost serialisation. We just
need to find a way to JSON serialise it as per the IO stream
requirements, which could just be a case of using JSON support in
property tree.

When considering the tree approach, we should also take into account
the "facet with multiple implementations scenario". This is for cases
such as hashing or serialisation where there may be more than one way
of providing an implementation for a facet - and we may need to use
more than one at the same time. One option is to consider these things
as distinct facets - entirely unrelated at this level. For example we
could have a standard_hash facet and a boost_hash facet.

*** CANCELLED Add tests for tagging of abstract objects                :task:
    CLOSED: [2013-10-21 Mon 07:52]
    CLOCK: [2013-10-10 Thu 23:34]--[2013-10-10 Thu 23:48] =>  0:14

*** CANCELLED Remove speculative facet layers for hash and serialization :spike:
    CLOSED: [2013-10-21 Mon 07:52]
    CLOCK: [2013-10-10 Thu 23:27]--[2013-10-10 Thu 23:34] =>  0:07

For some unfathomable reason we decided to add a layer of indirection
for both hash and serialization. This is for speculative reasons as in
the future we may want to add boost hash and other forms of
serialization. However, in keeping with the (often violated) rule that
we never add code without a use case, we need to remove this.

** Deprecated Development Stories
