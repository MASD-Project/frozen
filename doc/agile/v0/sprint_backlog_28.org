#+title: Sprint Backlog 28
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Stories

This file contains all stories that were closed during sprint 28.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2014-05-27 Tue 13:03]

| Headline                                                         | Time    |       |       |
|------------------------------------------------------------------+---------+-------+-------|
| *Total time*                                                     | *28:42* |       |       |
|------------------------------------------------------------------+---------+-------+-------|
| Development Stories Implemented                                  |         | 28:42 |       |
| COMPLETED Update README                                          |         |       |  1:04 |
| COMPLETED Whiteboarding on the role of SML                       |         |       |  1:45 |
| COMPLETED Leaf types do not have a virtual destructor            |         |       |  0:26 |
| COMPLETED Suppress visitor generation for non-target models      |         |       |  0:20 |
| COMPLETED Fix generation bug in inheritance tree                 |         |       |  1:22 |
| COMPLETED Test move constructors in test model                   |         |       |  2:52 |
| COMPLETED Transformer tests should check that docs are not empty |         |       |  0:28 |
| COMPLETED Add to the introduction in manual                      |         |       |  1:14 |
| COMPLETED Sprint and product backlog grooming                    |         |       |  1:13 |
| COMPLETED Improve modeling of domain driven concepts in SML      |         |       | 14:40 |
| COMPLETED Break down SML into concepts at the design level       |         |       |  1:27 |
| COMPLETED Add initial support for concepts at the SML level      |         |       |  1:45 |
| CANCELLED Move services into their own type                      |         |       |  0:06 |
#+end:

*** COMPLETED Update README
    CLOSED: [2013-06-04 Tue 08:37]
    CLOCK: [2013-06-04 Tue 08:30]--[2013-06-04 Tue 08:37] =>  0:07
    CLOCK: [2013-06-04 Tue 07:49]--[2013-06-04 Tue 08:18] =>  0:48
    CLOCK: [2013-06-03 Mon 18:16]--[2013-06-03 Mon 18:42] =>  0:26
    CLOCK: [2013-06-03 Mon 18:03]--[2013-06-03 Mon 18:05] =>  0:02

The [[https://github.com/Neverlord/libcppa][C++ actor library]] has a nice README layout, most of which is
applicable to Dogen. Copy the appropriate parts.

*** COMPLETED Whiteboarding on the role of SML                         :task:
    CLOSED: [2013-06-06 Thu 07:57]
    CLOCK: [2013-06-05 Wed 20:30]--[2013-06-05 Wed 22:15] =>  1:45

*** COMPLETED Leaf types do not have a virtual destructor             :spike:
    CLOSED: [2013-06-08 Sat 14:13]
    CLOCK: [2013-06-08 Sat 14:14]--[2013-06-08 Sat 14:17] =>  0:03
    CLOCK: [2013-06-08 Sat 14:02]--[2013-06-08 Sat 14:13] =>  0:11
    CLOCK: [2013-06-08 Sat 13:50]--[2013-06-08 Sat 14:02] =>  0:12

For some reason we are not generating a virtual destructor for the
leaf types.

*** COMPLETED Suppress visitor generation for non-target models       :spike:
    CLOSED: [2013-06-08 Sat 23:16]
    CLOCK: [2013-06-08 Sat 22:56]--[2013-06-08 Sat 23:16] =>  0:20

We are generating visitors all the time, even when the model that
contains a visitable type is just a reference rather than the target.

*** COMPLETED Fix generation bug in inheritance tree                  :spike:
    CLOSED: [2013-06-09 Sun 20:52]
    CLOCK: [2013-06-09 Sun 20:50]--[2013-06-09 Sun 20:52] =>  0:02
    CLOCK: [2013-06-09 Sun 19:30]--[2013-06-09 Sun 20:50] =>  1:20

For some reason we are not populating all classes across the
inheritance tree.

*** COMPLETED Test move constructors in test model                    :spike:
    CLOSED: [2013-06-09 Sun 23:42]
    CLOCK: [2013-06-09 Sun 23:48]--[2013-06-09 Sun 23:52] =>  0:04
    CLOCK: [2013-06-09 Sun 23:42]--[2013-06-09 Sun 23:48] =>  0:06
    CLOCK: [2013-06-09 Sun 22:34]--[2013-06-09 Sun 23:42] =>  1:08
    CLOCK: [2013-06-09 Sun 22:00]--[2013-06-09 Sun 22:34] =>  0:34
    CLOCK: [2013-06-09 Sun 18:46]--[2013-06-09 Sun 19:10] =>  0:24
    CLOCK: [2013-06-09 Sun 18:10]--[2013-06-09 Sun 18:46] =>  0:36

At present we are not testing that the generated move constructors are
valid. It does not appear to be the case as when we tried to make use
of them in Creris, the compiler complained. We need to add a generic
test that performs a =std::move= in sanitiser and fix the fallout of
the test.

*** COMPLETED Transformer tests should check that docs are not empty  :spike:
    CLOSED: [2013-06-10 Mon 22:28]
    CLOCK: [2013-06-10 Mon 22:20]--[2013-06-10 Mon 22:28] =>  0:08
    CLOCK: [2013-06-10 Mon 22:00]--[2013-06-10 Mon 22:20] =>  0:20

Dia to SML transformer tests don't appear to check that we are
correctly transforming the documentation. Change factory to create
documentation if necessary.

*** COMPLETED Add to the introduction in manual                       :story:
    CLOSED: [2013-06-17 Mon 07:51]
    CLOCK: [2013-06-14 Fri 08:30]--[2013-06-14 Fri 08:40] =>  0:10
    CLOCK: [2013-06-14 Fri 07:49]--[2013-06-14 Fri 08:22] =>  0:33
    CLOCK: [2013-06-13 Thu 20:29]--[2013-06-13 Thu 21:00] =>  0:31

*** COMPLETED Sprint and product backlog grooming                      :task:
    CLOSED: [2013-06-17 Mon 07:52]
    CLOCK: [2013-06-17 Mon 07:47]--[2013-06-17 Mon 07:56] =>  0:09
    CLOCK: [2013-06-06 Thu 07:50]--[2013-06-06 Thu 08:15] =>  0:25
    CLOCK: [2013-06-05 Wed 19:19]--[2013-06-05 Wed 19:24] =>  0:05
    CLOCK: [2013-06-05 Wed 07:54]--[2013-06-05 Wed 07:58] =>  0:04
    CLOCK: [2013-06-05 Wed 07:46]--[2013-06-05 Wed 07:54] =>  0:08
    CLOCK: [2013-06-04 Tue 23:54]--[2013-06-04 Tue 23:59] =>  0:05
    CLOCK: [2013-06-04 Tue 19:06]--[2013-06-04 Tue 19:12] =>  0:06
    CLOCK: [2013-06-04 Tue 18:55]--[2013-06-04 Tue 19:06] =>  0:11

*** COMPLETED Improve modeling of domain driven concepts in SML        :epic:
    CLOSED: [2013-06-17 Mon 07:52]
    CLOCK: [2013-06-08 Sat 19:53]--[2013-06-08 Sat 20:00] =>  0:07
    CLOCK: [2013-06-08 Sat 19:00]--[2013-06-08 Sat 19:52] =>  0:52
    CLOCK: [2013-06-08 Sat 12:49]--[2013-06-08 Sat 12:51] =>  0:02
    CLOCK: [2013-06-08 Sat 12:10]--[2013-06-08 Sat 12:49] =>  0:39
    CLOCK: [2013-06-06 Thu 08:52]--[2013-06-06 Thu 09:03] =>  0:11
    CLOCK: [2013-06-06 Thu 08:18]--[2013-06-06 Thu 08:48] =>  0:30
    CLOCK: [2013-06-04 Tue 18:40]--[2013-06-04 Tue 19:02] =>  0:22

Its becoming obvious that SML is largely trying to model part of the
domain driven design model - the part that is closer to code and
further away from the higher-level design processes. However, we
introduced DDD features into SML in a somewhat haphazard fashion,
which obscured this. The objective of this story is to bring to the
fore all parts of SML which are representations of DDD concepts, and
to make sure these are modeled as closely as possible to DDD.

This will be a good chance to fix =pod= which was incorrectly named
due to of a lack of understanding of what a C++ pod type [[http://en.wikipedia.org/wiki/Plain_old_data_structure][really is]].

*Keys and visitor*

At the meta-model level, keys are actually just an instance of a value
object with properties. The injector will create them. An entity
should have a special association with its keys.

Visitors are injected as services. They have operations with the visit
methods.

**** COMPLETED Create a base class for types                          :story:
     CLOSED: [2013-06-08 Sat 14:30]
     CLOCK: [2013-06-08 Sat 14:22]--[2013-06-08 Sat 14:30] =>  0:08
     CLOCK: [2013-06-08 Sat 14:18]--[2013-06-08 Sat 14:22] =>  0:04
     CLOCK: [2013-06-08 Sat 12:59]--[2013-06-08 Sat 13:50] =>  0:51
     CLOCK: [2013-06-05 Wed 08:37]--[2013-06-05 Wed 09:27] =>  0:50
     CLOCK: [2013-06-05 Wed 08:29]--[2013-06-05 Wed 08:32] =>  0:03
     CLOCK: [2013-06-05 Wed 07:58]--[2013-06-05 Wed 08:17] =>  0:19

New understanding:

- create a base class call =model_element=. =thing= seems to be the
  only other name for this type according to DDD book, but the eCore
  name seems a bit more sensible.
- create a derived class of =model_element= called =object=. entities,
  services and values derive from object.

Old understanding:

Refactoring for concepts would be made a lot easier if only we had a
base class that contained all the type features. We need two levels of
inheritance:

- a =type=: this is the base class for things such as =module=,
  =enumeration=, =string_table=, etc. It has a =qname=, implementation
  specific parameters and documentation. For now, it should also have
  generation type (but this needs to be revisited).
- an =object_type= (see naming rationale below)which derives from type
  and adds properties and operations to it.

***** COMPLETED Find the correct name for object base class
      CLOSED: [2013-06-08 Sat 13:47]

Final results:

- we are going to use a variation of eCore names: =model_element= and
  =typed_element=.

Investigation:

In SML, entities, services and values are all "types of objects". The
book is never very clear about their relationship, but a few
inferences can be made:

- "value objects": these are objects which have no identity;
- services: these contain functions that would otherwise be
  stand-alone but in a OO world must be packaged inside of objects. in
  SML, due to code generation limitations we take this further and
  consider a service anything which has behaviour. This is not a DDD
  view though.
- entities: these are objects with identity.

Now, a type used to describe objects is traditionally called a class
(e.g. a meta object, or the object that models objects), so it would
make sense for the base class to be called =class=. However DDD
terminology seems to focus more on run time aspects. One could
conceivably call it =object=.

eCore and UML derived ideas:

- =typed_element=: not very clear; a model type with a type?
- =classifier=: "A classifier is a discrete concept in the model,
  having identity, state, behavior, and relationships."

XML schema derived ideas:

- =type=: parent; has a name
- =simple_type=: primitives; child of type.
- =complex_type=: pods; child of type.
- =enumeration=: child of simple type.

***** COMPLETED Update the SML diagram and code generate it
      CLOSED: [2013-06-08 Sat 14:28]

Make the type visitable

***** CANCELLED Update model to be a container of the base type
      CLOSED: [2013-06-08 Sat 14:29]

- Consider using boost pointer container, although this would mean
  adding support for it in dogen. Maybe for now we could start with
  =boost::shared_ptr=.
- Change transformer to become a visitor of type
- Change C++ transformer


No need for this, will cause a lot of breakage for no reason.

**** COMPLETED Create class to model entity                           :story:
     CLOSED: [2013-06-08 Sat 19:52]

We should have an entity class with an identity. Identity is just a
set of properties which are used to uniquely identify the object. The
entity class should also have associated with it the set of versioned
and unversioned keys, if such exist (e.g. if the class is keyed and/or
versioned). Potentially =boost::optional=?

**** COMPLETED Create classes to model service, factory and repository :story:
     CLOSED: [2013-06-08 Sat 19:52]

For practical purposes (and for now) these classes are all identical:
they can have properties and operations. They have different names to
keep in sync with DDD. We could of course create a common type with a
not-so-clear-name (e.g. =object_with_behaviour=) and then stick an
enumeration in it for the three different types. However, it appears
much more meaningful to have the correct DDD names, even it if means a
few identical classes with different names.

We need to add stereotypes for factory and repository to the
transformer.

**** COMPLETED Rename package to module                               :story:
     CLOSED: [2013-06-08 Sat 22:56]
     CLOCK: [2013-06-08 Sat 20:40]--[2013-06-08 Sat 22:56] =>  2:16

Preferred name in DDD. Also more language neutral.

***** COMPLETED Rename class in SML
      CLOSED: [2013-06-08 Sat 22:56]
***** COMPLETED Update qname
      CLOSED: [2013-06-08 Sat 22:56]

- external package path;
- package path

***** COMPLETED Update method names
      CLOSED: [2013-06-08 Sat 22:56]
**** COMPLETED Create a value types enumeration                       :story:
     CLOSED: [2013-06-08 Sat 23:17]

All these types are actually types of values:

- enumeration
- string table
- key (versioned and unversioned)
- exception
- user defined values
- smart pointer
- associative container
- sequence container

We should create an enumeration, say =value_types= which only values
have and then collapse all these types into value. These concepts
don't really exist at the SML level.

**** COMPLETED Convert exceptions into value type objects             :story:
     CLOSED: [2013-06-10 Mon 20:12]
     CLOCK: [2013-06-10 Mon 19:35]--[2013-06-10 Mon 20:00] =>  0:25
     CLOCK: [2013-06-10 Mon 08:32]--[2013-06-10 Mon 08:42] =>  0:10
     CLOCK: [2013-06-10 Mon 07:48]--[2013-06-10 Mon 08:15] =>  0:27
     CLOCK: [2013-06-10 Mon 00:22]--[2013-06-10 Mon 00:47] =>  0:25
     CLOCK: [2013-06-10 Mon 00:10]--[2013-06-10 Mon 00:22] =>  0:12
     CLOCK: [2013-06-09 Sun 17:47]--[2013-06-09 Sun 18:04] =>  0:17
     CLOCK: [2013-06-09 Sun 00:51]--[2013-06-09 Sun 01:59] =>  1:08

**** COMPLETED Convert enumerations into value type objects           :story:
     CLOSED: [2013-06-11 Tue 00:07]
     CLOCK: [2013-06-10 Mon 22:29]--[2013-06-11 Tue 00:07] =>  1:38

**** COMPLETED Convert primitives into value type objects             :story:
     CLOSED: [2013-06-11 Tue 18:33]
     CLOCK: [2013-06-11 Tue 18:26]--[2013-06-11 Tue 18:32] =>  0:06
     CLOCK: [2013-06-11 Tue 08:24]--[2013-06-11 Tue 08:31] =>  0:07
     CLOCK: [2013-06-11 Tue 07:47]--[2013-06-11 Tue 08:16] =>  0:29

**** CANCELLED Convert pods into entities, values or services         :story:
     CLOCK: [2013-06-12 Wed 18:13]--[2013-06-12 Wed 18:42] =>  0:29
     CLOCK: [2013-06-12 Wed 18:00]--[2013-06-12 Wed 18:10] =>  0:10
     CLOCK: [2013-06-12 Wed 08:31]--[2013-06-12 Wed 08:40] =>  0:09
     CLOCK: [2013-06-12 Wed 07:56]--[2013-06-12 Wed 08:15] =>  0:19
     CLOCK: [2013-06-11 Tue 19:44]--[2013-06-11 Tue 20:04] =>  0:20
     CLOCK: [2013-06-11 Tue 18:48]--[2013-06-11 Tue 19:20] =>  0:32
     CLOCK: [2013-06-11 Tue 18:42]--[2013-06-11 Tue 18:45] =>  0:03

*** COMPLETED Break down SML into concepts at the design level        :story:
    CLOSED: [2013-06-17 Mon 07:54]
    CLOCK: [2013-06-04 Tue 23:09]--[2013-06-04 Tue 23:54] =>  0:45
    CLOCK: [2013-06-04 Tue 22:29]--[2013-06-04 Tue 23:09] =>  0:40
    CLOCK: [2013-06-04 Tue 20:33]--[2013-06-04 Tue 20:35] =>  0:02

We should use the types in eCore as a starting point for breaking down
the model into concepts. We should have a hierarchy of concepts where
applicable. Things that need to be modeled as concepts:

- UniquelyIdentifiable: type has can be uniquely identified by its
  qualified name.
- Documentable: type can be documented.
- Parameterisable: type supports pass-through parameters
  (implementation specific parameters).
- Generatable: type has different properties with respect to
  generation.
- ModelElement: refinement of UniquelyIdentifiable, Documentable,
  Parameterisable. Modeled by =sml::model=.
- GeneratableModelElement: refinement of ModelElement and
  Generatable. Modeled by =sml::enumeration=, =sml::exception=, etc.
- Inheritable: type provides support for inheritance.
- Stateful: type has properties.
- Operatable: type has methods (operations).
- Object: refinement of GeneratableModelElement, Stateful and
  Operatable. At present modeled by =sml::pod=. In the future:
  =sml::value=, =sml::entity=, =sml::service=, =sml::repository=,
  =sml::factory=. =sml::versioned_key=, =sml::unversioned_key=,
  =sml::concept=.

*** COMPLETED Add initial support for concepts at the SML level       :story:
    CLOSED: [2013-06-17 Mon 07:53]
    CLOCK: [2013-06-08 Sat 23:35]--[2013-06-09 Sun 00:51] =>  1:16
    CLOCK: [2013-06-08 Sat 23:18]--[2013-06-08 Sat 23:35] =>  0:17
    CLOCK: [2013-05-08 Wed 07:47]--[2013-05-08 Wed 07:59] =>  0:12

A concept is just like a pod, except its stereotype is
=concept=. Types can then "model" a given concept by having it as
their stereotype. This effectively results in merging all the
properties of the concept into the type. The concept has no
representation in code, its only a diagram/SML thing.

Concepts will solve the problems in SML with pods, etc where we didn't
want to use inheritance to avoid tight coupling - but at the same time
its annoying to have to repeat the same properties in lots of
different places: name, documentation, implementation specific
parameters, etc. We could create concepts for these: =named=,
=documented=, etc. and then use them as stereotypes in the affected
types, removing the need for duplication.

Conceivably one could imagine defining boost concept check rules for
these concepts but at present there is no need for this.

In terms of implementation, we need a string container for these
concepts and a way of resolving the stereotype into a qname.

**** COMPLETED Create a new class called concept which mirrors pod
     CLOSED: [2013-06-08 Sat 23:35]
**** COMPLETED Add support for multiple inheritance in concepts
     CLOSED: [2013-06-08 Sat 23:35]
**** COMPLETED Add concepts to model
     CLOSED: [2013-06-08 Sat 23:35]
**** COMPLETED Add concepts to base type
     CLOSED: [2013-06-08 Sat 23:35]
*** CANCELLED Move services into their own type                       :story:
    CLOSED: [2013-06-17 Mon 07:54]
    CLOCK: [2013-06-04 Tue 18:32]--[2013-06-04 Tue 18:38] =>  0:06

Continuing from previous iteration, see description in Sprint 26.

**** IMPLEMENTATION Move all of the existing pod code to use new type

*** CANCELLED Use explicit casting for versioned to unversioned conversions :story:
    CLOSED: [2013-06-17 Mon 07:54]

Continuing from previous iteration, see description in Sprint 26.

*** CANCELLED Add =extract_key= function                              :story:
    CLOSED: [2013-06-17 Mon 07:54]

Continuing from previous iteration, see description in Sprint 26.

** Deprecated Development Stories
