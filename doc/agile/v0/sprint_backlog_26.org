#+title: Sprint Backlog 26
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Stories

This file contains all stories that were closed during sprint 26.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2014-05-27 Tue 13:02]

| Headline                                                                | Time    |       |       |
|-------------------------------------------------------------------------+---------+-------+-------|
| *Total time*                                                            | *37:31* |       |       |
|-------------------------------------------------------------------------+---------+-------+-------|
| Development Stories Implemented                                         |         | 37:31 |       |
| COMPLETED Sprint and product backlog grooming                           |         |       |  1:08 |
| COMPLETED Fix build break on visitor tests                              |         |       |  0:32 |
| COMPLETED Remove workflow aspects from transformer                      |         |       |  2:23 |
| COMPLETED Add tests for profiler                                        |         |       |  1:56 |
| COMPLETED Re-implement key support                                      |         |       |  4:03 |
| COMPLETED Add injector tests                                            |         |       |  1:15 |
| COMPLETED Add doxygen comments to keys and version                      |         |       |  0:10 |
| COMPLETED Sort issues with SATA port in lorenz                          |         |       |  1:50 |
| COMPLETED Add tests for aggregate root stereotype                       |         |       |  0:23 |
| COMPLETED Refactor SML diagram                                          |         |       |  1:04 |
| COMPLETED Add code generation links to =README=                         |         |       |  0:25 |
| COMPLETED Remove view model namespace and postfix                       |         |       |  3:26 |
| CANCELLED Clean up the SML to C++ transformer                           |         |       | 13:23 |
| CANCELLED Move services into their own type                             |         |       |  3:22 |
| CANCELLED Use explicit casting for versioned to unversioned conversions |         |       |  1:49 |
| CANCELLED Add =extract_key= function                                    |         |       |  0:22 |
#+end:

*** COMPLETED Sprint and product backlog grooming                      :task:
    CLOSED: [2013-05-19 Sun 21:51]
    CLOCK: [2013-05-16 Thu 18:40]--[2013-05-16 Thu 19:05] =>  0:25
    CLOCK: [2013-05-16 Thu 18:26]--[2013-05-16 Thu 18:30] =>  0:04
    CLOCK: [2013-05-16 Thu 18:22]--[2013-05-16 Thu 18:26] =>  0:04
    CLOCK: [2013-05-16 Thu 08:30]--[2013-05-16 Thu 08:40] =>  0:10
    CLOCK: [2013-05-16 Thu 07:50]--[2013-05-16 Thu 08:15] =>  0:25

*** COMPLETED Fix build break on visitor tests                        :story:
    CLOSED: [2013-05-07 Tue 08:36]
    CLOCK: [2013-05-07 Tue 08:32]--[2013-05-07 Tue 08:36] =>  0:04
    CLOCK: [2013-05-07 Tue 07:47]--[2013-05-07 Tue 08:15] =>  0:28

We have occasional test failures due to reordering of the types list
in the visitor view model. Not quite sure why the ordering keeps on
changing as the underlying processes all seem ordered. At any rate, we
need a quick fix for this to get the builds green consistent and stop
the traffic lighting. Do a quick hack and sort the types container
when generating the visitor view model.

*** COMPLETED Remove workflow aspects from transformer                :story:
    CLOSED: [2013-05-08 Wed 08:34]
    CLOCK: [2013-05-08 Wed 08:25]--[2013-05-08 Wed 08:34] =>  0:09
    CLOCK: [2013-05-08 Wed 08:23]--[2013-05-08 Wed 08:24] =>  0:01
    CLOCK: [2013-05-08 Wed 08:02]--[2013-05-08 Wed 08:18] =>  0:16
    CLOCK: [2013-05-07 Tue 22:46]--[2013-05-08 Wed 00:18] =>  1:32
    CLOCK: [2013-05-07 Tue 18:30]--[2013-05-07 Tue 18:50] =>  0:20
    CLOCK: [2013-05-07 Tue 18:25]--[2013-05-07 Tue 18:30] =>  0:05

When we created transformer, we added profiling and validation into
it, simply because it was easier. However, the right thing to do is to
move that code into workflow and leave it only with its core
responsibilities (i.e. to transform processed objects into SML
objects). To do so we need to refactor the visitor to take a function
instead of a transformer interface - which is now no longer
required.

**** COMPLETED Update code
     CLOSED: [2013-05-08 Wed 00:19]
**** COMPLETED Update diagram
     CLOSED: [2013-05-08 Wed 08:30]
*** COMPLETED Add tests for profiler                                  :story:
    CLOSED: [2013-05-09 Thu 08:57]
    CLOCK: [2013-05-09 Thu 08:46]--[2013-05-09 Thu 08:57] =>  0:11
    CLOCK: [2013-05-09 Thu 07:37]--[2013-05-09 Thu 08:40] =>  1:03
    CLOCK: [2013-05-08 Wed 18:28]--[2013-05-08 Wed 18:41] =>  0:13
    CLOCK: [2013-05-08 Wed 18:22]--[2013-05-08 Wed 18:28] =>  0:06
    CLOCK: [2013-05-08 Wed 18:04]--[2013-05-08 Wed 18:10] =>  0:06
    CLOCK: [2013-05-07 Tue 18:07]--[2013-05-07 Tue 18:24] =>  0:17

We don't seem to have any specs testing the conversion of a dia object
to an object profile. Although its fairly trivial, we should still
have minimum tests.

*** COMPLETED Move all of the versioning, entity, key tests to stereotypes :story:
    CLOSED: [2013-05-11 Sat 03:40]

- remove versioning from all other models such as std::model, etc.
- add tests for =std::unordered=, maps etc.

*** COMPLETED Re-implement key support                                :story:
    CLOSED: [2013-05-11 Sat 04:03]

- create a new stereotype of keyed. when set, it results in the
  creation of a new class containing all properties marked as
  identity. if none are found, throw. only entities can be keyed.
- create new stand alone function =extract_key=. given an instance of
  a class, it returns the corresponding key. it should be defined in
  the same file as the key.
- if versioned, also create versioned key class. add typedefs in class
  for versioned key.

Rules:

- entities must have at least one KEY_ATTRIBUTE
- keyed pods must be entities.
- unversioned keyed entities will have unversioned keys.
- versioned keyed entities will have versioned keys.
- values can be versioned.

**** COMPLETED Propagate key attribute to SML
     CLOSED: [2013-05-10 Fri 08:16]
     CLOCK: [2013-05-10 Fri 08:10]--[2013-05-10 Fri 08:16] =>  0:06
     CLOCK: [2013-05-07 Tue 18:02]--[2013-05-07 Tue 18:07] =>  0:05
     CLOCK: [2013-05-07 Tue 17:46]--[2013-05-07 Tue 17:56] =>  0:10

**** CANCELLED Ensure entities have at least one key attribute defined
     CLOSED: [2013-05-10 Fri 08:17]

This work will be part of adding a validator to SML.

**** COMPLETED Remove =disable_versioning=
     CLOSED: [2013-05-10 Fri 19:58]
     CLOCK: [2013-05-10 Fri 18:25]--[2013-05-10 Fri 18:40] =>  0:15
     CLOCK: [2013-05-10 Fri 08:27]--[2013-05-10 Fri 08:36] =>  0:09

For some unexplained reason there is a switch that disables versioning
altogether. This seems like a bad idea since its overriding the
definitions made inside the model, potentially generating invalid
models - for instance if a model makes reference to a key, it will no
longer work. Not quite sure what was the original intention but as its
stands this is not a useful feature, so remove it across the board.

**** COMPLETED Implement new key generation and remove legacy code
     CLOSED: [2013-05-11 Sat 03:28]
     CLOCK: [2013-05-11 Sat 00:54]--[2013-05-11 Sat 03:28] =>  2:34
     CLOCK: [2013-05-11 Sat 00:40]--[2013-05-11 Sat 00:54] =>  0:14
     CLOCK: [2013-05-11 Sat 00:14]--[2013-05-11 Sat 00:22] =>  0:08

Do not generate versioned/unversioned keys for entities.

**** COMPLETED Add =std::string= identity scenario to =std_model=
     CLOSED: [2013-05-11 Sat 03:33]
**** COMPLETED Add pod identity scenario to stereotypes model
     CLOSED: [2013-05-11 Sat 03:51]
     CLOCK: [2013-05-11 Sat 03:38]--[2013-05-11 Sat 03:50] =>  0:12
     CLOCK: [2013-05-11 Sat 03:28]--[2013-05-11 Sat 03:38] =>  0:10

*** COMPLETED Add injector tests                                      :story:
    CLOSED: [2013-05-11 Sat 16:07]
    CLOCK: [2013-05-11 Sat 15:34]--[2013-05-11 Sat 16:07] =>  0:33
    CLOCK: [2013-05-11 Sat 04:03]--[2013-05-11 Sat 04:45] =>  0:42

*** COMPLETED Add doxygen comments to keys and version                :story:
    CLOSED: [2013-05-11 Sat 16:23]
    CLOCK: [2013-05-11 Sat 16:13]--[2013-05-11 Sat 16:23] =>  0:10

*** COMPLETED Sort issues with SATA port in lorenz                    :spike:
    CLOSED: [2013-05-12 Sun 00:11]
    CLOCK: [2013-05-07 Tue 22:00]--[2013-05-07 Tue 23:50] =>  1:50

*** COMPLETED Add aggregate root stereotype                           :story:
    CLOSED: [2013-05-16 Thu 07:52]

We need to re-read DDD to see if there is anything dogen can do for us
other than marking the type as aggregate root. Evans states that its
the job of the aggregate root to perform validation; perhaps we could
automatically generate a =validator= for the root that has to be
implemented by the user.

*** COMPLETED Add tests for aggregate root stereotype                 :story:
    CLOSED: [2013-05-12 Sun 00:53]
    CLOCK: [2013-05-12 Sun 00:36]--[2013-05-12 Sun 00:59] =>  0:23

We added support for aggregate root at the SML level but never
finished hooking up things properly. Add a test for it and fix any problems.

*** COMPLETED Refactor SML diagram                                    :spike:
    CLOSED: [2013-05-12 Sun 00:09]
    CLOCK: [2013-05-12 Sun 01:00]--[2013-05-12 Sun 01:03] =>  0:03
    CLOCK: [2013-05-12 Sun 00:24]--[2013-05-12 Sun 00:35] =>  0:11
    CLOCK: [2013-05-12 Sun 00:13]--[2013-05-12 Sun 00:24] =>  0:11
    CLOCK: [2013-05-11 Sat 23:30]--[2013-05-12 Sun 00:09] =>  0:39

SML has gotten really messy and very hard to understand. Do a general tidy-up.

*** COMPLETED Add code generation links to =README=                   :spike:
    CLOSED: [2013-05-12 Sun 19:14]
    CLOCK: [2013-05-12 Sun 18:30]--[2013-05-12 Sun 18:55] =>  0:25

Since we are already looking into C++ meta models, might as well
update the main readme with the links we find.

*** COMPLETED Remove view model namespace and postfix                 :spike:
    CLOSED: [2013-05-13 Mon 20:04]
    CLOCK: [2013-05-12 Sun 20:59]--[2013-05-12 Sun 22:00] =>  1:01
    CLOCK: [2013-05-12 Sun 20:10]--[2013-05-12 Sun 20:58] =>  0:48
    CLOCK: [2013-05-12 Sun 19:30]--[2013-05-12 Sun 20:10] =>  0:40

Part of the required surgery to the C++ model.

Remove view model namespace and postfix. These are just types at the
c++ model level and don't need any further qualifications. For types
where the name is a C++ keyword (e.g. =class=, =namespace=), create a
well known prefix like eCore. Question is what prefix to use.

**** COMPLETED Move types to top-level namespace
     CLOSED: [2013-05-12 Sun 22:00]
**** COMPLETED Replace =_view_models= post-fix with =info=
     CLOSED: [2013-05-12 Sun 22:00]

**** COMPLETED Rename =vm= variables and any remaining reference to view model
     CLOSED: [2013-05-13 Mon 20:04]
     CLOCK: [2013-05-13 Mon 19:50]--[2013-05-13 Mon 20:04] =>  0:14
     CLOCK: [2013-05-13 Mon 19:21]--[2013-05-13 Mon 19:25] =>  0:04
     CLOCK: [2013-05-13 Mon 18:16]--[2013-05-13 Mon 18:35] =>  0:19
     CLOCK: [2013-05-13 Mon 18:06]--[2013-05-13 Mon 18:16] =>  0:10
     CLOCK: [2013-05-13 Mon 17:50]--[2013-05-13 Mon 18:00] =>  0:10

*** CANCELLED Clean up the SML to C++ transformer                     :spike:
    CLOSED: [2013-05-19 Sun 21:51]
    CLOCK: [2013-05-13 Mon 23:04]--[2013-05-14 Tue 00:08] =>  1:04
    CLOCK: [2013-05-13 Mon 23:00]--[2013-05-13 Mon 23:04] =>  0:04

Original story:

- split graph from transformer, split visitor from transformer, etc.
- file view model has a silly approach for the containing view models:
  we keep on adding more optional member variables. We should probably
  create a base class for all of these view models and have a single
  property for it. Then use the =visitor= stereotype to dispatch.

More detailed analysis:

Instead of using unordered maps to cache processed types we should
just reprocess them. This would mean we could async the processing
without any need for locking, etc. It also makes testing a lot
easier. We should also look into the need to pass in a model into the
transformer. At present it only seems useful to determine container
types; if that is the case, we could pass in a simple qname to enum
container that only has container types in it.

**** COMPLETED Create skeleton for transformer and specs
     CLOSED: [2013-05-14 Tue 18:18]
     CLOCK: [2013-05-14 Tue 07:47]--[2013-05-14 Tue 08:13] =>  0:26

**** COMPLETED Create a content descriptor
     CLOSED: [2013-05-15 Wed 08:31]
     CLOCK: [2013-05-15 Wed 07:47]--[2013-05-15 Wed 08:17] =>  0:30

We need to aggregate the common enumerations that are used to describe
a file into a class. This is kind of what location request does expect
its too specific to locator. We need something more generic so that
both locator and transformer can use it, and potentially even file
info.

Its difficult to name this type as it is a bit of a mixed bag of
attributes, but in general its job is to describe the contents of a
file so we'll go with =content_descriptor=.

**** COMPLETED Add support for enumeration transformation
     CLOSED: [2013-05-19 Sun 00:35]
     CLOCK: [2013-05-18 Sat 23:31]--[2013-05-19 Sun 00:35] =>  1:04
     CLOCK: [2013-05-15 Wed 22:42]--[2013-05-15 Wed 23:33] =>  0:51
     CLOCK: [2013-05-15 Wed 22:35]--[2013-05-15 Wed 22:42] =>  0:07
     CLOCK: [2013-05-15 Wed 21:30]--[2013-05-15 Wed 22:13] =>  0:43
     CLOCK: [2013-05-15 Wed 18:14]--[2013-05-15 Wed 18:42] =>  0:28
     CLOCK: [2013-05-15 Wed 17:59]--[2013-05-15 Wed 18:06] =>  0:07
     CLOCK: [2013-05-15 Wed 17:56]--[2013-05-15 Wed 17:58] =>  0:02
     CLOCK: [2013-05-15 Wed 08:31]--[2013-05-15 Wed 08:42] =>  0:11
     CLOCK: [2013-05-14 Tue 23:59]--[2013-05-15 Wed 00:08] =>  0:09
     CLOCK: [2013-05-14 Tue 22:10]--[2013-05-14 Tue 23:59] =>  1:49
     CLOCK: [2013-05-14 Tue 18:43]--[2013-05-14 Tue 19:03] =>  0:20
     CLOCK: [2013-05-14 Tue 18:32]--[2013-05-14 Tue 18:37] =>  0:05
     CLOCK: [2013-05-14 Tue 18:19]--[2013-05-14 Tue 18:26] =>  0:07

The previous transformer took on far too many responsibilities. We
need to create a transformer that does only transformation and all the
workflow aspects must be extracted from it. It must not know about
enabled facets, must not create all the file infos or keep state. This
will also make async'ing it very easy because there is no shared
state.

**** COMPLETED Add support for exception transformation
     CLOSED: [2013-05-19 Sun 00:46]
     CLOCK: [2013-05-19 Sun 00:38]--[2013-05-19 Sun 00:46] =>  0:08

**** COMPLETED Add support for package transformation
     CLOSED: [2013-05-19 Sun 02:04]
     CLOCK: [2013-05-19 Sun 01:53]--[2013-05-19 Sun 02:04] =>  0:11
     CLOCK: [2013-05-19 Sun 00:47]--[2013-05-19 Sun 01:10] =>  0:23
**** COMPLETED Add tests for external package path
     CLOSED: [2013-05-19 Sun 02:18]
     CLOCK: [2013-05-19 Sun 02:04]--[2013-05-19 Sun 02:22] =>  0:18

**** COMPLETED Add support for pod transformation
     CLOSED: [2013-05-19 Sun 21:50]
     CLOCK: [2013-05-19 Sun 21:20]--[2013-05-19 Sun 21:49] =>  0:29
     CLOCK: [2013-05-19 Sun 20:32]--[2013-05-19 Sun 21:17] =>  0:45
     CLOCK: [2013-05-19 Sun 19:20]--[2013-05-19 Sun 20:32] =>  1:12
     CLOCK: [2013-05-19 Sun 12:59]--[2013-05-19 Sun 13:12] =>  0:13
     CLOCK: [2013-05-19 Sun 12:12]--[2013-05-19 Sun 12:38] =>  0:26
     CLOCK: [2013-05-19 Sun 02:35]--[2013-05-19 Sun 03:33] =>  0:58
     CLOCK: [2013-05-19 Sun 02:22]--[2013-05-19 Sun 02:35] =>  0:13

*** CANCELLED Move services into their own type                  :story:
    CLOCK: [2013-05-12 Sun 19:15]--[2013-05-12 Sun 19:30] =>  0:15
    CLOCK: [2013-05-12 Sun 18:55]--[2013-05-12 Sun 19:15] =>  0:20
    CLOCK: [2013-05-12 Sun 01:07]--[2013-05-12 Sun 03:54] =>  2:47

At present we have piggy-backed on pods to define services. This was
fine as long as services remained pretty basic, but now there is a
need to start generating system services; this would mean adding
attributes to pods that would have different semantics depending on
the =pod_type=. Instead, clean things up by adding a new top-level
class for services.

**** COMPLETED Add new type to SML to represent services
     CLOSED: [2013-05-12 Sun 19:30]
**** IMPLEMENTATION Move all of the existing pod code to use new type

*** CANCELLED Use explicit casting for versioned to unversioned conversions :story:
    CLOCK: [2013-05-11 Sat 23:06]--[2013-05-11 Sat 23:30] =>  0:24
    CLOCK: [2013-05-11 Sat 16:27]--[2013-05-11 Sat 16:29] =>  0:02
    CLOCK: [2013-05-11 Sat 15:06]--[2013-05-11 Sat 15:13] =>  0:07
    CLOCK: [2012-11-22 Thu 08:44]--[2012-11-22 Thu 09:20] =>  0:36

At present we have to_versioned; in reality this would be dealt much
better using explicit casts:

: explicit operator std::string() { return "explicit"; }

Actually the real solution for this is to make the versioned key
contain the unversioned key; then dogen will generate all the
required code.

At this point in time we do not have enough use cases to make the
correct design decisions in this area. We need to wait until we start
using keys in anger in Creris and then design the API around the use
cases.

It is not possible to use global cast operators so we need to
introduce a dependency between versioned and unversioned keys in order
for this to work.

**** COMPLETED Link pod to its versioned and unversioned keys
     CLOSED: [2013-05-11 Sat 17:11]
     CLOCK: [2013-05-11 Sat 16:54]--[2013-05-11 Sat 17:11] =>  0:17
     CLOCK: [2013-05-11 Sat 16:31]--[2013-05-11 Sat 16:54] =>  0:23

Also link versioned key to unversioned key.

*** CANCELLED Add =extract_key= function                         :story:
    CLOCK: [2013-05-11 Sat 15:24]--[2013-05-11 Sat 15:34] =>  0:10
    CLOCK: [2013-05-11 Sat 15:20]--[2013-05-11 Sat 15:24] =>  0:04
    CLOCK: [2013-05-11 Sat 03:55]--[2013-05-11 Sat 04:03] =>  0:08

We need a way to automatically extract a key for a pod. To do so
create a utility file with a method that extracts keys for a type. We
need to create a new aspect for this.

The right solution is to create pods at the SML level to represent
this concept. If we do that we get all of the includer etc work for
free. For that we need to add new category types:

- visitor
- key_extractor

Injector creates pods for these just like it does with keys; the view
model transformer intercepts them and generates the correct view
models.

** Deprecated Development Stories
