#+title: Sprint Backlog 41
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Stories

This file contains all stories that were closed during sprint 41.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2014-05-27 Tue 13:05]

| Headline                                                      | Time    |       |       |
|---------------------------------------------------------------+---------+-------+-------|
| *Total time*                                                  | *44:36* |       |       |
|---------------------------------------------------------------+---------+-------+-------|
| Development Stories Implemented                               |         | 44:36 |       |
| COMPLETED Sprint and product backlog grooming                 |         |       |  1:27 |
| COMPLETED Use relationship container for visitors             |         |       |  1:13 |
| COMPLETED Create an =association_indexer= and add tests       |         |       |  8:20 |
| COMPLETED Remove model from extractor                         |         |       |  0:16 |
| COMPLETED Fix boost variant errors with boost 1.54            |         |       |  4:19 |
| COMPLETED Fix doxygen's main page documentation               |         |       |  1:03 |
| COMPLETED Compile code without PFH                            |         |       | 12:47 |
| COMPLETED CDash is not reporting builds                       |         |       |  0:45 |
| COMPLETED Reduce the number of valgrind errors back to normal |         |       |  0:43 |
| COMPLETED Update read me file                                 |         |       |  0:51 |
| COMPLETED Start using PGPASSWORD for database model           |         |       |  0:40 |
| COMPLETED Fix broken builds due to a variety of errors        |         |       |  3:39 |
| COMPLETED Add om's workflow to engine                         |         |       |  8:33 |
#+end:

*** COMPLETED Sprint and product backlog grooming                      :task:
    CLOSED: [2013-12-29 Sun 23:05]
    CLOCK: [2013-12-29 Sun 21:33]--[2013-12-29 Sun 21:43] =>  0:10
    CLOCK: [2013-12-29 Sun 10:22]--[2013-12-29 Sun 10:40] =>  0:18
    CLOCK: [2013-12-28 Sat 15:57]--[2013-12-28 Sat 16:02] =>  0:05
    CLOCK: [2013-12-26 Thu 22:35]--[2013-12-26 Thu 22:46] =>  0:11
    CLOCK: [2013-12-23 Mon 14:40]--[2013-12-23 Mon 14:45] =>  0:05
    CLOCK: [2013-12-23 Mon 14:32]--[2013-12-23 Mon 14:40] =>  0:08
    CLOCK: [2013-12-23 Mon 14:21]--[2013-12-23 Mon 14:32] =>  0:11
    CLOCK: [2013-12-18 Wed 07:56]--[2013-12-18 Wed 08:11] =>  0:15
    CLOCK: [2013-12-16 Mon 07:55]--[2013-12-16 Mon 07:59] =>  0:04

Updates to sprint and product backlog.

*** COMPLETED Use relationship container for visitors                 :story:
    CLOSED: [2013-12-16 Mon 18:29]
    CLOCK: [2013-12-16 Mon 18:10]--[2013-12-16 Mon 18:29] =>  0:19
    CLOCK: [2013-12-16 Mon 17:50]--[2013-12-16 Mon 18:03] =>  0:13
    CLOCK: [2013-12-16 Mon 07:59]--[2013-12-16 Mon 08:40] =>  0:41

We need to store the two-way relationships related to visitation.

*** COMPLETED Create an =association_indexer= and add tests           :story:
    CLOSED: [2013-12-20 Fri 22:48]

We need an indexer that specialises in associations.

**** COMPLETED Remove unnecessary extractor methods                   :spike:
     CLOSED: [2013-12-16 Mon 23:35]
     CLOCK: [2013-12-16 Mon 23:28]--[2013-12-16 Mon 23:35] =>  0:07

We forgot to remove some methods in extractor that are no longer
necessary:

- properties for concept: we have done concept and property expansion
  now, so all we need to do is to look at local properties.
- extract inheritance graph: no one is using this functionality.

Get rid of these methods to avoid confusing the analysis for
association indexer.

**** COMPLETED Create the class skeleton with tests                    :task:
     CLOSED: [2013-12-17 Tue 00:10]
     CLOCK: [2013-12-16 Mon 23:01]--[2013-12-16 Mon 23:28] =>  0:27
     CLOCK: [2013-12-16 Mon 18:30]--[2013-12-16 Mon 18:45] =>  0:15
     CLOCK: [2013-12-13 Fri 18:07]--[2013-12-13 Fri 18:17] =>  0:10
     CLOCK: [2013-12-13 Fri 08:43]--[2013-12-13 Fri 08:48] =>  0:05

Add the association indexer class and associated test.

**** COMPLETED Mock models with properties have missing types         :spike:
     CLOSED: [2013-12-17 Tue 11:43]
     CLOCK: [2013-12-17 Tue 11:25]--[2013-12-17 Tue 11:43] =>  0:18
     CLOCK: [2013-12-17 Tue 11:12]--[2013-12-17 Tue 11:25] =>  0:13

It seems we do not always add associated types when we create mock
models that have objects with properties; in a lot of cases, we add
the property without also adding the types the property requires. This
is a problem for the association indexer.

**** COMPLETED Mock models do not perform property expansion correctly :spike:
     CLOSED: [2013-12-17 Tue 19:52]
     CLOCK: [2013-12-17 Tue 19:40]--[2013-12-17 Tue 19:57] =>  0:17
     CLOCK: [2013-12-17 Tue 12:03]--[2013-12-17 Tue 12:07] =>  0:04
     CLOCK: [2013-12-17 Tue 11:55]--[2013-12-17 Tue 12:03] =>  0:08

When the property indexing flag is set, one expects all objects that
model concepts to have the properties copied across to the local
properties container. However, we only add the relationship without
copying.

**** COMPLETED Implement class and add unit tests                      :task:
     CLOSED: [2013-12-19 Thu 23:42]
     CLOCK: [2013-12-19 Thu 22:50]--[2013-12-19 Thu 23:42] =>  0:52
     CLOCK: [2013-12-19 Thu 17:52]--[2013-12-19 Thu 18:38] =>  0:46
     CLOCK: [2013-12-18 Wed 08:28]--[2013-12-18 Wed 08:42] =>  0:14
     CLOCK: [2013-12-18 Wed 08:11]--[2013-12-18 Wed 08:28] =>  0:17
     CLOCK: [2013-12-18 Wed 07:55]--[2013-12-18 Wed 07:56] =>  0:01
     CLOCK: [2013-12-17 Tue 11:44]--[2013-12-17 Tue 11:47] =>  0:03
     CLOCK: [2013-12-17 Tue 10:49]--[2013-12-17 Tue 10:52] =>  0:03
     CLOCK: [2013-12-16 Mon 23:35]--[2013-12-17 Tue 00:10] =>  0:35

Missing tests:

- object with multiple properties of different types, no duplicates
- object with multiple properties of different types, duplicates
- object with operation with single parameter
- object with operation with multiple parameters
- object with operation with return type
- object with different types of nested qualified names

**** COMPLETED Plug into workflow                                      :task:
     CLOSED: [2013-12-19 Thu 23:53]
     CLOCK: [2013-12-19 Thu 23:43]--[2013-12-19 Thu 23:53] =>  0:10

Unexpectedly, nothing to rebaseline. this is because engine specs
compare the code generator output rather than the contents of the SML
model and relationships are not yet expressed in code.

**** COMPLETED Copy across applicable extractor tests                 :spike:
     CLOSED: [2013-12-20 Fri 18:23]
     CLOCK: [2013-12-20 Fri 17:43]--[2013-12-20 Fri 18:23] =>  0:40
     CLOCK: [2013-12-20 Fri 07:38]--[2013-12-20 Fri 08:24] =>  0:46

We appear to have forgotten to copy the extractor tests that make
sense for the association indexer.

**** COMPLETED Start using indexed associations                        :task:
     CLOSED: [2013-12-20 Fri 22:48]
     CLOCK: [2013-12-20 Fri 22:12]--[2013-12-20 Fri 22:47] =>  0:35
     CLOCK: [2013-12-20 Fri 20:58]--[2013-12-20 Fri 22:12] =>  1:14

Update extractor to use new indexed data.

*** COMPLETED Remove model from extractor                             :spike:
    CLOSED: [2013-12-21 Sat 11:36]
    CLOCK: [2013-12-21 Sat 11:20]--[2013-12-21 Sat 11:36] =>  0:16

We do not need a model in extractor any more now that all required
information is already indexed.

*** COMPLETED Make EOS support optional                               :story:
    CLOSED: [2013-12-23 Mon 17:22]

With the release of boost 1.54 We can almost compile dogen with a
vanilla boost. once we make ODB optional, the only blocker would be
EOS. We should make it optional too. This is not so easy because it
would break the tests as the output is expected to contain EOS
stuff. Perhaps we should consider removing it altogether?

Fixed as part of the PFH work.

*** COMPLETED Make ODB support optional                               :story:
    CLOSED: [2013-12-30 Mon 10:53]

We should be able to build dogen without ODB. It would still generate
all the ODB headers etc, but the database test model would not be
compiled. This would be useful to reduce the number of dependencies.

*** COMPLETED Fix spelling of =rountrip_type=                         :story:
    CLOSED: [2013-12-23 Mon 18:07]

Should be =roundtrip_type=.

*** COMPLETED Fix boost variant errors with boost 1.54                :story:
    CLOSED: [2013-12-25 Wed 11:59]
    CLOCK: [2013-12-24 Tue 11:12]--[2013-12-24 Tue 13:33] =>  2:21
    CLOCK: [2013-12-24 Tue 10:43]--[2013-12-24 Tue 11:12] =>  0:29
    CLOCK: [2013-12-24 Tue 09:14]--[2013-12-24 Tue 10:43] =>  1:29

New understanding: the problem appears to be with boost 1.55;
compiling with g++-4.7 revealed the same errors. The root cause of the
problem appears to be some changes in boost 1.54 as described [[http://lists.boost.org/boost-users/2013/08/79650.php][here]]. It
seems like the easiest thing is to require boost 1.55, but the problem
is a lot of distributions are shipping with 1.54 and there are no debs
for 1.55 so we can't even tell if the changes to build without PFH
have worked.

Previous understanding: When we compile with stable gcc we get errors
in the boost model. They appear to be related to using variants with
multiple primitive types such as int and double. We should try to
change the model to use only one primitive type and see if it compiles
with G++ 4.8.

*** COMPLETED Fix doxygen's main page documentation                   :story:
    CLOSED: [2013-12-26 Thu 22:29]
    CLOCK: [2013-12-26 Thu 22:05]--[2013-12-26 Thu 22:29] =>  0:24
    CLOCK: [2013-12-26 Thu 21:49]--[2013-12-26 Thu 22:04] =>  0:15
    CLOCK: [2013-12-25 Wed 12:32]--[2013-12-25 Wed 12:56] =>  0:24

Our main page documentation its awful at the moment - really old and
meaningless. We should either remove it altogether or replace it with
something meaningful.

*** COMPLETED Compile code without PFH                                :story:
    CLOSED: [2013-12-26 Thu 22:42]

Now that boost and the compilers being distributed have all the
features we need, we no longer require PFH. We should get rid of it,
as it will allow users to build dogen more easily.

**** COMPLETED Port code to boost 1.54                                 :task:
     CLOSED: [2013-12-22 Sun 02:48]
     CLOCK: [2013-12-22 Sun 00:30]--[2013-12-22 Sun 02:46] =>  2:16
     CLOCK: [2013-12-21 Sat 16:49]--[2013-12-21 Sat 18:33] =>  1:44

Mainly deal with move from boost log v1 to v2.

**** COMPLETED Deal with other compilation errors                      :task:
     CLOSED: [2013-12-22 Sun 03:05]
     CLOCK: [2013-12-22 Sun 02:48]--[2013-12-22 Sun 03:04] =>  0:16
     CLOCK: [2013-12-22 Sun 02:46]--[2013-12-22 Sun 02:48] =>  0:02

- class_e in boost model cannot have int and double (apparently
  variant can't cope with this).
- we need a way to disable ODB and EOS. this includes header
  validation. See other stories on this.
- we need a way to pick-up local installs of ODB and EOS. this must
  also work so that if there is a boost installed there it would take
  precedence over system install, but system install would be found if
  no other boost is available.
- we need to upgrade turbo to boost 1.54 or even 1.55. ideally we want
  to pick-up any boost after boost log has been added.
- investigate error:

: cp: cannot stat ‘/usr/lib/x86_64-linux-gnu/libpthread.so.1.54.0’: No such file or directory

  story raised for this.

**** COMPLETED Upgrade turbo to boost 1.55                             :task:
     CLOSED: [2013-12-23 Mon 14:29]

The least disruptive way of doing this change is to upgrade boost in
turbo, get all of the PFHs up-to-date and the build green across the
board, and then start removing any PFH specific things from dogen.

***** COMPLETED Upgrade OSX and Linux
      CLOSED: [2013-12-22 Sun 18:41]
      CLOCK: [2013-12-22 Sun 14:07]--[2013-12-22 Sun 14:24] =>  0:17
      CLOCK: [2013-12-22 Sun 13:47]--[2013-12-22 Sun 14:07] =>  0:20
      CLOCK: [2013-12-22 Sun 13:18]--[2013-12-22 Sun 13:47] =>  0:29
      CLOCK: [2013-12-22 Sun 12:27]--[2013-12-22 Sun 13:18] =>  0:51
      CLOCK: [2013-12-22 Sun 11:10]--[2013-12-22 Sun 12:27] =>  1:17

***** COMPLETED Upgrade Windows
      CLOSED: [2013-12-23 Mon 14:29]
      CLOCK: [2013-12-22 Sun 18:54]--[2013-12-22 Sun 18:57] =>  0:03
      CLOCK: [2013-12-22 Sun 17:35]--[2013-12-22 Sun 18:10] =>  0:35

**** COMPLETED Detect PFH and disable system headers                   :task:
     CLOSED: [2013-12-23 Mon 15:11]
     CLOCK: [2013-12-23 Mon 14:46]--[2013-12-23 Mon 15:11] =>  0:25

If PFH is not found we should use system directories for boost.

**** COMPLETED Create features for ODB and EOS                         :task:
     CLOSED: [2013-12-24 Tue 09:13]
     CLOCK: [2013-12-24 Tue 09:00]--[2013-12-24 Tue 09:14] =>  0:14
     CLOCK: [2013-12-23 Mon 19:17]--[2013-12-23 Mon 19:42] =>  0:25

- detect ODB's presence and enable it/disable it accordingly
- detect EOS presence and enable it/disable it accordingly
- create a find EOS cmake script

**** COMPLETED Split EOS from main serialisation test                  :task:
     CLOSED: [2013-12-26 Thu 22:41]

We need a model just for EOS. We also need a command line switch to
enable it (switched off by default).

***** COMPLETED Create a new config option for EOS and default it to false
      CLOSED: [2013-12-23 Mon 18:15]
      CLOCK: [2013-12-23 Mon 16:16]--[2013-12-23 Mon 18:07] =>  1:51
      CLOCK: [2013-12-23 Mon 15:19]--[2013-12-23 Mon 15:22] =>  0:03
      CLOCK: [2013-12-23 Mon 15:14]--[2013-12-23 Mon 15:19] =>  0:05

***** COMPLETED Regenerate all models without EOS
      CLOSED: [2013-12-23 Mon 19:12]
      CLOCK: [2013-12-23 Mon 18:25]--[2013-12-23 Mon 18:54] =>  0:29

***** COMPLETED Create a model to test EOS
      CLOSED: [2013-12-26 Thu 22:41]
      CLOCK: [2013-12-26 Thu 22:29]--[2013-12-26 Thu 22:41] =>  0:12
      CLOCK: [2013-12-26 Thu 22:04]--[2013-12-26 Thu 22:05] =>  0:01
      CLOCK: [2013-12-26 Thu 21:26]--[2013-12-26 Thu 21:49] =>  0:23
      CLOCK: [2013-12-25 Wed 12:01]--[2013-12-25 Wed 12:30] =>  0:29

- actually we should enable it across the board and see if we are
  still failing on non-linux platforms.

*** COMPLETED CDash is not reporting builds                           :spike:
    CLOSED: [2013-12-27 Fri 23:43]
    CLOCK: [2013-12-27 Fri 22:57]--[2013-12-27 Fri 23:42] =>  0:45

For some reason we didn't get any builds at all on CDash. It appears
this is related to disk space issues. Investigate and resolve this
issue so that we can get nightlies on tonight's run.

- perform a [[http://public.kitware.com/Bug/view.php?id%3D13428][CDash cleanup]]
- delete unnecessary files

*** COMPLETED Reduce the number of valgrind errors back to normal     :spike:
    CLOSED: [2013-12-28 Sat 09:32]
    CLOCK: [2013-12-28 Sat 13:50]--[2013-12-28 Sat 14:03] =>  0:13
    CLOCK: [2013-12-28 Sat 09:34]--[2013-12-28 Sat 09:45] =>  0:11
    CLOCK: [2013-12-23 Mon 18:50]--[2013-12-23 Mon 19:09] =>  0:19

With the move to boost log v2 the valgrind numbers increased
astronomically. This appears to be linked to the boost log v2 change,
as there were a number of ignores we had setup for log v1.

With the move to boost log v2 the valgrind numbers increased
astronomically. This appears to be linked to the boost log v2 change,
as there were a number of ignores we had setup for log v1.

*** COMPLETED Update read me file                                     :story:
    CLOSED: [2013-12-28 Sat 13:11]
    CLOCK: [2013-12-28 Sat 14:07]--[2013-12-28 Sat 14:11] =>  0:04
    CLOCK: [2013-12-28 Sat 12:24]--[2013-12-28 Sat 13:11] =>  0:47

The read me is lying on a couple of things, we need to make sure it
reflects the current state of the world.

**** COMPLETED Fix the read me story around binary packages            :task:
     CLOSED: [2013-12-28 Sat 13:11]

We need to tell the truth more clearly around binary packages -
reading the read me its entirely unclear if they are available or not,
or where to get them from.

**** COMPLETED Update read me with compilation instructions            :task:
     CLOSED: [2013-12-28 Sat 13:11]

Packages to install:

: apt-get install libboost1.54-all-dev
: apt-get install cmake

Actually, this is no longer possible as we cannot compile with boost
1.54. We need to wait for 1.55 packages to be available to add the
apt-get instructions.

*** COMPLETED Start using PGPASSWORD for database model               :spike:
    CLOSED: [2013-12-28 Sat 15:58]
    CLOCK: [2013-12-29 Sun 10:40]--[2013-12-29 Sun 10:52] =>  0:12
    CLOCK: [2013-12-28 Sat 15:40]--[2013-12-28 Sat 15:57] =>  0:17
    CLOCK: [2013-12-28 Sat 14:55]--[2013-12-28 Sat 15:06] =>  0:11

As explained in read me:

- setup the environment variable =PGPASSWORD= to match the password
  you have chosen for this user (see [[http://www.postgresql.org/docs/9.1/static/libpq-envars.html][Environment Variables]]).

We need to change the code to match this.

=PGPASSWORD= failed miserably, for reasons not yet
understood. However, according to the docs the right way is
=.pgpass=.

*** COMPLETED Fix broken builds due to a variety of errors            :spike:
    CLOSED: [2013-12-29 Sun 21:41]
    CLOCK: [2013-12-28 Sat 13:35]--[2013-12-28 Sat 13:41] =>  0:06
    CLOCK: [2013-12-28 Sat 11:00]--[2013-12-28 Sat 11:27] =>  0:27
    CLOCK: [2013-12-28 Sat 09:12]--[2013-12-28 Sat 09:30] =>  0:18

We have *a lot* of CDash errors at the moment. We need to get to a
clean build as soon as possible.

**** COMPLETED OSX                                                     :task:
     CLOSED: [2013-12-29 Sun 21:41]

- seems like a EOS linking error. According to comments, we should use
  =NO_EXPLICIT_TEMPLATE_INSTANTIATION=.

- didn't fix it; couldn't get to the bottom of it, so disabling EOS on
  OSX.

**** COMPLETED Linux                                                   :task:
     CLOSED: [2013-12-29 Sun 16:33]

- spec file is not named according to the specs or model. Renamed it.

**** COMPLETED Windows
     CLOSED: [2013-12-29 Sun 21:41]
     CLOCK: [2013-12-29 Sun 19:00]--[2013-12-29 Sun 19:19] =>  0:19
     CLOCK: [2013-12-29 Sun 11:50]--[2013-12-29 Sun 11:58] =>  0:08
     CLOCK: [2013-12-29 Sun 09:52]--[2013-12-29 Sun 10:02] =>  0:10
     CLOCK: [2013-12-28 Sat 23:24]--[2013-12-28 Sat 23:26] =>  0:02
     CLOCK: [2013-12-28 Sat 21:51]--[2013-12-28 Sat 23:20] =>  1:29
     CLOCK: [2013-12-28 Sat 15:00]--[2013-12-28 Sat 15:40] =>  0:40

- we do not seem to be detecting the location of boost
  correctly. Added boost includes to system path.

- problems with wide char:

: e:/usr/local/pfh/include/boost-1_55/boost/log/detail/snprintf.hpp:45:9: error: '::swprintf' has not been declared

  followed [[https://groups.google.com/forum/#!topic/boost-list/ngTvtjdO2ng][this article]], and disabled wide char.

- boost build failed to build context, followed instructions [[https://svn.boost.org/trac/boost/ticket/7262][here]] to
  install =ml.exe= and fixed problem.

- problems with linkage of boost log:

: CMakeFiles/dia_spec.dir/objects.a(equality_spec.cpp.obj):equality_spec.cpp:(.text$_ZN5boost3log9v2_mt_nt56record5resetEv[__ZN5boost3log9v2_mt_nt56record5resetEv]+0x11): undefined reference to `_imp___ZN5boost3log9v2_mt_nt511record_view11public_data7destroyEPKS3_'

  this is not a versioning issue as described [[http://stackoverflow.com/questions/17844085/boost-log-with-cmake-causing-undefined-reference-error/17868918#17868918][here]], since the ABI
  version information is the same on both methods (see [[http://www.boost.org/doc/libs/1_55_0/libs/log/doc/html/log/rationale/namespace_mangling.html][boost log
  docs]]). However, when investigating this noticed that we are using
  static boost on Windows for some reason, so now doing a complete
  build and moving to DLLs first.

- we don't seem to be able to find EOS on windows even though we find
  everything else in the path. Its not particularly clear how we are
  finding the include directory of the PFH on Linux either; read CMake
  manuals and debugged all the relevant variables to no avail. The
  "easy" way out is to try setting =CMAKE_INCLUDE_PATH= and hope for
  the best.

- the makefiles do not handle EOS missing very gracefully either:

: Files/test_model_sanitizer_spec.dir/objects.a(eos_serialization_spec.cpp.obj):eos_serialization_spec.cpp:(.text+0x166): undefined reference to `dogen::eos_serialization::first_class::public_attribute() const'

  this appears to be a typo in makefile.

- linking is failing due to dll import errors:

: e:/usr/local/pfh/include/boost-1_55/boost/archive/impl/basic_binary_iarchive.ipp:36:1: error: function 'void boost::archive::basic_binary_iarchive<Archive>::load_override(boost::archive::class_name_type&, int)' definition is marked dllimport

  this seems related to [[http://code.woboq.org/userspace/boost/boost/archive/detail/decl.hpp.html][this error]]. It may also be remated to adding
  PFH to =CMAKE_INCLUDE_PATH=. Trying =include_directories(SYSTEM...=
  instead.

- couldn't get to the bottom of it, so disabling EOS on windows.

*** COMPLETED Add om's workflow to engine                             :story:
    CLOSED: [2013-12-29 Sun 23:04]

We need to find a way to add the available formatters in om into the
engine workflow, replacing the legacy c++ formatters. With this we can
replace one formatter at a time.

**** COMPLETED Create an om back-end in engine                         :task:
     CLOSED: [2013-12-20 Fri 23:50]
     CLOCK: [2013-12-20 Fri 23:30]--[2013-12-20 Fri 23:50] =>  0:20
     CLOCK: [2013-12-20 Fri 23:26]--[2013-12-20 Fri 23:30] =>  0:04

We need to wrap the =om= workflow in an engine backend.

**** COMPLETED Handle models without meta-data such as licence, etc    :task:
     CLOSED: [2013-12-28 Sat 23:43]
     CLOCK: [2013-12-28 Sat 23:30]--[2013-12-28 Sat 23:43] =>  0:13
     CLOCK: [2013-12-28 Sat 18:15]--[2013-12-28 Sat 19:58] =>  1:43
     CLOCK: [2013-12-28 Sat 16:42]--[2013-12-28 Sat 16:50] =>  0:08
     CLOCK: [2013-12-28 Sat 16:06]--[2013-12-28 Sat 16:41] =>  0:35

At present the om workflow assumes all models have licences, etc. This
is not a valid assumption. We should generate code in the absence of
this meta-data.

**** COMPLETED Start integrating =om= back-end with workflow           :task:
     CLOSED: [2013-12-29 Sun 23:04]
     CLOCK: [2013-12-29 Sun 22:53]--[2013-12-29 Sun 23:04] =>  0:04
     CLOCK: [2013-12-29 Sun 21:45]--[2013-12-29 Sun 22:47] =>  1:02
     CLOCK: [2013-12-29 Sun 16:36]--[2013-12-29 Sun 18:36] =>  2:00
     CLOCK: [2013-12-29 Sun 11:48]--[2013-12-29 Sun 13:16] =>  1:28
     CLOCK: [2013-12-28 Sat 23:46]--[2013-12-29 Sun 00:03] =>  0:17
     CLOCK: [2013-12-20 Fri 23:50]--[2013-12-21 Sat 00:22] =>  0:32

Update backend factory in engine such that the files generated by =om=
overwrite the files generated by the c++ backend. This way the diffs
will show us the deficiencies in om.

Notes on generation:

After a white-boarding session it became clear just why generability is
so complicated. It is because there are many factors that affect
it. First we have the already existing =Generateable= properties:

- Type does not belong to target model. This is modeled with
  =generation_types::no_generation=. This was fine in the past because
  we just wanted to avoid stating specifically that a type was part of
  the target model to avoid having code generation stuff in
  SML. However, now that SML is the only model, it would make more
  sense to model this as a Boolean (=in_target_model= perhaps?)
- Type is in target model and has been marked as =service= or
  =nongeneratable=. This is modeled with
  =generation_types::partial_generation=. The intention was that one
  would want to create a skeleton of the class if it didn't exist, but
  if the file already existed we wanted to leave it alone.
- Type is a regular type in target model;
  =generation_types::full_generation=.

Then we have the facet enable/disable properties:

- This is modeled in the meta-data (as the facets are language
  dependent).
- The key is =FACET_PATH::header_file::generate=. The possible values
  are =true= or =false=. This models the user enabling or disabling a
  facet.

However, it may just happen that certain types do not support certain
facets. For example, =std::optional= is not boost serializable, and
thus if an object has a property of =std::optional=, it must have
serialisation automatically switched off. This happens by forcing the
enable/disable properties to an off value, and should be done in
=meta_data_tagger=.

Further, it may happen that a user sets a facet to manual (say =types=) but
still wants others to be generated (say =serialisation= or =io=). A
common case is when designing a service that has state. Its painful to
have to generate facets other than =types= by hand as they have no
difficult code.

Finally, for things such as models, a facet is enabled/disabled
conditionally; only if documentation is present should we enable it.

So, the right way of modeling all of this is:

- we need to know which types are part of the target model and which
  ones are not. Boolean flag of some kind.
- we need to workout if we actually need to have a "status" and a
  "generate" tag. There is a lot of overlap here.
- if a user has disabled a facet in the settings we should disable it in the
  meta-data. It takes priority over everything else.
- next, if a user has disabled a facet in the meta-data, we should
  just propagate that setting.
- finally, if a facet is still enabled, we should check that all of
  the local properties of a type also have that facet enabled. If not,
  we should disable the facet. This means we need some kind of
  recursion in tagger (until we have a DAG). This means we can only
  tag after properties have been expanded.

The actual implementation is even simpler. We just need to ensure all
the meta data has been populated to answer two questions:

- =generate=: true or false
- =overwrite=: true or false

=status= has to be handled prior to determining =generate=, and it has
to be recursive. We can leave it for later, as its not a showstopper
for the move to =om=. =overwrite= is dependent on
=generation_types::partial_generation=.

Notes on directories:

- we need to find a way to get the project directories - such as
  include directory and source directory, etc - to the om.
- The natural thing to do is of course to add these to the
  meta-data. Alas, unlike every other property up til now, these
  directories are likely to cause havoc to our cross-platform
  setup. This is because we will end up with spurious differences
  between Windows, OSX and Linux due to the directory layout.
- Option two was to create a class in SML (say =project_directories=)
  but then the C++ concepts like include and source would leak into
  SML, which we avoided via the meta-data. We would also have to have
  a =project_directories_factory= which is not part of the SML
  workflow and must be invoked after the workflow, thus making it
  annoyingly inconvenient.
- The last option looked at was to move this code into om itself. This
  can be done, it will just require passing the settings into om, and
  then the directories into the formatter factory. It will require
  some logic that should really be in SML. Having said that it seems
  like the least bad option.

**** CANCELLED Add required meta-data to test models                   :task:
     CLOSED: [2013-12-30 Mon 10:04]

In order for om to match the C++ model we need to make sure we are
passing in the correct meta-data such as licences, etc.

*** COMPLETED It should be possible to add non-licensed files to om   :story:
    CLOSED: [2013-12-30 Mon 10:03]

At present it seems we throw when somebody attempts to add a model to
om that has no licence tag. We should just not add a license.

The problem is in =om::workflow::extract_licence=.

*** COMPLETED Create the notion of toggle-able features               :story:
    CLOSED: [2013-12-30 Mon 10:29]

Often we want to disable some of the "abilities" of dogen. We
arbitrarily call one such "ability" a _feature_. There are several
reasons one may want to disable a feature:

- we may not want to run tests for it; for instance, the machine where
  we're compiling on doesn't have some supporting libraries (EOS, ODB,
  etc). However, we still want the final binary to be able to produce
  code with those features in.
- we may not want dogen to generate code for a feature; for instance,
  because its not required by the end-user for a specific use case.

For the second case we need some command-line options that disable
features. For the first case we want some compile time macros that
disable tests according to the values of some macros; in addition, we
must also automatically ensure these features are turned off for all
other tests too. For example, if we disable EOS not only must we not
compile and run the EOS tests, but we must also make sure the existing
tests that have code where the EOS feature is expressed are also
"fixed" not to take into account EOS. We do not know how to do this.

This is a very big problem because it means that in order to compile
dogen and run all tests you need to have the super-set of all
libraries required by all features. For instance we cannot disable
serialisation altogether just because EOS has been disabled. In cases
where the feature maps directly to a facet, we still have a problem -
whilst the code in git will contain the output of all features, the
local code will only have a subset of those, and the diffs will fail.

One possible solution is to have test models for each feature: boost
serialisation test model, eos test model, etc. These would be disabled
if the features are not turned on. We need to go through the existing
tests during the clean up and make sure each feature is tested on a
different model.

It would also be nice if we could use the same model for all features
and just override the model name to reflect the feature in question.

** Deprecated Development Stories
*** CANCELLED Move extractor from C++ model into SML                  :story:
    CLOSED: [2013-12-16 Mon 23:37]

New understanding: this will largely be achieved through the
implementation of the association indexer. We will still have an
extractor in SML to C++ but it will be a simple aggregator of
relationships and will only live until we move over to =om=.

Old Understanding: Extractor and relationships should be moved into
SML. The C++ specific bits are the parts where we directly name types
such as =has_std_string=, etc. These should be generalised, such that
the user could pass in a list of types to the extractor and then we'd
return them with a bool for whether we seen them or not.

We should also remove the references to =forward_decls= directly and
instead have something like "pointer only" dependencies or some such
SML level concept and then interpret this dependency as a forward
declaration at the C++ level.
*** CANCELLED Fix broken clang 3.2 32-bit build                       :spike:
    CLOSED: [2013-12-28 Sat 15:59]

Note: this story cannot be fixed until boost 1.55 is released for
Debian. We are not adding it back to backlog because it will be
naturally implemented when we stop using PFH.

We are having some really puzzling link errors:

: ../source/projects/sml/src/types/object.cpp:(.text+0x7d): undefined reference to `std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned int) const'

This is probably related to the fact that in ubuntu clang uses the
standard library from g++ 4.8. We are probably mixing and matching 4.7
and 4.8 (as boost in PFH is 4.7).

*** CANCELLED Compile code with clang 3.3                             :story:
    CLOSED: [2013-12-28 Sat 16:00]

Note: this story cannot be implemented until boost 1.55 is released
for Debian. We are not adding it back to backlog because it will be
naturally implemented when we stop using PFH.

As part of the attempt to get the code to build without the PFH, we
need to ensure that we compile with the latest stable clang.

*** CANCELLED Update manual                                           :story:
    CLOSED: [2013-12-29 Sun 23:05]

Use compilation downtime to update the manual.

We never got round to doing this during this iteration as there were a
number of compilation fixes that used the downtime.
