#+title: Sprint Backlog 67
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission Statement

- Implement needle and update all legacy formatters to use it.
- Implement as many formatters as possible using the new cpp
  architecture.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
#+CAPTION: Clock summary at [2015-06-08 Mon 18:06]
| <75>                                                                        |         |       |       |
| Headline                                                                    | Time    |       |       |
|-----------------------------------------------------------------------------+---------+-------+-------|
| *Total time*                                                                | *43:36* |       |       |
|-----------------------------------------------------------------------------+---------+-------+-------|
| Stories                                                                     | 43:36   |       |       |
| Active                                                                      |         | 43:36 |       |
| COMPLETED Sprint and product backlog grooming                               |         |       |  1:12 |
| COMPLETED Move to emacs prelude                                             |         |       | 20:46 |
| POSTPONED Consider creating an Emacs mode for stitch                        |         |       |  0:56 |
| POSTPONED Consider using a proper JSON library                              |         |       |  0:47 |
| POSTPONED Create a blog post on biicode                                     |         |       |  1:10 |
| CANCELLED Update legacy formatters to use needle for io                     |         |       |  2:40 |
| COMPLETED Remove needle and RapidJson from repo                             |         |       |  0:10 |
| COMPLETED Implement io helper method generator                              |         |       |  8:17 |
| POSTPONED Implement class implementation formatter using stitch             |         |       |  7:38 |
#+end:

*** COMPLETED Sprint and product backlog grooming                     :story:
    CLOSED: [2015-06-08 Mon 18:05]
    CLOCK: [2015-06-01 Mon 14:52]--[2015-06-01 Mon 15:08] =>  0:16
    CLOCK: [2015-06-01 Mon 14:19]--[2015-06-01 Mon 14:38] =>  0:19
    CLOCK: [2015-05-25 Mon 08:50]--[2015-05-25 Mon 09:27] =>  0:37

Updates to sprint and product backlog.

*** COMPLETED Updates to the manual and readme files                  :story:
    CLOSED: [2015-06-08 Mon 18:05]

Use downtime to update the manual and / or readme file.

*** COMPLETED Move to emacs prelude                                   :spike:
    CLOSED: [2015-05-27 Wed 00:20]
    CLOCK: [2015-05-27 Wed 15:00]--[2015-05-27 Wed 16:27] =>  1:27
    CLOCK: [2015-05-26 Tue 23:42]--[2015-05-27 Wed 00:20] =>  0:38
    CLOCK: [2015-05-26 Tue 22:54]--[2015-05-26 Tue 23:42] =>  0:48
    CLOCK: [2015-05-26 Tue 22:07]--[2015-05-26 Tue 22:54] =>  0:47
    CLOCK: [2015-05-26 Tue 19:30]--[2015-05-26 Tue 22:06] =>  2:36
    CLOCK: [2015-05-26 Tue 17:10]--[2015-05-26 Tue 18:50] =>  1:40
    CLOCK: [2015-05-25 Mon 21:40]--[2015-05-25 Mon 22:50] =>  1:10
    CLOCK: [2015-05-25 Mon 16:30]--[2015-05-25 Mon 19:20] =>  2:50
    CLOCK: [2015-05-25 Mon 15:12]--[2015-05-25 Mon 16:04] =>  0:52
    CLOCK: [2015-05-25 Mon 10:26]--[2015-05-25 Mon 14:41] =>  4:15
    CLOCK: [2015-05-25 Mon 09:45]--[2015-05-25 Mon 10:22] =>  0:37
    CLOCK: [2015-05-25 Mon 09:28]--[2015-05-25 Mon 09:39] =>  0:11
    CLOCK: [2015-05-24 Sun 22:10]--[2015-05-25 Mon 01:05] =>  2:55

We are having a number of problems related to emacs 23 and cunene
which can be solved by moving to a more modern setup. Implement cunene
in terms of prelude.

Problems:

- arrow keys are conflicting
- org mode does not automatically set column lengths any more, and has
  added some strange latex indentation.
- no auto fill mode in org

*** POSTPONED Consider creating an Emacs mode for stitch              :story:
    CLOSED: [2015-06-01 Mon 14:26]
    CLOCK: [2015-05-27 Wed 17:05]--[2015-05-27 Wed 18:01] =>  0:56

*Rationale*: this is not in keeping with the sprint's mission so we
need to backlog it.

*Original Story*

It would be nice to have syntax highlighting for stitch templates. We
have a [[https://github.com/mcraveiro/cunene/blob/master/lisp/other/utils/t4-mode.el][mumamo-based version]] in cunene - originally done for t4 - but
which is rather unusable.
*** POSTPONED Consider using a proper JSON library                    :story:
    CLOSED: [2015-06-01 Mon 14:24]
    CLOCK: [2015-05-31 Sun 15:20]--[2015-05-31 Sun 16:07] =>  0:47

*Rationale*: RapidJson was not a solution for the problem at hand (the
needle approach for io), so we need to backlog this story.

*Original Story*

We could use a full-blow JSON parser rather than the property tree
one. One option is [[https://github.com/cierelabs/json_spirit][json_spirit]].

Another option is [[https://github.com/miloyip/rapidjson][RapidJson]].

Actually there is a project comparing JSON libraries:

[[https://github.com/miloyip/nativejson-benchmark][nativejson-benchmark]]

One interesting library is [[https://github.com/dropbox/json11][Json11]].

*** POSTPONED Create a blog post on biicode                           :story:
    CLOSED: [2015-06-01 Mon 14:30]
    CLOCK: [2015-05-31 Sun 14:10]--[2015-05-31 Sun 15:20] =>  1:10

*Rationale*: RapidJson was not a solution for the problem at hand (the
needle approach for io); since this story was a consequence of using
RapidJson, we need to backlog it.

Investigate adding biicode support since we need to add a RapidJson
dependency. Create a blog post about it.

*** CANCELLED Update legacy formatters to use needle for io           :story:
    CLOSED: [2015-06-01 Mon 14:26]
    CLOCK: [2015-06-01 Mon 14:00]--[2015-06-01 Mon 14:18] =>  0:18
    CLOCK: [2015-05-31 Sun 16:50]--[2015-05-31 Sun 18:23] =>  1:33
    CLOCK: [2015-05-31 Sun 16:08]--[2015-05-31 Sun 16:13] =>  0:05
    CLOCK: [2015-05-28 Thu 07:36]--[2015-05-28 Thu 08:20] =>  0:44

*Rationale*: after a lot experimentation, it seems that doing this
from needle is not entirely trivial. Instead, we need to take the path
of least resistance which is to re-implement the legacy approach in a
way that is compatible with stitch templates.

*Original Story*

- add some hack to includer to pick up these header files.
- remove io helpers from transformer and regenerate all models.

This is actually quite a complicated thing we are trying to do
here. The problem has to do with partial ordering of the template
specialisations. It is very difficult (if not impossible) to order the
specialisations correctly. We need to figure out a simpler of doing
this.

More thoughts:

- the basic problem is that we tried to use a template function to
  dispatch to the appropriate JSON formatting. The problem with this
  is that we then enter the world of [[https://msdn.microsoft.com/en-us/library/zaycz069.aspx][partial ordering]], which means
  that depending on the order in which functions are declared, we may
  get different results. And since we declared the most general
  function in the jsonify header, it was never going to work.
- however, even placing it in a special header that is always last is
  not sufficient; not quite sure why that is, but we still seem to
  pick the wrong function in certain cases. Basically, relying on
  ordering is very brittle and will result in hard-to-debug
  problems. In addition, we don't really want to have complex rules of
  ordering the includes because then we need to provide a way to
  express those rules in the meta-data, adding a whole load of
  complexity across the dogen stack for very little gain.
- an alternative to this problem is to rely on overloading without
  templates, a la =operator<<=. We don't actually need to make
  =jsonify= a generic function; all we need is for the JSON formatting
  types to be generic. We can then define a large number of
  (non-generic) overloads that return instantiations of the JSON
  formatting types. Overloading rules are a lot more amenable to
  reasoning than partial ordering.
- however, the problem with this is that we then need to always
  declare a jsonify function for every time, just like with
  =operator<<=. And it must be placed in the same namespace as the
  type itself - or perhaps we could move jsonify to detail.
- actually we are trying to do two things at the same time:
  =operator<<= and json serialisation. For this to work properly we
  need to split out json serialisation. We need to look into
  implementing stand alone JSON.
- the split of JSON from =operator<<= is not necessarily a solution to
  this problem. The most important thing is to move to [[http://en.wikipedia.org/wiki/Argument-dependent_name_lookup][ADL]] rather than
  partial ordering.
- an ADL implementation still suffers from this problem; we are not
  able to get =std::pair= in a container to work. We need to find a
  solution to port across the helper functions for now.

*** COMPLETED Remove needle and RapidJson from repo                   :story:
    CLOSED: [2015-06-01 Mon 14:48]
    CLOCK: [2015-06-01 Mon 14:38]--[2015-06-01 Mon 14:48] =>  0:10

Since we did not managed to get this working, we should just remove
all of the experiments we performed:

- remove needle project
- remove third party stuff for RapidJson
- add links to these commits to the stories in the backlog

*** COMPLETED Implement io helper method generator                    :story:
    CLOSED: [2015-06-04 Thu 07:56]
    CLOCK: [2015-06-03 Wed 17:38]--[2015-06-03 Wed 18:20] =>  0:42
    CLOCK: [2015-06-03 Wed 06:31]--[2015-06-03 Wed 07:14] =>  0:43
    CLOCK: [2015-06-02 Tue 21:39]--[2015-06-02 Tue 21:46] =>  0:07
    CLOCK: [2015-06-02 Tue 20:54]--[2015-06-02 Tue 21:38] =>  0:44
    CLOCK: [2015-06-02 Tue 20:40]--[2015-06-02 Tue 20:53] =>  0:13
    CLOCK: [2015-06-02 Tue 16:34]--[2015-06-02 Tue 18:17] =>  1:43
    CLOCK: [2015-06-02 Tue 13:44]--[2015-06-02 Tue 14:10] =>  0:26
    CLOCK: [2015-06-02 Tue 13:18]--[2015-06-02 Tue 13:43] =>  0:25
    CLOCK: [2015-06-01 Mon 20:58]--[2015-06-01 Mon 21:29] =>  0:31
    CLOCK: [2015-06-01 Mon 15:10]--[2015-06-01 Mon 17:53] =>  2:43

We need to find a way to copy across the io method generation code
from legacy into a stitch world. The simplest approach is just to
extend the assistant; the template then just calls the assistant after
the includes but before the namespaces. We may need some kind of
lambda parameter to be passed in to boilerplate to support this.

Notes:

- we need access to family information in order to do this
  (e.g. sequence container, etc) or we can bring across the
  transformer hacks too.
- We need two methods: a generator for the helpers at the top and a
  generator for the streaming. Or we could implement the inserter
  method itself in stitch.
- actually, we could conceivably have a stitch template for each
  helper method; and to have these templates "linked" in some kind of
  fashion to one or more types (this was the role performed by
  family"); and then to have the "recursor" take a container of linked
  stitch templates and then apply them as the types match. For this we
  would need a lot of machinery to manage the associations between
  types and templates. But for now we could manage this association
  manually by calling the right template at the right time. As luck
  would have it we are already ignoring all stitch related files so we
  just need to manually generate the templates and hook them together
  with a "helper method formatter" in each facet. We can then pass in
  a parameter to the assistant to generate the appropriate helpers
  when setting up bootstrap (or even pass in an instance of the
  helper).
- we could go one step further: create a single helper method
  formatter which has a "mapping table" of functions, which are just
  calls to stitch templates. They may be supplied or not. Each facet
  has a factory for this helper that supplies its own templates. We
  call the factory when invoking the boilerplate formatter. The
  problem is our helpers are full of hackery and we did not model
  these types properly so taking an approach like this one will
  probably mean we will get stuck at some point with some fundamental
  problem. The quick and dirty approach will work because its not that
  different from the existing approach, just re-implemented for
  stitch.
- we called the class "helper method formatter" but it generates
  multiple methods. It should be "helper methods formatter".
- we need an entity formatting assistant, and a nested type info
  formatting assistant, with perhaps a formatting assistant base class
  that has all the common functionality. This way we could setup
  namespaces, utility etc on the base.
- we can initialise boilerplate with the lambda to the helper methods
  assistant already passed in; we have all the information required to
  determine how to set it up (what facet we're in, what is enabled,
  etc).
- actually, do we even need to change boilerplate at all? The helpers
  are supposed to appear after the includes but before the
  namespaces. We just need to inject them between scoped boilerplate
  and scoped namespace. This can be done with the assistant.
- the only slight problem is that the formatting assistant has an
  entity and we need a class info. For now we need to resort to
  casting.

*** POSTPONED Implement class implementation formatter using stitch   :story:
    CLOSED: [2015-06-08 Mon 18:05]
    CLOCK: [2015-06-07 Sun 11:20]--[2015-06-07 Sun 11:24] =>  0:04
    CLOCK: [2015-06-07 Sun 10:23]--[2015-06-07 Sun 11:19] =>  0:56
    CLOCK: [2015-06-07 Sun 09:15]--[2015-06-07 Sun 09:18] =>  0:03
    CLOCK: [2015-06-07 Sun 08:50]--[2015-06-07 Sun 09:04] =>  0:14
    CLOCK: [2015-06-06 Sat 19:30]--[2015-06-06 Sat 19:43] =>  0:13
    CLOCK: [2015-06-06 Sat 17:14]--[2015-06-06 Sat 18:05] =>  0:51
    CLOCK: [2015-06-06 Sat 16:17]--[2015-06-06 Sat 17:13] =>  0:56
    CLOCK: [2015-06-06 Sat 16:05]--[2015-06-06 Sat 16:07] =>  0:02
    CLOCK: [2015-06-06 Sat 15:10]--[2015-06-06 Sat 16:04] =>  0:54
    CLOCK: [2015-06-06 Sat 14:47]--[2015-06-06 Sat 15:08] =>  0:21
    CLOCK: [2015-06-06 Sat 13:10]--[2015-06-06 Sat 14:46] =>  1:36
    CLOCK: [2015-06-05 Fri 14:56]--[2015-06-05 Fri 15:39] =>  0:43
    CLOCK: [2015-06-04 Thu 07:55]--[2015-06-04 Thu 08:40] =>  0:45

We need to implement a stitch template for the class
implementation formatter in types, plug it in and start working
through the diffs.

Problems:

- includes will fail on stream manipulators. This is because we need
  to check if we require them when generating dependencies, but we
  have to do so manually since the class info doesn't exist yet. We
  need to hack this for now - once we have "field gathering" support
  this will be easier.
- we need family back to determine what helpers to generate from the
  properties.
- no includes and no space after includes
- float property with too mnay close brackets:

: -      float_property_(float_property) { }
: +      float_property_(float_property)) { }

- no swap, equality, assignment, getters and setters

** Deprecated
*** CANCELLED Perform expansion of properties and operations          :story:
    CLOSED: [2015-06-01 Mon 14:57]

*Rationale*: We no longer have expansion.

At present we are ignoring properties (and operations). This is ok as
we don't really have a use case for expansion there. However, it would
be nice if we could just expand them anyway. We just need to make sure
we don't do things like copying from root object.

*** CANCELLED Create an operation to populate c++ properties          :story:
    CLOSED: [2015-06-01 Mon 14:57]

*Rationale*: We no longer have expansion.

There are a number of properties such as "requires default
constructor" and so on that are specific to the c++ model. Some
require looking at related types (do they have the property enabled?)
some others require looking at the SML model graph. It seems they
should all live under one single operation (or perhaps a few), but we
do not have any good names for them.

*** CANCELLED Rename dynamic models                                   :story:
    CLOSED: [2015-06-01 Mon 14:59]

*Rationale*: We no longer have expansion.

At present we have named the dynamic models as follows:

- =schema=: for =dynamic::schema=
- =expansion=: for =dynamic::expansion=

This is because the name of the model is used to generate the
enclosing namespaces. Ideally we should name the models something like
=dynamic_schema= but still generate the namespaces correctly. One way
of doing this is to use the meta-data property for the model name,
which would allow having a file name that is different from the model
name. We have a dependency on [[https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/agile/product_backlog.org#add-a-property-for-the-model-name-as-dynamic-extensions][this]] story.
