#+title: Sprint Backlog 81
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission Statement

- continue implementing helper methods dynamically and using yarn types.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2016-04-14 Thu 07:32]
| <75>                                                                        |        |      |      |       |
| Headline                                                                    | Time   |      |      |     % |
|-----------------------------------------------------------------------------+--------+------+------+-------|
| *Total time*                                                                | *5:20* |      |      | 100.0 |
|-----------------------------------------------------------------------------+--------+------+------+-------|
| Stories                                                                     | 5:20   |      |      | 100.0 |
| Active                                                                      |        | 5:20 |      | 100.0 |
| COMPLETED Sprint and product backlog grooming                               |        |      | 0:06 |   1.9 |
| COMPLETED Remove experimental helper implementation                         |        |      | 0:15 |   4.7 |
| POSTPONED Add properties for helpers                                        |        |      | 4:59 |  93.4 |
#+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
#+end:

*** COMPLETED Sprint and product backlog grooming                     :story:
    CLOSED: [2016-04-14 Thu 07:32]
    CLOCK: [2016-03-14 Mon 21:41]--[2016-03-14 Mon 21:47] =>  0:06

Updates to sprint and product backlog.

*** COMPLETED Remove experimental helper implementation               :story:
    CLOSED: [2016-03-17 Thu 22:56]
    CLOCK: [2016-03-17 Thu 22:31]--[2016-03-17 Thu 22:46] =>  0:15

Now we figured out the right way of doing the helpers dynamically, we
should remove the previous attempt.

*** COMPLETED Help conan with strange warning                         :story:
    CLOSED: [2016-03-26 Sat 17:46]

*Rationale*: This has now been fixed in conan 0.8.0.

We are getting a CMake warning on our builds:

: CMake Warning (dev) in build/output/conanbuildinfo.cmake:
:  Syntax Warning in cmake code at
:    /home/travis/build/DomainDrivenConsulting/dogen/build/output/conanbuildinfo.cmake:142:88
:  Argument not separated from preceding token by whitespace.
: Call Stack (most recent call first):
:  CMakeLists.txt:30 (include)
: This warning is for project developers.  Use -Wno-dev to suppress it.

Report it to conan.

Actually, this is a bit trickier than expected, and the fix is now
breaking the build:

- [[https://github.com/conan-io/conan/issues/138][Warning in CMake file created by conan]]

We will wait until conan comes up with a fix.

*** POSTPONED Add properties for helpers                              :story:
    CLOSED: [2016-04-14 Thu 07:32]
    CLOCK: [2016-03-17 Thu 21:02]--[2016-03-17 Thu 22:29] =>  1:27
    CLOCK: [2016-03-17 Thu 08:01]--[2016-03-17 Thu 08:37] =>  0:36
    CLOCK: [2016-03-16 Wed 21:34]--[2016-03-16 Wed 22:50] =>  1:16
    CLOCK: [2016-03-16 Wed 21:02]--[2016-03-16 Wed 21:33] =>  0:31
    CLOCK: [2016-03-14 Mon 22:11]--[2016-03-14 Mon 22:58] =>  0:47
    CLOCK: [2016-03-14 Mon 21:48]--[2016-03-14 Mon 22:10] =>  0:22


We should pre-compute all of the required helper instances for a given
element and have them ready for formatting. Create all of the types
required for this.

What we were trying to say in this terse form is this:

- every type needs a set of helpers with zero or more elements. This
  is a set in that there are no duplicates.
- this set is computed on the basis of relationships with other types
  which themselves have helper settings.
- once we got this set, we can then loop through it and ask the
  registrar for the helpers for each family.
- however, we must also have the helper settings next to this
  information as we will need these.
- finally, a given helper may call other methods inside it. This is
  why we need to have the associated helpers. At present this happens
  only in hashing.

Notes:

- we must keep track of types done by complete name. This can be done
  in main function.
- we must remember the children's helper instance properties to
  populate associated helpers (but just direct children). This can be
  achieved by returning these in the recursive function.
- we must build helper instances for all children. This requires
  supplying a list by reference.
- we must build complete name.

*Previous Understanding*

We need to store the identifiable name of the name tree, as well as
the language specific representation of the type. The container should
make use of the name tree index - e.g. use a vector. The only problem
is that we do not know what the size of the container is without doing
look ups. We could have a property nested name size in
stateful. Naming it is not easy though. Nested name cardinality?

*Previous Understanding*

We need to store the identifiable name of the nested name, as well as
the language specific representation of the type. These are properties
at the level of the =yarn::property=. The container should make use of
the index - e.g. use a vector of size of properties list.

Note that these are not properties of the property, but instead
properties of the property type.

Actually this is not correct; we need the properties for each nested
name and for each particular nested name structure, possibly unique to
each property. An alternative is then to come up with an index that
takes into account the nesting (effectively flattens the nested
structure). The index starts at zero for a type and increments for
every property for every level of nesting. Each nested name has an
index. Then, nested name properties is a flat container for each name
with the required properties. With this the helpers can continue to
rely on just the nested name (plus the nested name properties via the
assistant).

** Deprecated
*** CANCELLED Implement stitch with merging                            :epic:
    CLOSED: [2016-02-18 Thu 08:24]

*Rationale*: we don't need this now that we will have stitch
meta-templates.

When we have merging support we can actually implement stitch in a
better way. We could mark the formatters with meta-data stating they
have a method which is a stitch template. That then results in a c++
operation which makes reference to stitch. When converting yarn into
the CPP model we can add a "content" property to the stitchable
operations that contains the expansion of the stitch
template. Finally, when inside of the stitch template that is
code-generating, we will loop through all of the operations. For the
stitched ones, we can then dump the content property. Merge support is
required because formatters are always expected to have a component of
hand-crafting (include providers etc) and cannot be implemented
without it.
*** CANCELLED Use pimpl for a few "one-shot" services                 :story:
    CLOSED: [2016-02-18 Thu 23:28]

*Rationale*: we should refactor each class as we get to them; having a
generic story is not helpful.

We have quite a few services where it would be great to have
transactional semantics. For example, when building a graph it would
be great if one could have a list of objects to graph as an input and
some kind of =grapher_result= as the output. From a potential
=grapher_interface= it would look like a simple method in the
interface, almost static. The problem with this approach of course is
that it makes the =grapher_interface= implementations cumbersome
because one has to pass all parameters to all internal methods instead
of using class state. The present approach is to make it a "prepare"
and then "use" sort of service, causing the usual nonsensical methods
of "is it finished yet" and "are you trying to use the service a
second time" (e.g. =is_built=, etc). Even if we pass in all the inputs
in the constructor, its still not ideal. There are two options:

- set member variables inside the "one-shot" function and then unset
  them at the end;
- have a =grapher= implementation which uses a =grapher_impl= that
  does provide a sensible implementation. We used to do this inside
  the =.cpp= files but then they became too big to manage.
*** CANCELLED Replace Boolean attributes with flags                   :story:
    CLOSED: [2016-02-18 Thu 23:36]

*Rationale*: this story is too vague; what flags are these and how
will this change make the code better? Looking at the model, nothing
obvious comes to mind.

We have a number of Boolean attributes in yarn which could easily be
replaced by a single int and a flag enumeration. We would also need a
set of utility methods to access the values.

This story has a dependency on [[*Add%20support%20for%20bitsets][bitset support]].
