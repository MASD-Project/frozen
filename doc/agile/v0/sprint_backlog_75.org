#+title: Sprint Backlog 75
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission Statement

- wrap things up with yarn refactor and start quilt refactor.
- get continuous builds working again.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
#+CAPTION: Clock summary at [2015-12-07 Mon 23:24]
| <75>                                                                        |         |       |      |
| Headline                                                                    | Time    |       |      |
|-----------------------------------------------------------------------------+---------+-------+------|
| *Total time*                                                                | *17:22* |       |      |
|-----------------------------------------------------------------------------+---------+-------+------|
| Stories                                                                     | 17:22   |       |      |
| Active                                                                      |         | 17:22 |      |
| COMPLETED Sprint and product backlog grooming                               |         |       | 1:32 |
| COMPLETED Use qualified name as the key of the intermediate model container |         |       | 3:05 |
| COMPLETED Use the single element container model in =cpp=                   |         |       | 2:04 |
| COMPLETED Add support for composite model names                             |         |       | 1:27 |
| COMPLETED Use pdflatex for the manual                                       |         |       | 5:25 |
| COMPLETED Intermediate model should not be an Element                       |         |       | 0:31 |
| POSTPONED Implement formattables in terms of yarn types                     |         |       | 0:11 |
| POSTPONED Add relationship types to handle "requires"                       |         |       | 0:37 |
| POSTPONED Yarn minor tidy-ups                                               |         |       | 2:30 |
#+end:

*** COMPLETED Sprint and product backlog grooming                     :story:
    CLOSED: [2015-12-07 Mon 23:23]
    CLOCK: [2015-12-07 Mon 23:19]--[2015-12-07 Mon 23:28] =>  0:09
    CLOCK: [2015-12-05 Sat 15:15]--[2015-12-05 Sat 15:36] =>  0:21
    CLOCK: [2015-12-03 Thu 19:03]--[2015-12-03 Thu 19:40] =>  0:37
    CLOCK: [2015-11-26 Thu 07:51]--[2015-11-26 Thu 07:59] =>  0:08
    CLOCK: [2015-11-23 Mon 22:45]--[2015-11-23 Mon 23:02] =>  0:17

Updates to sprint and product backlog.

*** COMPLETED Use qualified name as the key of the intermediate model container :story:
    CLOSED: [2015-11-25 Wed 13:03]
    CLOCK: [2015-11-24 Tue 21:01]--[2015-11-24 Tue 23:42] =>  2:41
    CLOCK: [2015-11-23 Mon 23:03]--[2015-11-23 Mon 23:27] =>  0:24

We are using name as the key for the intermediate model container, but
once we have proper qualified name support everywhere, there is no
reason why we can't just use the qualified name. We should not change
the logic in the =cpp= containers as there the name is used for
processing reasons - we'd end up having to have the name as the value
instead.

Notes:

- for some reason containing module for top-level packages is empty,
  even though it appears to be expanded correctly. This will cause the
  identifier parser to build the name incorrectly.
- we are not performing containment correctly for types inside a
  package (e.g. =shape_types=).

*** COMPLETED Use the single element container model in =cpp=         :story:
    CLOSED: [2015-11-25 Wed 23:15]
    CLOCK: [2015-11-25 Wed 21:11]--[2015-11-25 Wed 23:15] =>  2:04

We have implemented a single element container in yarn but its not yet
being used. We need to:

- update yarn workflow to return this model instead of intermediate
  model;
 replace all usages of intermediate model in =cpp= with this model.

*** COMPLETED Add support for composite model names                   :story:
    CLOSED: [2015-12-05 Sat 21:17]
    CLOCK: [2015-12-05 Sat 21:09]--[2015-12-05 Sat 21:17] =>  0:08
    CLOCK: [2015-12-05 Sat 17:30]--[2015-12-05 Sat 17:50] =>  0:20
    CLOCK: [2015-12-05 Sat 15:36]--[2015-12-05 Sat 16:35] =>  0:59

We added the model names list to location, but we are still not
parsing composite model names (e.g. =yarn.dia=). This will probably
break a lot of stuff.

- deal with the fallout in terms of file paths creation, etc.
- split model names with dots into multiple model paths.
- resolver needs to take into account this case, in a similar way
  which we handle models with the same name as modules in the target
  model.
- a model should have: an element identifier which is identical to the
  root module (the module that represents the model). A model is
  itself an element.

Merged stories:

*Add support for model names with dots*

It is quite annoying to have to create folders and sub-folders for the
main projects. This is not too bad right now because we don't really
make use of nesting that much, other than with test models. However,
now that the architecture is clear and we need to make use of nesting,
it becomes more of a concern. For example:

: / a
:   / b
:   / c
: / d
:   / e
:   / f

This is clearer as:

: / a
: / a.b
: / a.c
: / d.e
: / d.f

However, in order to implement this we need a bit of cleverness:

- for the purposes of files, the dot represents a dot;
- for the purposes of namespaces, we must create several namespaces
  (e.g. yarn::core).

This is also inline with the idea that the model name does not always
contribute to the namespaces as required by primitives. We basically
need a cleverer version of qname to handle all of these scenarios.

It may also be worth taking into account the other story on this topic
where we considered using underscores instead of folders for facet
names. It may be nicer to have dots for this,
e.g. =types.my_class.hpp=.

Idea:

=names= should have a model name and a model package; only the model
package contributes to the namespaces. The model name is unpacked into
multiple model packages (e.g. "a.b" => a::b). The file name uses the
model name, not the model package.

*** COMPLETED Use pdflatex for the manual                             :story:
    CLOSED: [2015-12-06 Sun 01:18]
    CLOCK: [2015-12-05 Sat 21:18]--[2015-12-06 Sun 01:18] =>  4:00
    CLOCK: [2015-12-05 Sat 17:50]--[2015-12-05 Sat 18:20] =>  0:30
    CLOCK: [2015-12-05 Sat 16:35]--[2015-12-05 Sat 17:30] =>  0:55

We should just use pdflatex for the manual rather than org. We need to
convert the existing content to TeX - maybe one big file - and then
add a more idiomatic TeX setup such as BibTeX, once chapter per file,
etc.

We should also have a look at the [[http://implementingquantlib.blogspot.com/2013/09/intermission-latex-style-file-and-some.html][latex templates]] by Luigi for
quantlib and the [[http://www.springer.com/computer/lncs/lncs%2Bauthors?SGWID%3D0-40209-0-0-0][Springer LaTeX templates]].

*** COMPLETED Intermediate model should not be an Element             :story:
    CLOSED: [2015-12-06 Sun 23:23]
    CLOCK: [2015-12-06 Sun 22:52]--[2015-12-06 Sun 23:23] =>  0:31

We need to move all functionality from the model into the model module
such that the model no longer needs to be an element (documentation,
etc). It can remain as a nameable.

*** POSTPONED Implement formattables in terms of yarn types           :story:
    CLOSED: [2015-12-07 Mon 23:24]
    CLOCK: [2015-11-26 Thu 08:00]--[2015-11-26 Thu 08:11] =>  0:11

At present formattables are just a shadow copy of yarn types plus
additional =cpp= specific types. In practice:

- for the types that are shadow copies, we could have helper utilities
  that do the translation on the fly (e.g. for names).
- for additional information which cannot be translated, we could have
  containers indexed by qualified name and query those just before we
  call the transformer. This is the case with formatter properties. We
  need something similar to house "type properties" such as
  =requires_stream_manipulators=. These could be moved into aspect
  settings.
- for types that do not exist in yarn, we could inherit from element;
  this is the case for registrar, forward declarations, cmakelists and
  odb options. Note that with this we are now saying that element
  space contains anything which can be modeled, regardless of if they
  are part of the programming language type system, or build system,
  etc. This is not ideal, but its not a problem just yet. We could
  update the factory to generate these types and then take a copy of
  the model and inject them in it.

*** POSTPONED Add relationship types to handle "requires"             :story:
    CLOSED: [2015-12-07 Mon 23:24]
    CLOCK: [2015-11-26 Thu 08:11]--[2015-11-26 Thu 08:48] =>  0:37

*New Understanding*

- we could solve this problem if in dynamic fields could have a
  "propagation type" that results in propagating field instances
  across the element graph.
- this can only be done as the last step in yarn because we need all
  properties to have been indexed, merging, resolution etc.
- at this point we could generate a graph. Vertices are the dynamic
  objects; edges are obtained by looking at the relevant
  relationships: regular associations, weak associations, parents. We
  perhaps should have one graph per relationship type to make things
  easier.
- the graph starts at a root, and the next vertex is the first dynamic
  object that needs to be "computed". We look at all the fields in
  that object that require "computation" and at the "computation
  type".
- cycles are the big problem. However, it seems one cannot have cycles
  in C++ as this would cause inclusion problems. This is normally
  resolved by weak relationships. We need to confirm this for cycles
  with more than 2 edges. If this is true, we could force all
  languages to declare relationships as weak when there is a cycle
  somehow (note that we do not have the concept of pointers in java/c#
  so perhaps the relationship itself would have to be annotated). We
  could then have a default behaviour for weak relationships such as
  never follow, etc.

*Previous Understanding*

This story needs to be named properly, once we actually understand
what it is that it is about.

Moment of realisation: we could describe all relationships between
types as relations in the form a R b. We are already doing these, its
just that we model them in a variety of ways (properties, relationship
types, etc). This is fine because the driver for the modeling is the
"language" model (e.g. =cpp=). However, there is a class of use cases
that we have yet failed to solve. The general form of these use cases
is as follows:

- type b has some meta-data m;
- type b is related to type a via some relation R;
- type a should also be treated as having m.

Another variation is where a is related to multiple types b0, b1, bn
and we want to perform some computation on m0, m1, mn to determine the
value for a.

It seems that both of these use cases could be solved if only we had a
way to represent a R b in =tack::model=. We have spotted the following
Rs:

- non-transitive aggregation, not "expanding" generics: all types
  aggregated with a type; if a type is a generic type, we ignore the
  type parameters. It is non-transitive in the following sense: if
  type a aggregates type b and type b aggregates type c, it does not
  mean that type a aggregates type c. Use cases: requires manual move
  constructor, requires manual default constructor.
- non-transitive aggregation, "expanding" generics: all types
  aggregated with a type; if a type is a generic type, then all of the
  type parameters are considered to also be associated. Use cases:
  requires stream manipulators.
- transitive association, "expanding" generics: all types aggregated
  to a type and all types that those types aggregate to; all types
  that this type inherits from and their parents. Use cases:
  enablement.

Note that we still haven't solved the fundamental enablement problem,
as we can still have cycles on the graph (e.g. a is related to
a). However, we can now create the traversal with cycles algorithm: it
follows R and remembers the original type (e.g. a); when we spot that
type again (e.g. y depends on a and a depends on y) we add all types
that depend on it (y) to a "blocked" pile. We do process all other
dependencies of y. The pile would have the form of: a blocks y. Even
though y is blocked, we can still answer a. Once we answered a we can
then answer all types blocked by a (they may have more than one block
though). The key thing here is if a type has a cycle on itself its not
a problem, we can just skip it. If a type has a dependency on a type
which has a cycle, we must first sort out the type with the cycle.

This story still needs a lot of work but its just a dump of all of the
ideas at this point in time.

Notes:

- we need a "requires" repository, factory etc in formattables that
  handles all of the "requires xyz" cases. We may need two of these,
  per relation type.
- we need to expand enablement to perform the algorithm above.
- we need to expand relationship management in tack, adding these new
  relationship types and populating them.
- includes builder needs access to the "requires" data in order to
  compute includes.

Merged stories:

*Add support for the relationships graph in enabler*

*Note*: this story needs refactoring. It is basically here to cover
the support for a graph with cycles in enabler but has not yet been
updated.

This needs a bit more analysis. The gist of it is that not all types
support all formatters. We need a way to determine if a formatter is
not supported. This probably should be inferred by a "is dogen model"
property (see backlog); e.g. non-dogen models need their types to have
an inclusion setup in order to be "supported", otherwise they should
default to "not-supported". However the "supported" flag is populated,
we then need to take into account relationships and propagate this
flag across the model such that, if a type =A= in a dogen model has a
property of a type =B= from a non-dogen model which does not support a
given formatter =f=, then =A= must also not support =f=.

In order to implement this feature we need to:

- update the SML grapher to take into account relationships
  (properties that the class has) as well as inheritance.
- we must only visit related types if we ourselves do not have values
  for all supported fields.
- we also need a visitor that detects cycles; when a cycle is found we
  simply assume that the status of the revisited class is true (or
  whatever the default value of "supported" is) and we write a warning
  to the log file. We should output the complete path of the cycle.
- users can override this by setting supported for all formatters
  where there are cycles.
- we could perhaps have a bitmask by qname; we could start by
  generating all bitmasks for all qnames and setting them to default
  value. We could then find all qnames that have supported set to
  false and update the corresponding bitmasks. Then we could use the
  graph to loop through the qnames and "and" the bitmasks of each
  qname with the bitmasks of their related qnames. The position of
  each field is allocated by the algorithm (e.g. the first "supported"
  field is at position 0 and so on). Actually the first position of
  the bitmask could be used to indicate if the bitmask has already
  been processed or not. In the presence of a cycle force it to true.
- we need a class that takes the SML model and computes the supported
  bitmasks for each qname; the supported expander then simply takes
  this (perhaps as part of the expansion context), looks up for the
  current qname and uses the field list to set the flags
  appropriately.
- we should remove all traces of supported from a settings
  perspective; supported and multi-level enabled are just artefacts of
  the meta-data. From a settings perspective, there is just a
  formatter level (common formatter settings) enabled which determines
  whether the formatter is on or off. How that flag came to be
  computed is not relevant outside the expansion process. This also
  means we can have simpler or more complex policies as time allows us
  improve on this story; provided we can at least set all flags to
  enabled we can move forward.

Solution for cycles:

- detect the cycle and then remember the pair (a, b) where b is the
  start of the cycle and a is the last vertex before the cycle. We
  should assume that a is (true, true) for the edge (a, b) and compute
  all other edges. Finally, once the graph has been processed we
  should check all of the pairs in a cycle; for these we should simply
  look at the values of b, and update a accordingly.

Other notes:

- we need some validation to ensure that some types will be generated
  at all. The existing "generatable types" logic will have to be
  removed or perhaps updated; we should take the opportunity to make
  it reflect whether a type belongs to the target model or not. This
  has no bearing on generatability (other that non-target types are
  always not generated). So at the middle-end level we need to check
  if there are any target types at all, and if not, just want the user
  and exit. Then, a second layer is required at the model group /
  language level to determine if there are any types to generate. It
  is entirely possible that we end up not generating anything at all
  because once we went through the graph everything got
  disabled. Users will have to somehow debug this when things go
  wrong.
- following on from this, we probably need a "dump info" option that
  explains the enabled/supported decisions for a given model, for all
  target types; possibly, users could then supply regexes to filter
  this info (e.g. why did you not generate =hash= for type =xyz=? can
  I see all types for formatter =abc=?). It may be useful to have an
  option to toggle between "target only types" and "all types",
  because the system types may be the ones causing the problem.
- the enabled supported logic applies to all formatters across all
  model groups.

*Capture enablement validation rules*

Enablement requires some validation. This story captures all the rules
we need to check for.

- integrated IO must not be enabled if IO is enabled and vice-versa
  (opaque settings validator). actually it seems this is possible, we
  need to investigate the current implementation.
- types must be enabled
- if serialisation is enabled, types forward declaration of the
  serialisation classes must be enabled

*** POSTPONED Yarn minor tidy-ups                                     :story:
    CLOSED: [2015-12-07 Mon 23:24]
    CLOCK: [2015-12-07 Mon 23:00]--[2015-12-07 Mon 23:18] =>  0:18
    CLOCK: [2015-12-06 Sun 23:34]--[2015-12-06 Sun 23:43] =>  0:09
    CLOCK: [2015-12-06 Sun 23:24]--[2015-12-06 Sun 23:33] =>  0:09
    CLOCK: [2015-12-06 Sun 21:53]--[2015-12-06 Sun 22:50] =>  0:57
    CLOCK: [2015-12-04 Fri 23:46]--[2015-12-05 Sat 00:06] =>  0:20
    CLOCK: [2015-12-04 Fri 23:33]--[2015-12-04 Fri 23:45] =>  0:12
    CLOCK: [2015-12-04 Fri 23:07]--[2015-12-04 Fri 23:32] =>  0:25

Go through all files in yarn and do all the minor tidy-ups we haven't
yet done:

- remove context, use model references directly
- add comments: purpose of the class, explanation of algorithms,
  whether the class is expected to work on a partial or merged model,
  etc.
- break long functions.

Classes done:

- assembler, association indexer, building error, concept, concept
  indexer, element, element traversal, enumerator, expander, frontend
  registrar, frontend workflow , frontend interface.

** Deprecated
*** CANCELLED Replace name with id's in yarn                          :story:
    CLOSED: [2015-11-09 Mon 22:36]

*Rationale*: superseded with the backlog refactoring.

*New Understanding*

This is a new spin on that old chestnut of splitting partial models
from full models. We probably got enough to do this. The

*Previous Understanding*

We don't really need qname in it's current form for the purposes of
yarn. We should:

- create a base class for all types in model called element.
- add a property called id to element. Compute id on the basis of
  hashing name and location. Change all model containers,
  relationships etc to use id instead of qname.
*** CANCELLED Rename types in =yarn= using MOF/eCore terms            :story:
    CLOSED: [2015-11-19 Thu 08:46]

*Rationale*: We have more or less got to the final form for yarn given
the use cases. There is no need for further renamings, other than the
stories we already have open on the topic.

Rename the types in =yarn= to make them a bit more inline with
MOF/eCore. As much as possible but without going overboard. Ensure we
do not pick up meta-meta-model concepts by mistake. Rename nested
qname to something more sensible from MOF/eCore. Review all concept
names in this light.
*** CANCELLED Add =operator<= for names                               :story:
    CLOSED: [2015-11-22 Sun 22:44]

*Rationale*: we will use the element identifier as the key for most
things so this will no longer be required.

We seem to redefine this all over the place. Create a utility class
somewhere.
