#+title: Sprint Backlog 58
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Commentary

** Mission

Implement dynamic and start making use of it in SML.

** Retrospective

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2015-01-05 Mon 23:14]

| Headline                                     | Time   |      |      |
|----------------------------------------------+--------+------+------|
| *Total time*                                 | *4:13* |      |      |
|----------------------------------------------+--------+------+------|
| Active                                       |        | 4:13 |      |
| STARTED Sprint and product backlog grooming  |        |      | 0:58 |
| COMPLETED Implement dynamic's workflow       |        |      | 2:56 |
| COMPLETED Rename =Taggable= to =Extensible=  |        |      | 0:08 |
| COMPLETED Add dynamic object to =Extensible= |        |      | 0:11 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2015-01-03 Sat 15:22]--[2015-01-03 Sat 15:30] =>  0:08
    CLOCK: [2015-01-03 Sat 14:33]--[2015-01-03 Sat 15:02] =>  0:14
    CLOCK: [2014-12-29 Mon 22:15]--[2014-12-29 Mon 22:25] =>  0:10
    CLOCK: [2014-12-16 Tue 15:50]--[2014-12-16 Tue 16:01] =>  0:08

Updates to sprint and product backlog.

*** COMPLETED Implement dynamic's workflow                            :story:
    CLOSED: [2015-01-03 Sat 14:33]
    CLOCK: [2015-01-03 Sat 14:12]--[2015-01-03 Sat 14:33] =>  0:21
    CLOCK: [2015-01-03 Sat 13:42]--[2015-01-03 Sat 14:10] =>  0:28
    CLOCK: [2014-12-29 Mon 23:53]--[2014-12-30 Tue 00:01] =>  0:08
    CLOCK: [2014-12-29 Mon 22:25]--[2014-12-29 Mon 23:53] =>  1:28
    CLOCK: [2014-12-16 Tue 16:14]--[2014-12-16 Tue 16:33] =>  0:19
    CLOCK: [2014-12-16 Tue 16:01]--[2014-12-16 Tue 16:13] =>  0:12

We have started the basic skeleton for the dynamic classes; continue
this work by implementing the workflow and it's dependent classes.

*Random Thoughts*

- we should remove default values for now. We do not have a good story
  on how it will work, and we can default things by hard-coding them
  for now. It is not clear that making defaults dynamic will give any
  benefits and it is already clear it is not trivial to get right. As
  part of this change we renamed =is_optional= to =is_mandatory=. Also
  removed the =value_types= in value as it is not clear how it will be
  used yet.

*** COMPLETED Rename =Taggable= to =Extensible=                       :story:
    CLOSED: [2015-01-03 Sat 15:07]
    CLOCK: [2015-01-03 Sat 15:07]--[2015-01-03 Sat 15:11] =>  0:04
    CLOCK: [2015-01-03 Sat 15:03]--[2015-01-03 Sat 15:07] =>  0:04

SML objects have meta-data object instead of the ptree; Taggable is
perhaps not the best name for the concept but we need to think of a
better alternative. =Extensible= perhaps? =DynamicallyExtensible=?

Final decision: =Extensible=.

*** COMPLETED Add dynamic object to =Extensible=                      :story:
    CLOSED: [2015-01-03 Sat 15:22]
    CLOCK: [2015-01-03 Sat 15:11]--[2015-01-03 Sat 15:22] =>  0:11

Add a new property for the dynamic extensions. For now we keep =ptree=
side-by-side with dynamic.

** Deprecated

*** CANCELLED Utility meta-data factory                               :story:
    CLOSED: [2015-01-03 Sat 15:00]

*Rationale*: This won't make sense after the dynamic refactor.

Now that we have a number of meta-data factories that produce settings
we should be able to factor out all their commonalities and add a
utility factory to the =formatters= model that handles all use
cases. Each factory then uses the utility factory instead of calling
reader etc directly.

We can't create a single factory because we need to generate multiple
products that are model dependent.

*** CANCELLED Consider merging graphers into a single class           :story:
    CLOSED: [2015-01-03 Sat 15:00]

*Rationale*: Graphers got removed some time ago.

After the meta-data work, we ended up with two separate graphers doing
similar things. We should look into the commonalities of these classes
to see if we can reuse code.
