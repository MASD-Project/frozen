#+title: Sprint Backlog 85
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) }

* Mission Statement

- finish implementing hashing and test data helpers.
- start implementing class info formatters in terms of yarn types.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2016-08-01 Mon 19:17]
| <75>                                                                        |         |       |      |       |
| Headline                                                                    | Time    |       |      |     % |
|-----------------------------------------------------------------------------+---------+-------+------+-------|
| *Total time*                                                                | *32:25* |       |      | 100.0 |
|-----------------------------------------------------------------------------+---------+-------+------+-------|
| Stories                                                                     | 32:25   |       |      | 100.0 |
| Active                                                                      |         | 32:25 |      | 100.0 |
| COMPLETED Sprint and product backlog grooming                               |         |       | 1:32 |   4.7 |
| COMPLETED Implement hashing using dynamic helpers                           |         |       | 2:53 |   8.9 |
| COMPLETED Analysis on pointers and type parameters                          |         |       | 0:37 |   1.9 |
| COMPLETED Add support for numbers in dynamic                                |         |       | 0:32 |   1.6 |
| COMPLETED Add type parameters support to yarn                               |         |       | 1:56 |   6.0 |
| COMPLETED Implement is circular dependency correctly                        |         |       | 0:13 |   0.7 |
| COMPLETED Implement "fallback" helpers                                      |         |       | 1:03 |   3.2 |
| COMPLETED Implement test data using dynamic helpers                         |         |       | 7:13 |  22.3 |
| COMPLETED Remove optionality from helper settings                           |         |       | 0:22 |   1.1 |
| COMPLETED Remove unused aspect settings                                     |         |       | 0:31 |   1.6 |
| COMPLETED Reactivate compressed tests                                       |         |       | 0:03 |   0.2 |
| COMPLETED Add aspect properties infrastructure                              |         |       | 3:40 |  11.3 |
| COMPLETED Mark name trees with simple types                                 |         |       | 0:19 |   1.0 |
| COMPLETED Use id in attributes indexer instead of name                      |         |       | 0:08 |   0.4 |
| COMPLETED Remove primitive id generation in helpers                         |         |       | 0:23 |   1.2 |
| COMPLETED Populate attribute's is fluent correctly in yarn                  |         |       | 0:12 |   0.6 |
| COMPLETED Implement type' class header in terms of =yarn::object=           |         |       | 4:14 |  13.1 |
| COMPLETED Add streaming settings to context                                 |         |       | 0:48 |   2.5 |
| COMPLETED Implement types' class implementation in terms of =yarn::object=  |         |       | 4:16 |  13.2 |
| COMPLETED Implement io's header in terms of =yarn::object=                  |         |       | 0:13 |   0.7 |
| COMPLETED Implement io's header in terms of =yarn::object=                  |         |       | 0:19 |   1.0 |
| COMPLETED Implement hash's header in terms of =yarn::object=                |         |       | 0:06 |   0.3 |
| COMPLETED Implement hash's header in terms of =yarn::object=                |         |       | 0:34 |   1.7 |
| COMPLETED Implement serialisation's header in terms of =yarn::object=       |         |       | 0:10 |   0.5 |
| POSTPONED Implement serialisation's header in terms of =yarn::object=       |         |       | 0:08 |   0.4 |
#+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
#+end:

*** COMPLETED Sprint and product backlog grooming                     :story:
    CLOSED: [2016-08-01 Mon 19:16]
    CLOCK: [2016-07-28 Thu 07:46]--[2016-07-28 Thu 07:57] =>  0:11
    CLOCK: [2016-07-26 Tue 22:10]--[2016-07-26 Tue 22:29] =>  0:19
    CLOCK: [2016-07-24 Sun 23:28]--[2016-07-24 Sun 23:34] =>  0:06
    CLOCK: [2016-07-23 Sat 23:11]--[2016-07-23 Sat 23:24] =>  0:13
    CLOCK: [2016-07-23 Sat 09:17]--[2016-07-23 Sat 09:21] =>  0:04
    CLOCK: [2016-07-20 Wed 17:38]--[2016-07-20 Wed 17:55] =>  0:17
    CLOCK: [2016-07-19 Tue 20:30]--[2016-07-19 Tue 20:52] =>  0:22

Updates to sprint and product backlog.

*** COMPLETED Implement hashing using dynamic helpers                 :story:
    CLOSED: [2016-07-20 Wed 00:08]
    CLOCK: [2016-07-19 Tue 23:57]--[2016-07-20 Wed 00:08] =>  0:11
    CLOCK: [2016-07-19 Tue 23:50]--[2016-07-19 Tue 23:56] =>  0:06
    CLOCK: [2016-07-19 Tue 22:29]--[2016-07-19 Tue 23:30] =>  1:01
    CLOCK: [2016-07-19 Tue 20:53]--[2016-07-19 Tue 22:28] =>  1:35

Update formatters in hash to use new helpers.

- =requires_hashing_helper_method=: is there a hashing helper for type
  t? We can tell if the type requires helpers, but this is across all
  facets, so we don't know if this is for hashing or not. But for a
  given family, the helpers register against a owning formatter. If a
  type exists for that owning formatter then a helper is required. We
  could add an attribute to properties that is computed based on this.

*** COMPLETED Analysis on pointers and type parameters                :story:
    CLOSED: [2016-07-20 Wed 17:37]
    CLOCK: [2016-07-20 Wed 17:00]--[2016-07-20 Wed 17:37] =>  0:37

Originally we created opaque and transparent relationships as a way to
figure out which types can be forward-declared. We then added
=are_children_opaque= to the name tree so that we could figure out
which type of relationship to use. But:

- we never marked types as =are_children_opaque=.
- transparent and opaque are "weird" terms.

What we were looking for was the general (in the "category" sense) way
of classifying types such that we could infer which ones could be
forward declared. Another way of looking at this is to classify types
in terms of memory allocation: heap, stack or both. In the vast
majority of cases, allocation is determined by looking at the name
tree. But in some cases, allocation is determined by the containing
type - i.e. smart pointers allocate on the heap.

- we could add type parameters to the objects.
- type parameters could have a stack or heap location.

So what can we say about a type (see [[https://www.sgi.com/tech/stl/table_of_contents.html][SGL container concepts]]):

- is it a container
- forward container
- reversible container
- random access container
- fixed size, size
- variable sized
- sequence
- associative container
- unique associative container, multiple associative container
- pair associative container, simple associative container
- sorted associative container
- hashed associative container

Actually containerisation and generics are somewhat orthogonal: a type
can be a container and not have type parameters; a type can have type
parameters and not be a container (in the STL concept sense). So we
can reduce our focus to the type parameter side. We can have a class
=type_parameterisation_properties=, which has the following
attributes:

- number of parameters (0 by default)
- parameters are allocated in heap?

This still sounds extremely hacky. The key difference between a shared
pointer and say a list of pointers is this: the underlying type is
always in the heap for a shared pointer, whereas for a list, it is
dependent on the type parameter. Also, in the specific case of yarn,
we are only worried about cases where there are type parameters, so
the right place to put this detail is with the type parameter
information.

In conclusion: add type parameter properties.

*** COMPLETED Add support for numbers in dynamic                      :story:
    CLOSED: [2016-07-21 Thu 20:32]
    CLOCK: [2016-07-21 Thu 20:09]--[2016-07-21 Thu 20:41] =>  0:32

In order to be able to process the number of type parameters we need
numeric support in dynamic. Add all required infrastructure.

*** COMPLETED Add type parameters support to yarn                     :story:
    CLOSED: [2016-07-21 Thu 22:51]
    CLOCK: [2016-07-21 Thu 22:43]--[2016-07-21 Thu 22:51] =>  0:08
    CLOCK: [2016-07-21 Thu 22:01]--[2016-07-21 Thu 22:42] =>  0:41
    CLOCK: [2016-07-21 Thu 20:01]--[2016-07-21 Thu 20:08] =>  0:07
    CLOCK: [2016-07-21 Thu 07:12]--[2016-07-21 Thu 07:42] =>  0:30
    CLOCK: [2016-07-21 Thu 06:59]--[2016-07-21 Thu 07:11] =>  0:12
    CLOCK: [2016-07-20 Wed 23:01]--[2016-07-20 Wed 23:05] =>  0:04
    CLOCK: [2016-07-20 Wed 22:46]--[2016-07-20 Wed 23:00] =>  0:14

- add enum type parameterisation styles: none, variable, fixed.
- add type parameter settings class with fields: type parameterisation
  styles, number of type parameters and type parameters always in
  heap.
- add type parameter settings factory which reads type parameters from
  meta-data.
- create a method to obtain all id's of types with type
  parameters. Supply that container to the factory generating name
  trees.
- in the factory, validate that types in a name tree have the expected
  number of type parameters.
- in the factory, if "type parameters always in heap" for a type, set
  are children opaque.
- add a "is pointer" attribute to helpers.
- set it to true if the parent has "are children opaque" set to true.
- update library to use new tags.

*** COMPLETED Implement is circular dependency correctly              :story:
    CLOSED: [2016-07-21 Thu 23:05]
    CLOCK: [2016-07-21 Thu 22:52]--[2016-07-21 Thu 23:05] =>  0:13

At present we are marking the top-level type as circular dependency if
it or any of its children have a reference to the owning type. This is
not useful. What we need is for the actual name tree that causes the
cycle to be marked so that when we are creating the helper we can set
a flag in the helper. This flag could also be "is circular
dependency".

*** COMPLETED Implement "fallback" helpers                            :story:
    CLOSED: [2016-07-22 Fri 21:43]
    CLOCK: [2016-07-22 Fri 20:58]--[2016-07-22 Fri 21:40] =>  0:42
    CLOCK: [2016-07-21 Thu 23:24]--[2016-07-21 Thu 23:29] =>  0:05
    CLOCK: [2016-07-21 Thu 23:07]--[2016-07-21 Thu 23:23] =>  0:16

For test data we need to introduce the notion of "fallback helpers":
if a type has no helper, look for a fallback helper for a given
formatter. If that exists, use it.

Actually this is not quite that easy. What we are trying to say is
that types for which there is no helper family should have a default
helper family. This would mean all types across yarn and across the
target model would end up mapping to the same helper, which is not
ideal - e.g. enumerations, concepts, primitives, etc would map to the
same fallback helper. By sheer luck this probably works, because we
only use helpers for nested type info and only objects can have nested
type infos.

The second problem is that we are only looking for a helper if the
type had a helper assistant in the first place. But the notion of
fallbacks implies that no helper assistant existed - or that we must
always set the helper assistant to fallback, meaning all types will
need helper assistants.

This can be achieved by using a default value for the family. It is
not ideal because it means we will now create helpers for _all_ types
in a name tree. But it should work.

*** COMPLETED Implement test data using dynamic helpers               :story:
    CLOSED: [2016-07-23 Sat 09:16]
    CLOCK: [2016-07-23 Sat 09:09]--[2016-07-23 Sat 09:16] =>  0:07
    CLOCK: [2016-07-23 Sat 09:05]--[2016-07-23 Sat 09:08] =>  0:03
    CLOCK: [2016-07-23 Sat 08:45]--[2016-07-23 Sat 09:04] =>  0:19
    CLOCK: [2016-07-23 Sat 08:25]--[2016-07-23 Sat 08:44] =>  0:19
    CLOCK: [2016-07-23 Sat 00:01]--[2016-07-23 Sat 01:15] =>  1:14
    CLOCK: [2016-07-22 Fri 23:34]--[2016-07-23 Sat 00:00] =>  0:26
    CLOCK: [2016-07-22 Fri 22:07]--[2016-07-22 Fri 23:33] =>  1:26
    CLOCK: [2016-07-22 Fri 21:43]--[2016-07-22 Fri 22:06] =>  0:23
    CLOCK: [2016-07-20 Wed 22:31]--[2016-07-20 Wed 22:44] =>  0:13
    CLOCK: [2016-07-20 Wed 21:57]--[2016-07-20 Wed 22:30] =>  0:33
    CLOCK: [2016-07-20 Wed 21:41]--[2016-07-20 Wed 21:56] =>  0:15
    CLOCK: [2016-07-20 Wed 19:10]--[2016-07-20 Wed 19:14] =>  0:04
    CLOCK: [2016-07-20 Wed 18:40]--[2016-07-20 Wed 19:09] =>  0:29
    CLOCK: [2016-07-20 Wed 18:14]--[2016-07-20 Wed 18:21] =>  0:07
    CLOCK: [2016-07-20 Wed 17:56]--[2016-07-20 Wed 18:13] =>  0:17
    CLOCK: [2016-07-20 Wed 15:50]--[2016-07-20 Wed 16:20] =>  0:30
    CLOCK: [2016-07-20 Wed 13:41]--[2016-07-20 Wed 14:09] =>  0:28

Update formatters in test data to use new helpers.

- for test data we need to introduce the notion of "fallback
  helpers". If a type has no helper, look for a fallback helper for a
  given formatter. If that exists, use it.
- for composite types: detect composition when creating the name trees
  in yarn. Mark the type as composite. Actually, composite is the
  wrong name. We should call it "recursive type" (a type defined in
  terms of itself).
- we need to detect types that are contained in pointers so that we
  generate the helpers accordingly.
- for pointers we already have =are_children_opaque=. We just need to
  populate this correctly.
- we can merge composite with domain, we just need a flag "generate
  with default values" or "generate with values". The nested type info
  could record type recursion at the point where it happens.
- rename int, char, bool.
- for whatever reason =dogen::test_models::boost_model::pkg1::class_c=
  is not coming out for test data. We can clearly see in the logs that
  the helper has been setup correctly but no output comes out.

*** COMPLETED Create a settings class for the "requires" settings     :story:
    CLOSED: [2016-07-23 Sat 23:14]

*Rationale*: done as part of aspect properties work.

We need to populate these in a settings workflow of some kind.

*** COMPLETED Remove optionality from helper settings                 :story:
    CLOSED: [2016-07-24 Sun 23:03]
    CLOCK: [2016-07-24 Sun 22:40]--[2016-07-24 Sun 23:02] =>  0:22

When we implemented fallback / default settings, it ceased to make
sense to have optionality on helper settings; we are now always
providing some kind of helpers. Remove all of the optionality we left
behind.

*** COMPLETED Remove unused aspect settings                           :story:
    CLOSED: [2016-07-25 Mon 21:57]
    CLOCK: [2016-07-25 Mon 21:26]--[2016-07-25 Mon 21:57] =>  0:31

We don't really have strong use cases for these:

- =disable_complete_constructor=
- =disable_xml_serialization=

We can always add them if required in the future, but at present they
are adding additional complexity for no obvious gain.

Removed with commit 709429a.

*** COMPLETED Reactivate compressed tests                             :story:
    CLOSED: [2016-07-25 Mon 22:01]
    CLOCK: [2016-07-25 Mon 21:58]--[2016-07-25 Mon 22:01] =>  0:03

We disabled the compressed model tests at some point in the past. Not
quite sure why. Reactivate it.

*** COMPLETED Add aspect properties infrastructure                    :story:
    CLOSED: [2016-07-25 Mon 23:37]
    CLOCK: [2016-07-25 Mon 22:55]--[2016-07-25 Mon 23:37] =>  0:42
    CLOCK: [2016-07-25 Mon 22:29]--[2016-07-25 Mon 22:54] =>  0:25
    CLOCK: [2016-07-25 Mon 22:19]--[2016-07-25 Mon 22:28] =>  0:09
    CLOCK: [2016-07-25 Mon 22:02]--[2016-07-25 Mon 22:18] =>  0:16
    CLOCK: [2016-07-25 Mon 21:08]--[2016-07-25 Mon 21:25] =>  0:17
    CLOCK: [2016-07-24 Sun 23:04]--[2016-07-24 Sun 23:27] =>  0:23
    CLOCK: [2016-07-24 Sun 22:30]--[2016-07-24 Sun 22:40] =>  0:10
    CLOCK: [2016-07-23 Sat 23:50]--[2016-07-24 Sun 00:24] =>  0:34
    CLOCK: [2016-07-23 Sat 22:59]--[2016-07-23 Sat 23:10] =>  0:11
    CLOCK: [2016-07-23 Sat 22:20]--[2016-07-23 Sat 22:53] =>  0:33

- we need to add missing aspect settings to existing settings classes,
  with fields etc. We also need to mark types accordingly.
- create aspect property classes to handle post processing of
  settings. This only requires looking at direct descendants as per
  [[https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/agile/sprint_backlog_66.org#analyse-the-correct-way-of-implementing-the-formattables-workflow][prior analysis]] on sprint 66, with the exception of stream
  manipulators.
- add aspect properties to element properties.
- add accessors to assistant.
- problem: we were lazy and tried to merge two different forms of
  aspect settings into one class: those that are merely optional, and
  belong to the element we want to format (disabble complete
  constructor, xml serialisation, etc); and those that belong to the
  helper types (requires manual move constructor, etc). The problem is
  this won't work since we will not have element settings for all
  these types. We actually need two classes to represent this data.
- another way to look at this is: do we really need all of these
  features? we could probably get away with always generating XML
  support and complete constructors. If there is a requirement, we can
  revisit.

*** COMPLETED Mark name trees with simple types                       :story:
    CLOSED: [2016-07-26 Tue 21:46]
    CLOCK: [2016-07-26 Tue 21:27]--[2016-07-26 Tue 21:46] =>  0:19

We need a way to know if a name tree has an enumeration or a
primitive.

*** COMPLETED Use id in attributes indexer instead of name            :story:
    CLOSED: [2016-07-27 Wed 19:38]
    CLOCK: [2016-07-27 Wed 19:30]--[2016-07-27 Wed 19:38] =>  0:08

We are using a set of name to keep track of processed types. Use ids
instead.

*** COMPLETED Remove primitive id generation in helpers               :story:
    CLOSED: [2016-07-27 Wed 20:03]
    CLOCK: [2016-07-27 Wed 19:50]--[2016-07-27 Wed 20:03] =>  0:13
    CLOCK: [2016-07-27 Wed 19:39]--[2016-07-27 Wed 19:49] =>  0:10

We generated a container of primitve id's when creating helpers. Now
we have "is current simple type" in yarn's name tree we no longer need
this.

*** COMPLETED Populate attribute's is fluent correctly in yarn
    CLOSED: [2016-07-27 Wed 20:16]
    CLOCK: [2016-07-27 Wed 20:04]--[2016-07-27 Wed 20:16] =>  0:12

At present we are not setting is fluent on yarn properties. Fix this.

*** COMPLETED Implement type' class header in terms of =yarn::object= :story:
    CLOSED: [2016-07-28 Thu 08:10]
    CLOCK: [2016-07-28 Thu 08:06]--[2016-07-28 Thu 08:10] =>  0:04
    CLOCK: [2016-07-28 Thu 07:57]--[2016-07-28 Thu 08:05] =>  0:08
    CLOCK: [2016-07-28 Thu 07:36]--[2016-07-28 Thu 07:46] =>  0:10
    CLOCK: [2016-07-27 Wed 19:15]--[2016-07-27 Wed 19:28] =>  0:13
    CLOCK: [2016-07-27 Wed 18:18]--[2016-07-27 Wed 19:00] =>  0:42
    CLOCK: [2016-07-27 Wed 18:15]--[2016-07-27 Wed 18:18] =>  0:03
    CLOCK: [2016-07-27 Wed 07:59]--[2016-07-27 Wed 08:24] =>  0:25
    CLOCK: [2016-07-27 Wed 07:38]--[2016-07-27 Wed 07:58] =>  0:20
    CLOCK: [2016-07-26 Tue 22:30]--[2016-07-26 Tue 22:50] =>  0:20
    CLOCK: [2016-07-26 Tue 22:30]--[2016-07-26 Tue 22:35] =>  0:05
    CLOCK: [2016-07-26 Tue 21:47]--[2016-07-26 Tue 22:09] =>  0:22
    CLOCK: [2016-07-26 Tue 20:52]--[2016-07-26 Tue 21:26] =>  0:34
    CLOCK: [2016-07-23 Sat 21:55]--[2016-07-23 Sat 22:19] =>  0:24
    CLOCK: [2016-07-23 Sat 21:47]--[2016-07-23 Sat 21:54] =>  0:07
    CLOCK: [2016-07-23 Sat 15:10]--[2016-07-23 Sat 15:27] =>  0:17

Time to have a go at moving the type's class header stitch template
from class info to yarn types.

- we need to enable some side-by-side infrastructure so we can
  refactor the class info formatters one at the time, without breaking
  the existing code generation. Create a set of classes
  =new_class_formatter= for the new code.
- we do not seem to be propagating the requires* properties
  correctly.
- we are generating services when we shouldn't.
- for enumerations, we can't rely on the aspect settings. This is
  because these are generated types. We need to infer this.
- "is primitive" in helper is the same as "is simple type". update
  helper to match. Remove primitive id generation.

*** COMPLETED Add streaming settings to context                       :story:
    CLOSED: [2016-07-31 Sun 17:56]
    CLOCK: [2016-07-31 Sun 17:21]--[2016-07-31 Sun 17:56] =>  0:35
    CLOCK: [2016-07-31 Sun 16:55]--[2016-07-31 Sun 17:05] =>  0:26
    CLOCK: [2016-07-31 Sun 16:52]--[2016-07-31 Sun 16:55] =>  0:03

In order to implement the inserter operator formatter we need to
obtain the streaming settings. At present these are only used to
produce the helper properties. We need to expose the main repository
of streaming settings into the formatting context.

*** COMPLETED Implement types' class implementation in terms of =yarn::object= :story:
    CLOSED: [2016-07-31 Sun 20:07]
    CLOCK: [2016-07-31 Sun 20:31]--[2016-07-31 Sun 20:59] =>  0:28
    CLOCK: [2016-07-31 Sun 20:07]--[2016-07-31 Sun 20:30] =>  0:23
    CLOCK: [2016-07-31 Sun 18:15]--[2016-07-31 Sun 20:06] =>  1:51
    CLOCK: [2016-07-31 Sun 16:29]--[2016-07-31 Sun 16:51] =>  0:22
    CLOCK: [2016-07-29 Fri 21:31]--[2016-07-29 Fri 22:43] =>  1:12

Move type's class implementation stitch template from class info to
yarn object.

*** COMPLETED Implement io's header in terms of =yarn::object=        :story:
    CLOSED: [2016-07-31 Sun 21:54]
    CLOCK: [2016-07-31 Sun 21:40]--[2016-07-31 Sun 21:53] =>  0:13

Move io class header stitch template from class info to yarn object.

*** COMPLETED Implement io's header in terms of =yarn::object=        :story:
    CLOSED: [2016-07-31 Sun 22:14]
    CLOCK: [2016-07-31 Sun 22:11]--[2016-07-31 Sun 22:14] =>  0:03
    CLOCK: [2016-07-31 Sun 21:54]--[2016-07-31 Sun 22:10] =>  0:16

Move io class header stitch template from class info to yarn object.

*** COMPLETED Implement hash's header in terms of =yarn::object=      :story:
    CLOSED: [2016-07-31 Sun 22:21]
    CLOCK: [2016-07-31 Sun 22:15]--[2016-07-31 Sun 22:21] =>  0:06

Move hash class header stitch template from class info to yarn object.

*** COMPLETED Implement hash's header in terms of =yarn::object=      :story:
    CLOSED: [2016-07-31 Sun 22:58]
    CLOCK: [2016-07-31 Sun 22:47]--[2016-07-31 Sun 22:57] =>  0:10
    CLOCK: [2016-07-31 Sun 22:40]--[2016-07-31 Sun 22:46] =>  0:06
    CLOCK: [2016-07-31 Sun 22:22]--[2016-07-31 Sun 22:40] =>  0:18

Move hash class header stitch template from class info to yarn object.

Problems:

- we need to know which types require hashing support. This can be
  done by looking at the helpers for a type.
- date needs to be handled by a helper: we previously hacked the
  template by adding =modjulian_day=. The puzzling thing is that we
  also have a helper doing exactly the same thing.

*** COMPLETED Implement serialisation's header in terms of =yarn::object= :story:
    CLOSED: [2016-07-31 Sun 23:08]
    CLOCK: [2016-07-31 Sun 22:58]--[2016-07-31 Sun 23:08] =>  0:10

Move serialisation class header stitch template from class info to
yarn object.

*** POSTPONED Implement serialisation's header in terms of =yarn::object= :story:
    CLOSED: [2016-08-01 Mon 19:16]
    CLOCK: [2016-07-31 Sun 23:09]--[2016-07-31 Sun 23:17] =>  0:08

Move serialisation class header stitch template from class info to
yarn object.

Problems:

- we've hacked filesystem path. We need to create a helper for it.

** Deprecated

*** CANCELLED Write next interesting instalment in blog               :story:
    CLOSED: [2016-07-12 Tue 17:33]

*Rationale*: Not much of a point of having "interesting" related
stories in backlog.

We have a number of links backlogged and we need to offload them in an
"interesting..." post.
*** CANCELLED Create a ebook and dead-tree book for the manual        :story:
    CLOSED: [2016-07-12 Tue 18:07]

*Rationale*: this story does not add any value. We need to write the
manual and then worry about this.

We should probably start by creating a simple ebook first and then
explore the dead-tree options such as [[http://www.lulu.com][Lulu]]. We should also see what
Luigi did for [[https://leanpub.com/implementingquantlib/][QuantLib]].
