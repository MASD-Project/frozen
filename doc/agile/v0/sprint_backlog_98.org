#+title: Sprint Backlog 98
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) }

* Mission Statement

- Improve ODB support.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2017-03-06 Mon 10:33]
| <75>                                                                        |         |       |       |       |
| Headline                                                                    | Time    |       |       |     % |
|-----------------------------------------------------------------------------+---------+-------+-------+-------|
| *Total time*                                                                | *45:37* |       |       | 100.0 |
|-----------------------------------------------------------------------------+---------+-------+-------+-------|
| Stories                                                                     | 45:37   |       |       | 100.0 |
| Active                                                                      |         | 45:37 |       | 100.0 |
| STARTED Sprint and product backlog grooming                                 |         |       |  2:18 |   5.0 |
| COMPLETED Edit release notes for previous sprint                            |         |       |  0:30 |   1.1 |
| COMPLETED Fix the handling of ODB pragmas for yarn primitives               |         |       |  0:56 |   2.0 |
| COMPLETED Rename intermediate model expander and model factory              |         |       |  0:53 |   1.9 |
| COMPLETED Injection splits annotation from intermediate model               |         |       |  0:35 |   1.3 |
| COMPLETED ODB Fixes to support Oracle                                       |         |       |  2:14 |   4.9 |
| COMPLETED Setup codacy                                                      |         |       |  0:22 |   0.8 |
| COMPLETED Fix codacy warning on exceptions                                  |         |       |  0:08 |   0.3 |
| COMPLETED Create a language independent ORM layer                           |         |       | 12:51 |  28.2 |
| COMPLETED Make log directory configurable                                   |         |       |  1:26 |   3.1 |
| COMPLETED Tidy-up test models                                               |         |       |  2:37 |   5.7 |
| POSTPONED Implement the database model using Northwind                      |         |       | 20:47 |  45.6 |
#+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2017-03-06 Mon 10:15]--[2017-03-06 Mon 10:32] =>  0:17
    CLOCK: [2017-03-03 Fri 11:20]--[2017-03-03 Fri 11:35] =>  0:15
    CLOCK: [2017-03-03 Fri 10:15]--[2017-03-03 Fri 11:19] =>  1:04
    CLOCK: [2017-03-03 Fri 08:21]--[2017-03-03 Fri 08:39] =>  0:18
    CLOCK: [2017-02-24 Fri 13:01]--[2017-02-24 Fri 13:16] =>  0:15
    CLOCK: [2017-02-13 Mon 11:55]--[2017-02-13 Mon 12:04] =>  0:09

Updates to sprint and product backlog.

*** COMPLETED Edit release notes for previous sprint                  :story:
    CLOSED: [2017-02-13 Mon 12:35]
    CLOCK: [2017-02-13 Mon 12:18]--[2017-02-13 Mon 12:35] =>  0:17
    CLOCK: [2017-02-13 Mon 12:04]--[2017-02-13 Mon 12:17] =>  0:13

Add github release notes for previous sprint.

Title: Dogen v0.97.0, "Marginal"

#+begin_src markdown
![alt text](http://www.angolabelazebelo.com/wp-content/uploads/2012/11/Namibe-23102661.jpg)
Marginal de MoÃ§amedes, Namibe, Angola. (C) Angola Bela. Sourced from Angola Bela's site.

Overview
=======
This sprint had work slightly scattered, but the core work are a few interesting features for users around enumerations and primitives - described below.

In this release we also started work on the next generation parser, thanks to @klemens-morgenstern who has laid its foundations. The integration work of this new parser will proceed over the next few sprints.

User visible changes
===============
In this sprint, a small number of user visible changes were made:

- **Enumerations are more configurable**: Its now possible to disable the ```invalid``` enumeration and add user defined enumeration values. This is useful for defining bitflags for example. See the ```enumeration``` test model for examples ([Dia](https://raw.githubusercontent.com/DomainDrivenConsulting/dogen/master/test_data/yarn.dia/input/enumeration.dia), [JSON](https://raw.githubusercontent.com/DomainDrivenConsulting/dogen/master/test_data/yarn.json/input/enumeration.json)).
- **Introduction of Primitives**: A new meta-model concept was introduced called a ```primitive```. This allows users to "redefine" built-in types or other select types such as ```std::string``` for their own purposes. As an example you can define a ```product_id``` as a primitive with an underlying type of ```std::string```. This makes the models more intuitive and the generated code more readable. See the ```primitive``` test model for examples ([Dia](https://raw.githubusercontent.com/DomainDrivenConsulting/dogen/master/test_data/yarn.dia/input/primitive.dia), [JSON](https://raw.githubusercontent.com/DomainDrivenConsulting/dogen/master/test_data/yarn.json/input/primitive.json)).
- **Improvements in Validation**: assorted updates to validation, including checking that the enumeration underlying type is valid as an enumeration type, checking for C# keywords, etc.

For more details of the work carried out this sprint, see the [sprint log](https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/agile/sprint_backlog_97.org).

Next Sprint
========
The next sprint will continue to focus on Upsilon and hopefully C#.

Binaries
======
You can download experimental binaries from [Bintray](https://bintray.com/domaindrivenconsulting/Dogen) for OSX, Linux and Windows (all 64-bit):

- [dogen_0.97.0_amd64-applications.deb](https://dl.bintray.com/domaindrivenconsulting/Dogen/0.97.0/dogen_0.97.0_amd64-applications.deb)
- [dogen-0.97.0-Darwin-x86_64.dmg](https://dl.bintray.com/domaindrivenconsulting/Dogen/0.97.0/dogen-0.97.0-Darwin-x86_64.dmg)
- [dogen-0.97.0-Windows-AMD64.msi](https://dl.bintray.com/domaindrivenconsulting/Dogen/dogen-0.97.0-Windows-AMD64.msi)

**Note**: They are produced by CI so they may not yet be ready.

For all other architectures and/or operative systems, you will need to build Dogen from source. Source downloads are available below.
#+end_src

- [[https://twitter.com/MarcoCraveiro/status/820962437465866241][Tweet]]

*** COMPLETED Fix the handling of ODB pragmas for yarn primitives     :story:
    CLOSED: [2017-03-04 Sat 17:16]
    CLOCK: [2017-02-25 Sat 21:32]--[2017-02-25 Sat 21:52] =>  0:20
    CLOCK: [2017-02-25 Sat 20:55]--[2017-02-25 Sat 21:31] =>  0:36

If we are to support primitives with ODB, we should probably have a
mechanism to automatically add the pragmas to the primitive:

: #pragma db value(region_id) schema("northwind")
: #pragma db member(region_id::value_) column("region_id")

In addition we are not generating pragmas at all for primitives at
present.

Actually we should only add the member pragma if there is at least one
value-level pragma.

Final decision on this was to generate the pragma on the back of a
schema pragma insertion and to inject the attribute automatically on
the back of it.

*** COMPLETED Rename intermediate model expander and model factory    :story:
    CLOSED: [2017-02-25 Sat 23:52]
    CLOCK: [2017-02-25 Sat 23:37]--[2017-02-25 Sat 23:52] =>  0:15
    CLOCK: [2017-02-25 Sat 22:58]--[2017-02-25 Sat 23:36] =>  0:38

Originally we thought of these classes as if they pertained to the
type of model they were working on; however, with the appearance of
first and second stage validation it became clear that we just have
two pipelines for two different stages of processing. Rename these two
classes to reflect the pipelines, and split out the final model
generation from the second stage.

*** COMPLETED Fix ODB targets                                         :story:
    CLOSED: [2017-02-25 Sat 23:56]

*Rationale*: Fixed as part of other codegen fixes.

At present the ODB targets make no sense:

- we must manually create =codegen_northwind=
- the name =codegen= is obscure - should just be "odb"

*** COMPLETED Injection splits annotation from intermediate model     :story:
    CLOSED: [2017-02-26 Sun 00:41]
    CLOCK: [2017-02-26 Sun 00:32]--[2017-02-26 Sun 00:41] =>  0:09
    CLOCK: [2017-02-26 Sun 00:05]--[2017-02-26 Sun 00:31] =>  0:26

For some random reason we decided to supply both the intermediate
model and the root annotation into the injectors, when they can
themselves obtain it from the intermediate model. This just causes
confusion because now it seems the API is telling us that the root
annotation could come from somewhere else, when in fact it
can't. Remove it from the API and force injectors to read it directly
from the intermediate model.

*** COMPLETED ODB Fixes to support Oracle                             :story:
    CLOSED: [2017-02-26 Sun 22:04]
    CLOCK: [2017-02-26 Sun 21:02]--[2017-02-26 Sun 22:04] =>  1:02
    CLOCK: [2017-02-25 Sat 23:54]--[2017-02-26 Sun 00:04] =>  0:10
    CLOCK: [2017-02-25 Sat 22:30]--[2017-02-25 Sat 22:57] =>  0:27
    CLOCK: [2017-02-25 Sat 21:54]--[2017-02-25 Sat 22:29] =>  0:35

At present we hard-coded quite a bit of the ODB profile just to allow
it to work for postgres. However, this is now causing problems when we
try to use oracle.

We need to make the hard-coded parameters configurable via meta-data.

#+begin_example
modified   Src/XDatabase/CMakeLists.txt
@@ -49,15 +49,16 @@ foreach(odb_file ${all_odb_files})
         string(REPLACE "\\" "_" type_name ${type_name})
         string(REPLACE "/" "_" type_name ${type_name})
+        set(pfh_dir "$ENV{PFH_LOCATION}")
         set(target_name "codegen_XDatabase_odb_${type_name}")
         add_custom_target(${target_name}
             WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
-            COMMAND ${ODB_COMPILER}
+            COMMAND odb
             --options-file ${CMAKE_CURRENT_SOURCE_DIR}/src/options.odb
             --std c++11
             --output-dir ${CMAKE_CURRENT_SOURCE_DIR}/include/Stockpile/XDatabase/odb/
-            --odb-epilogue "\"#include \\\"Stockpile/XDatabase/odb/${odb_file}\"\\\""
-            -I c:/home/local/cpp/include -I ${CMAKE_CURRENT_SOURCE_DIR}/include
+            --odb-epilogue '\#include \"Stockpile/XDatabase/odb/${odb_file}\"'
+            -I ${pfh_dir}/include -I ${CMAKE_CURRENT_SOURCE_DIR}/include
             ${include_dir}/types/${type_name}.hpp)
         add_dependencies(codegen_XDatabase_odb ${target_name})


modified   Src/XDatabase/src/options.odb
@@ -13,10 +13,11 @@
# this material is strictly forbidden unless prior written permission is
# obtained from the copyright holder.
#
---std c++11
+# enable C++11. FIXME: causes ODB crash in options file.
+# --std c++11
-# target oracle
---database oracle
+# target postgres
+--database pgsql
 # use the boost profile
--profile boost
#+end_example

*** COMPLETED Make ODB backend settable from meta-data                :story:
    CLOSED: [2017-02-26 Sun 22:04]

*Rationale*: Fixed as part of another story.

At present we hard-coded the ODB backend in the options file. However:

- we may have more than one backend;
- users must be able to set them.

*** COMPLETED Setup codacy                                            :story:
    CLOSED: [2017-03-01 Wed 20:04]
    CLOCK: [2017-03-01 Wed 19:41]--[2017-03-01 Wed 20:03] =>  0:22

We created an account for codacy but never got round setting it
up. How to set it up:

#+begin_quote
For future reference, I didn't realise I needed to manually enable the
checkers: Code Patterns (left hand-side bar at the bottom), cppcheck,
tick all boxes (all 302 of them, in my case). You can also provide a
config file, apparently.
#+end_quote

*** COMPLETED Fix codacy warning on exceptions                        :story:
    CLOSED: [2017-03-03 Fri 21:19]
    CLOCK: [2017-03-03 Fri 21:11]--[2017-03-03 Fri 21:19] =>  0:08

Codacy picked up on the fact that our constructor for exceptions is
not explicit. Update template and regenerate all code.

*** COMPLETED Create a language independent ORM layer                 :story:
    CLOSED: [2017-03-03 Fri 23:59]
    CLOCK: [2017-03-04 Sat 00:00]--[2017-03-04 Sat 00:27] =>  0:27
    CLOCK: [2017-03-03 Fri 23:54]--[2017-03-03 Fri 23:59] =>  0:05
    CLOCK: [2017-03-03 Fri 23:28]--[2017-03-03 Fri 23:53] =>  0:25
    CLOCK: [2017-03-03 Fri 22:57]--[2017-03-03 Fri 23:27] =>  0:30
    CLOCK: [2017-03-03 Fri 22:40]--[2017-03-03 Fri 22:56] =>  0:16
    CLOCK: [2017-03-03 Fri 22:01]--[2017-03-03 Fri 22:39] =>  0:38
    CLOCK: [2017-03-03 Fri 21:20]--[2017-03-03 Fri 21:34] =>  0:14
    CLOCK: [2017-03-03 Fri 14:58]--[2017-03-03 Fri 15:36] =>  0:38
    CLOCK: [2017-03-03 Fri 14:42]--[2017-03-03 Fri 14:57] =>  0:15
    CLOCK: [2017-03-03 Fri 13:23]--[2017-03-03 Fri 13:39] =>  0:16
    CLOCK: [2017-03-03 Fri 12:59]--[2017-03-03 Fri 13:22] =>  0:23
    CLOCK: [2017-03-03 Fri 12:48]--[2017-03-03 Fri 12:58] =>  0:10
    CLOCK: [2017-03-03 Fri 12:39]--[2017-03-03 Fri 12:47] =>  0:08
    CLOCK: [2017-03-03 Fri 11:36]--[2017-03-03 Fri 12:38] =>  1:02
    CLOCK: [2017-03-02 Thu 09:39]--[2017-03-02 Thu 10:03] =>  0:24
    CLOCK: [2017-03-02 Thu 08:05]--[2017-03-02 Thu 09:38] =>  1:33
    CLOCK: [2017-03-02 Thu 06:48]--[2017-03-02 Thu 07:28] =>  0:40
    CLOCK: [2017-03-01 Wed 13:10]--[2017-03-01 Wed 17:57] =>  4:47

At present we are populating ODB pragmas manually. While this works,
this has a number of downsides:

- we need to add ODB schema pragmas to all types we want to
  generate. Ideally it would be better to just mark the type as
  "ORM generatable" or some other flag. Dogen then adds the appropriate
  ODB pragmas.
- we need to manually upper case all schemas and column names. Whilst
  this can be ameliorated by using the ODB compiler command line
  options, we still have to deal with the cases where the user
  overrides the schema name or the column name. Because ODB uses
  quotes, we get the values as-is, meaning the user needs to upper
  case all of them. This is a particular problem for primitives,
  because we are injecting the column name.
- whenever the primitive name matches the attribute name, we want to
  "reset" the column name; else we end up with a name like
  "my_id_my_id". Actually the solution is the other way around:
  primitives should always have a blank column name and the attribute
  using them should be responsible for setting the column name.

These are:

- =yarn.orm.enabled=: model module level. If true, will switch on language
  specific ORM. Do we need this? Users should just enable low-level
  ORM.
- =yarn.orm.generate_mapping=: boolean. If true, generate mapping for a
  given type.
- =yarn.orm.database=: container of supported database types. Create
  enumeration. PostgreSQL, etc. Model level.
- =yarn.orm.override=: if true, orm meta-data is ignored
  altogether. User is expected to manually supply ODB
  pragmas. Actually we can just not use "generate_mapping" for this
  type and add pragmas manually. Actually we should wait for a use
  case for this; we may need an "additive" override, or a "remove all
  and add only these" override. For now lets just not support
  overrides.
- =yarn.orm.schema_name=: model module level or element
- =yarn.orm.table_name=: element
- =yarn.orm.is_primary_key=: boolean. Attribute level.
- =yarn.orm.column_name=: string. Attribute level.
- =yarn.orm.nullable=: boolean. Attribute level.
- =yarn.org.naming_style=: enum: capitals, lowercase, as_is. Model
  level.
- =yarn.org.meta_type=: value or object.
- =yarn.org.type_mapping=: string. For now only BLOB is
  supported. Actually lets use a generic mapping scheme instead so
  that we push this logic to the user.

Basically we have the following "configuration points":

- =orm_model_configuration=: naming style, database, schema name;
- =orm_element_configuration=: generate mapping, schema name, table
  name, meta type
- =orm_attribute_configuration=: type, nullable, column name, is
  primary key.

We need to add classes in yarn to capture this.

*Previous Understanding*

When we start using odb in anger we need to tidy-up how it is
implemented. We need to split the concepts which properly belong in
yarn such as identity, primary key, foreign key, etc from those that
are odb specific (perhaps schema name etc). odb formatter simply maps
yarn concepts to odb concepts rather than having its own. We need to
dig out the stories around key support.

This story should only be done when we are building real databases
with odb.

This time has arrived now. We should create a set of concepts in yarn
related to ORM (object-relational mapping).

*** COMPLETED Make log directory configurable                         :story:
    CLOSED: [2017-03-04 Sat 19:03]
    CLOCK: [2017-03-04 Sat 19:04]--[2017-03-04 Sat 19:30] =>  0:26
    CLOCK: [2017-03-04 Sat 18:31]--[2017-03-04 Sat 19:03] =>  0:32
    CLOCK: [2017-03-04 Sat 18:02]--[2017-03-04 Sat 18:30] =>  0:28

It would be nice to supply a directory for the log files and get dogen
to output the logs there.

*** COMPLETED Tidy-up test models                                     :story:
    CLOSED: [2017-03-04 Sat 23:44]
    CLOCK: [2017-03-04 Sat 23:38]--[2017-03-04 Sat 23:44] =>  0:06
    CLOCK: [2017-03-04 Sat 23:07]--[2017-03-04 Sat 23:37] =>  0:30
    CLOCK: [2017-03-04 Sat 22:25]--[2017-03-04 Sat 23:06] =>  0:41
    CLOCK: [2017-03-04 Sat 21:04]--[2017-03-04 Sat 22:24] =>  1:20

#+begin_quote
*Story*: As a dogen developer, I want to be able to understand the
test models quickly so that I know at which model to look at when
doing a change.
#+end_quote

We have a lot of fine grained test models for historic reasons. A lot
of these could be collapsed into a smaller number of models, focused
on testing a set of well defined features.

One thing to keep in mind is that when we do fundamental work (such as
moving from the old formatting architecture to the new one), it is
really useful to have small, incremental test models because we can
then get tests to pass, one by one, as we refactor. We don't want to
move to a world where you need to implement all the features in one
go.

Note: we should take this opportunity to fix naming inconsistencies in
test models such as some models having the word "model" such as
=std_model= and other not (=enumeration=, etc).

**** Models that need changing

Merge the following models into a =basic= or =trivial= model (no
aggregation, no association):

- classes_in_a_package
- classes_inout_package
- classes_without_package
- class_in_a_package
- class_without_attributes
- class_without_package
- stand_alone_class

We should also check the combined model has all the scenarios
described in [[*Cross%20package%20referencing%20tests][Cross package referencing tests]].

Merge the following models into stereotypes:

- enumeration
- exception

Consider deleting the comments model and make sure we have comments in
all models with the same features:

- top-level comment for the model
- package level comment
- notes

These models are at the right level of granularity but need renaming:

- all_builtins: built-ins or builtins_model to line up with boost
  and std.
- trivial_association: association
- trivial_inheritance: inheritance

**** Models that do not need changing and why

These models test other models, and we cannot remove the postfix
=_model= to avoid clashes with namespaces:

- boost_model
- std_model

These models test command line options, which means they cannot be
merged:

- disable_cmakelists
- disable_facet_folders
- disable_full_ctor
- enable_facet_domain
- enable_facet_hash
- enable_facet_io
- enable_facet_serialization

These models test features which have enough scenarios to justify
keeping them in isolation:

- database

These models test dia features and must be kept isolated:

- compressed
- two_layers_with_objects

**** Add objects, enumerations and exceptions to comments model

At present we are only testing packages in comments.

**** Rename the =database= test model to =odb=

This name is a bit misleading, this is not a generic database model
but its designed to specifically test odb.

*** POSTPONED Implement the database model using Northwind            :story:
    CLOSED: [2017-03-06 Mon 10:33]
    CLOCK: [2017-02-28 Tue 06:41]--[2017-02-28 Tue 07:25] =>  0:44
    CLOCK: [2017-02-27 Mon 22:11]--[2017-02-27 Mon 22:34] =>  0:23
    CLOCK: [2017-02-27 Mon 21:10]--[2017-02-27 Mon 22:10] =>  1:00
    CLOCK: [2017-02-26 Sun 23:22]--[2017-02-27 Mon 00:10] =>  0:48
    CLOCK: [2017-02-26 Sun 22:48]--[2017-02-26 Sun 23:21] =>  0:33
    CLOCK: [2017-02-26 Sun 22:05]--[2017-02-26 Sun 22:47] =>  0:42
    CLOCK: [2017-02-25 Sat 19:47]--[2017-02-25 Sat 19:52] =>  0:05
    CLOCK: [2017-02-25 Sat 18:56]--[2017-02-25 Sat 19:46] =>  0:50
    CLOCK: [2017-02-25 Sat 18:02]--[2017-02-25 Sat 18:56] =>  0:54
    CLOCK: [2017-02-25 Sat 04:05]--[2017-02-25 Sat 05:54] =>  1:49
    CLOCK: [2017-02-24 Fri 21:01]--[2017-02-24 Fri 22:55] =>  1:54
    CLOCK: [2017-02-24 Fri 10:34]--[2017-02-24 Fri 12:39] =>  2:05
    CLOCK: [2017-02-24 Fri 09:01]--[2017-02-24 Fri 10:33] =>  1:32
    CLOCK: [2017-02-23 Thu 23:06]--[2017-02-23 Thu 23:39] =>  0:33
    CLOCK: [2017-02-23 Thu 19:15]--[2017-02-23 Thu 23:05] =>  3:50
    CLOCK: [2017-02-14 Tue 06:33]--[2017-02-14 Tue 07:30] =>  0:57
    CLOCK: [2017-02-13 Mon 20:25]--[2017-02-13 Mon 22:33] =>  2:08

Now we are using Dogen in anger with ODB, we need to make sure the
database model is actually exercising all of this functionality. One
easy way of achieving this is to use Microsoft's Northwind Database as
the base for the model.

- [[https://northwinddatabase.codeplex.com/][Northwind Database]]

We should implement it using Oracle and use this to test the changes
to ODB's oracle support.

Tasks:

- add comment for ODB targets
- add flag to mark a type as a value
- case of the identifiers is a problem: sometimes we get them
  uppercase (when we do them without quotes in sql plus) sometimes we
  get them lowercase (from odb). use =--sql-name-case= upper/lower as
  a flag.
- schema initialisation from statics is not working; this is as
  explained in [[http://www.codesynthesis.com/pipermail/odb-users/2013-May/001286.html][this email]]. We can force it by doing a query on that
  entity, but that then causes an exception.
- =head -n 200 northwind_ascii.sql | grep ^INSERT | cut -b 1-150 | uniq=

** Deprecated
